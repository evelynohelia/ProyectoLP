Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    BACKSLASH
    BOOL
    CIRCUNFLEJO
    COMADOBLE
    COMASIMPLE
    COMENTARIO
    DOBLEPUNTO
    INTERROGACION
    NEW
    NULLPOINTER
    NUMERAL
    PIPE
    PORCENTAJE
    PRIVATE
    PROTECTED
    PUBLIC
    PUNTERO
    STATIC
    THEN
    VIRGUILA

Grammar

Rule 0     S' -> body
Rule 1     body -> variable
Rule 2     body -> while
Rule 3     body -> expresionif
Rule 4     body -> claseimplementacion
Rule 5     body -> for
Rule 6     body -> arraydeclaration
Rule 7     body -> funcionclaseimpl
Rule 8     body -> creacionobjeto
Rule 9     body -> asignarvalorobjeto
Rule 10    body -> usarfuncionobjeto
Rule 11    body -> struct
Rule 12    body -> imprimir
Rule 13    body -> <empty>
Rule 14    tipo -> INT
Rule 15    tipo -> FLOAT
Rule 16    tipo -> LONG
Rule 17    tipo -> AUTO
Rule 18    tipo -> CHAR
Rule 19    tipo -> VOID
Rule 20    imprimir -> PRINT LPAR valor RPAR
Rule 21    imprimir -> COUT MENOR MENOR valor
Rule 22    bodyblock -> bodyblock variable
Rule 23    bodyblock -> bodyblock while
Rule 24    bodyblock -> bodyblock expresionif
Rule 25    bodyblock -> bodyblock for
Rule 26    bodyblock -> bodyblock imprimir
Rule 27    bodyblock -> <empty>
Rule 28    funcionblock -> bodyblock variable
Rule 29    funcionblock -> bodyblock while
Rule 30    funcionblock -> bodyblock expresionif
Rule 31    funcionblock -> bodyblock for
Rule 32    funcionblock -> bodyblock imprimir
Rule 33    funcionblock -> RETURN statement
Rule 34    funcionblock -> <empty>
Rule 35    varblock -> varblock variable
Rule 36    varblock -> <empty>
Rule 37    variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA
Rule 38    variable -> numerotipo IDENTIFICADOR PUNTOCOMA
Rule 39    variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA
Rule 40    variable -> AUTO IDENTIFICADOR PUNTOCOMA
Rule 41    variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA
Rule 42    numerotipo -> INT
Rule 43    numerotipo -> FLOAT
Rule 44    numerotipo -> LONG
Rule 45    numero -> ENTERO
Rule 46    numero -> FLOTANTE
Rule 47    valor -> ENTERO
Rule 48    valor -> FLOTANTE
Rule 49    valor -> CHARACTER
Rule 50    valor -> STRING
Rule 51    valor -> TRUE
Rule 52    valor -> FALSE
Rule 53    valor -> IDENTIFICADOR
Rule 54    while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
Rule 55    expresion -> expresion comparador expresion
Rule 56    struct -> STRUCT IDENTIFICADOR LLAVEL varblock LLAVER IDENTIFICADOR PUNTOCOMA
Rule 57    expresionif -> IF LPAR condicionif RPAR conllaves expresionpos
Rule 58    expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos
Rule 59    expresionpos -> else
Rule 60    expresionpos -> elseif
Rule 61    expresionpos -> <empty>
Rule 62    elseif -> ELSE IF LPAR condicionif RPAR conllaves else
Rule 63    elseif -> ELSE IF LPAR condicionif RPAR sinllaves else
Rule 64    elseif -> <empty>
Rule 65    else -> ELSE conllaves
Rule 66    else -> ELSE sinllaves
Rule 67    sinllaves -> while
Rule 68    sinllaves -> variable
Rule 69    conllaves -> LLAVEL bodyblock LLAVER
Rule 70    condicionif -> initcondicion
Rule 71    condicionif -> statement
Rule 72    initcondicion -> varblock statement
Rule 73    statement -> expresion
Rule 74    statement -> EXCLAMACION boolean
Rule 75    statement -> EXCLAMACION LPAR expresion RPAR
Rule 76    statement -> EXCLAMACION IDENTIFICADOR
Rule 77    boolean -> TRUE
Rule 78    boolean -> FALSE
Rule 79    expresion -> valor
Rule 80    comparador -> IGUAL IGUAL
Rule 81    comparador -> MENOR
Rule 82    comparador -> MAYOR
Rule 83    comparador -> MENOR IGUAL
Rule 84    comparador -> MAYOR IGUAL
Rule 85    comparador -> EXCLAMACION IGUAL
Rule 86    initfor -> tipo IDENTIFICADOR IGUAL valor
Rule 87    condfor -> IDENTIFICADOR comparador valor
Rule 88    loopfor -> asign
Rule 89    loopfor -> unaryexp
Rule 90    asign -> IDENTIFICADOR MAS valor
Rule 91    asign -> IDENTIFICADOR MENOS valor
Rule 92    asign -> IDENTIFICADOR ASTERISCO valor
Rule 93    asign -> IDENTIFICADOR SLASH valor
Rule 94    unaryexp -> IDENTIFICADOR MAS MAS
Rule 95    unaryexp -> IDENTIFICADOR MENOS MENOS
Rule 96    for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER
Rule 97    arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER PUNTOCOMA
Rule 98    arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL LLAVEL arraydata LLAVER PUNTOCOMA
Rule 99    arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL LLAVEL LLAVER PUNTOCOMA
Rule 100   arraydata -> arraydata COMMA valor
Rule 101   arraydata -> valor
Rule 102   claseimplementacion -> CLASS IDENTIFICADOR LLAVEL bloqueclase LLAVER
Rule 103   bloqueclase -> bloqueclase definicion
Rule 104   bloqueclase -> bloqueclase funcionclaseimpl
Rule 105   bloqueclase -> <empty>
Rule 106   definicion -> tipo IDENTIFICADOR PUNTOCOMA
Rule 107   definicion -> <empty>
Rule 108   funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER
Rule 109   funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER
Rule 110   funcionclaseimpl -> <empty>
Rule 111   parametrosimplementacion -> tipo IDENTIFICADOR masparametrosimplementacion
Rule 112   parametrosimplementacion -> <empty>
Rule 113   parametrosfuncion -> IDENTIFICADOR masparametrosfuncion
Rule 114   parametrosfuncion -> <empty>
Rule 115   masparametrosimplementacion -> COMMA parametrosimplementacion
Rule 116   masparametrosimplementacion -> <empty>
Rule 117   masparametrosfuncion -> COMMA parametrosfuncion
Rule 118   masparametrosfuncion -> <empty>
Rule 119   creacionobjeto -> IDENTIFICADOR IDENTIFICADOR PUNTOCOMA
Rule 120   asignarvalorobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR IGUAL valor
Rule 121   asignarvalorobjeto -> LPAR expresion RPAR
Rule 122   asignarvalorobjeto -> LPAR statement RPAR
Rule 123   asignarvalorobjeto -> EXCLAMACION LPAR statement RPAR
Rule 124   usarfuncionobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR LPAR parametrosfuncion RPAR PUNTOCOMA

Terminals, with rules where they appear

AND                  : 
ASTERISCO            : 92
AUTO                 : 17 39 40
BACKSLASH            : 
BOOL                 : 
CHAR                 : 18 41
CHARACTER            : 41 49
CIRCUNFLEJO          : 
CLASS                : 102
COMADOBLE            : 
COMASIMPLE           : 
COMENTARIO           : 
COMMA                : 100 115 117
CORCHETEL            : 97 98 99
CORCHETER            : 97 98 99
COUT                 : 21
DOBLEPUNTO           : 
ELSE                 : 62 63 65 66
ENTERO               : 45 47 97 98 99
EXCLAMACION          : 74 75 76 85 123
FALSE                : 52 78
FLOAT                : 15 43
FLOTANTE             : 46 48
FOR                  : 96
IDENTIFICADOR        : 37 38 39 40 41 53 56 56 76 86 87 90 91 92 93 94 95 97 98 99 102 106 108 109 111 113 119 119 120 120 124 124
IF                   : 57 58 62 63
IGUAL                : 37 39 41 80 80 83 84 85 86 98 99 120
INT                  : 14 42
INTERROGACION        : 
LLAVEL               : 54 56 69 96 98 99 102 108 109
LLAVER               : 54 56 69 96 98 99 102 108 109
LONG                 : 16 44
LPAR                 : 20 54 57 58 62 63 75 96 108 109 121 122 123 124
MAS                  : 90 94 94
MAYOR                : 82 84
MENOR                : 21 21 81 83
MENOS                : 91 95 95
NEW                  : 
NULLPOINTER          : 
NUMERAL              : 
PIPE                 : 
PORCENTAJE           : 
PRINT                : 20
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
PUNTERO              : 
PUNTO                : 120 124
PUNTOCOMA            : 37 38 39 40 41 56 96 96 97 98 99 106 108 119 124
RETURN               : 33 108
RPAR                 : 20 54 57 58 62 63 75 96 108 109 121 122 123 124
SLASH                : 93
STATIC               : 
STRING               : 50
STRUCT               : 56
THEN                 : 
TRUE                 : 51 77
VIRGUILA             : 
VOID                 : 19 109
WHILE                : 54
error                : 

Nonterminals, with rules where they appear

arraydata            : 98 100
arraydeclaration     : 6
asign                : 88
asignarvalorobjeto   : 9
bloqueclase          : 102 103 104
body                 : 0
bodyblock            : 22 23 24 25 26 28 29 30 31 32 54 69 96 108 109
boolean              : 74
claseimplementacion  : 4
comparador           : 55 87
condfor              : 96
condicionif          : 57 58 62 63
conllaves            : 57 62 65
creacionobjeto       : 8
definicion           : 103
else                 : 59 62 63
elseif               : 60
expresion            : 55 55 73 75 121
expresionif          : 3 24 30
expresionpos         : 57 58
for                  : 5 25 31
funcionblock         : 
funcionclaseimpl     : 7 104
imprimir             : 12 26 32
initcondicion        : 70
initfor              : 96
loopfor              : 96
masparametrosfuncion : 113
masparametrosimplementacion : 111
numero               : 37
numerotipo           : 37 38
parametrosfuncion    : 117 124
parametrosimplementacion : 108 109 115
sinllaves            : 58 63 66
statement            : 33 54 71 72 122 123
struct               : 11
tipo                 : 86 97 98 99 106 108 111
unaryexp             : 89
usarfuncionobjeto    : 10
valor                : 20 21 39 79 86 87 90 91 92 93 100 101 108 120
varblock             : 35 56 72
variable             : 1 22 28 35 68
while                : 2 23 29 67

Parsing method: LALR

state 0

    (0) S' -> . body
    (1) body -> . variable
    (2) body -> . while
    (3) body -> . expresionif
    (4) body -> . claseimplementacion
    (5) body -> . for
    (6) body -> . arraydeclaration
    (7) body -> . funcionclaseimpl
    (8) body -> . creacionobjeto
    (9) body -> . asignarvalorobjeto
    (10) body -> . usarfuncionobjeto
    (11) body -> . struct
    (12) body -> . imprimir
    (13) body -> .
    (37) variable -> . numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA
    (38) variable -> . numerotipo IDENTIFICADOR PUNTOCOMA
    (39) variable -> . AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA
    (40) variable -> . AUTO IDENTIFICADOR PUNTOCOMA
    (41) variable -> . CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA
    (54) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (57) expresionif -> . IF LPAR condicionif RPAR conllaves expresionpos
    (58) expresionif -> . IF LPAR condicionif RPAR sinllaves expresionpos
    (102) claseimplementacion -> . CLASS IDENTIFICADOR LLAVEL bloqueclase LLAVER
    (96) for -> . FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER
    (97) arraydeclaration -> . tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER PUNTOCOMA
    (98) arraydeclaration -> . tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL LLAVEL arraydata LLAVER PUNTOCOMA
    (99) arraydeclaration -> . tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL LLAVEL LLAVER PUNTOCOMA
    (108) funcionclaseimpl -> . tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER
    (109) funcionclaseimpl -> . VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER
    (110) funcionclaseimpl -> .
    (119) creacionobjeto -> . IDENTIFICADOR IDENTIFICADOR PUNTOCOMA
    (120) asignarvalorobjeto -> . IDENTIFICADOR PUNTO IDENTIFICADOR IGUAL valor
    (121) asignarvalorobjeto -> . LPAR expresion RPAR
    (122) asignarvalorobjeto -> . LPAR statement RPAR
    (123) asignarvalorobjeto -> . EXCLAMACION LPAR statement RPAR
    (124) usarfuncionobjeto -> . IDENTIFICADOR PUNTO IDENTIFICADOR LPAR parametrosfuncion RPAR PUNTOCOMA
    (56) struct -> . STRUCT IDENTIFICADOR LLAVEL varblock LLAVER IDENTIFICADOR PUNTOCOMA
    (20) imprimir -> . PRINT LPAR valor RPAR
    (21) imprimir -> . COUT MENOR MENOR valor
    (42) numerotipo -> . INT
    (43) numerotipo -> . FLOAT
    (44) numerotipo -> . LONG
    (14) tipo -> . INT
    (15) tipo -> . FLOAT
    (16) tipo -> . LONG
    (17) tipo -> . AUTO
    (18) tipo -> . CHAR
    (19) tipo -> . VOID

  ! reduce/reduce conflict for $end resolved using rule 13 (body -> .)
    $end            reduce using rule 13 (body -> .)
    AUTO            shift and go to state 16
    CHAR            shift and go to state 17
    WHILE           shift and go to state 18
    IF              shift and go to state 20
    CLASS           shift and go to state 21
    FOR             shift and go to state 22
    VOID            shift and go to state 24
    IDENTIFICADOR   shift and go to state 15
    LPAR            shift and go to state 19
    EXCLAMACION     shift and go to state 25
    STRUCT          shift and go to state 26
    PRINT           shift and go to state 27
    COUT            shift and go to state 28
    INT             shift and go to state 29
    FLOAT           shift and go to state 30
    LONG            shift and go to state 31

  ! $end            [ reduce using rule 110 (funcionclaseimpl -> .) ]

    body                           shift and go to state 1
    variable                       shift and go to state 2
    while                          shift and go to state 3
    expresionif                    shift and go to state 4
    claseimplementacion            shift and go to state 5
    for                            shift and go to state 6
    arraydeclaration               shift and go to state 7
    funcionclaseimpl               shift and go to state 8
    creacionobjeto                 shift and go to state 9
    asignarvalorobjeto             shift and go to state 10
    usarfuncionobjeto              shift and go to state 11
    struct                         shift and go to state 12
    imprimir                       shift and go to state 13
    numerotipo                     shift and go to state 14
    tipo                           shift and go to state 23

state 1

    (0) S' -> body .



state 2

    (1) body -> variable .

    $end            reduce using rule 1 (body -> variable .)


state 3

    (2) body -> while .

    $end            reduce using rule 2 (body -> while .)


state 4

    (3) body -> expresionif .

    $end            reduce using rule 3 (body -> expresionif .)


state 5

    (4) body -> claseimplementacion .

    $end            reduce using rule 4 (body -> claseimplementacion .)


state 6

    (5) body -> for .

    $end            reduce using rule 5 (body -> for .)


state 7

    (6) body -> arraydeclaration .

    $end            reduce using rule 6 (body -> arraydeclaration .)


state 8

    (7) body -> funcionclaseimpl .

    $end            reduce using rule 7 (body -> funcionclaseimpl .)


state 9

    (8) body -> creacionobjeto .

    $end            reduce using rule 8 (body -> creacionobjeto .)


state 10

    (9) body -> asignarvalorobjeto .

    $end            reduce using rule 9 (body -> asignarvalorobjeto .)


state 11

    (10) body -> usarfuncionobjeto .

    $end            reduce using rule 10 (body -> usarfuncionobjeto .)


state 12

    (11) body -> struct .

    $end            reduce using rule 11 (body -> struct .)


state 13

    (12) body -> imprimir .

    $end            reduce using rule 12 (body -> imprimir .)


state 14

    (37) variable -> numerotipo . IDENTIFICADOR IGUAL numero PUNTOCOMA
    (38) variable -> numerotipo . IDENTIFICADOR PUNTOCOMA

    IDENTIFICADOR   shift and go to state 32


state 15

    (119) creacionobjeto -> IDENTIFICADOR . IDENTIFICADOR PUNTOCOMA
    (120) asignarvalorobjeto -> IDENTIFICADOR . PUNTO IDENTIFICADOR IGUAL valor
    (124) usarfuncionobjeto -> IDENTIFICADOR . PUNTO IDENTIFICADOR LPAR parametrosfuncion RPAR PUNTOCOMA

    IDENTIFICADOR   shift and go to state 33
    PUNTO           shift and go to state 34


state 16

    (39) variable -> AUTO . IDENTIFICADOR IGUAL valor PUNTOCOMA
    (40) variable -> AUTO . IDENTIFICADOR PUNTOCOMA
    (17) tipo -> AUTO .

  ! shift/reduce conflict for IDENTIFICADOR resolved as shift
    IDENTIFICADOR   shift and go to state 35

  ! IDENTIFICADOR   [ reduce using rule 17 (tipo -> AUTO .) ]


state 17

    (41) variable -> CHAR . IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA
    (18) tipo -> CHAR .

  ! shift/reduce conflict for IDENTIFICADOR resolved as shift
    IDENTIFICADOR   shift and go to state 36

  ! IDENTIFICADOR   [ reduce using rule 18 (tipo -> CHAR .) ]


state 18

    (54) while -> WHILE . LPAR statement RPAR LLAVEL bodyblock LLAVER

    LPAR            shift and go to state 37


state 19

    (121) asignarvalorobjeto -> LPAR . expresion RPAR
    (122) asignarvalorobjeto -> LPAR . statement RPAR
    (55) expresion -> . expresion comparador expresion
    (79) expresion -> . valor
    (73) statement -> . expresion
    (74) statement -> . EXCLAMACION boolean
    (75) statement -> . EXCLAMACION LPAR expresion RPAR
    (76) statement -> . EXCLAMACION IDENTIFICADOR
    (47) valor -> . ENTERO
    (48) valor -> . FLOTANTE
    (49) valor -> . CHARACTER
    (50) valor -> . STRING
    (51) valor -> . TRUE
    (52) valor -> . FALSE
    (53) valor -> . IDENTIFICADOR

    EXCLAMACION     shift and go to state 41
    ENTERO          shift and go to state 43
    FLOTANTE        shift and go to state 44
    CHARACTER       shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    IDENTIFICADOR   shift and go to state 42

    expresion                      shift and go to state 38
    statement                      shift and go to state 39
    valor                          shift and go to state 40

state 20

    (57) expresionif -> IF . LPAR condicionif RPAR conllaves expresionpos
    (58) expresionif -> IF . LPAR condicionif RPAR sinllaves expresionpos

    LPAR            shift and go to state 49


state 21

    (102) claseimplementacion -> CLASS . IDENTIFICADOR LLAVEL bloqueclase LLAVER

    IDENTIFICADOR   shift and go to state 50


state 22

    (96) for -> FOR . LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER

    LPAR            shift and go to state 51


state 23

    (97) arraydeclaration -> tipo . IDENTIFICADOR CORCHETEL ENTERO CORCHETER PUNTOCOMA
    (98) arraydeclaration -> tipo . IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL LLAVEL arraydata LLAVER PUNTOCOMA
    (99) arraydeclaration -> tipo . IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL LLAVEL LLAVER PUNTOCOMA
    (108) funcionclaseimpl -> tipo . IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER

    IDENTIFICADOR   shift and go to state 52


state 24

    (109) funcionclaseimpl -> VOID . IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER
    (19) tipo -> VOID .

  ! shift/reduce conflict for IDENTIFICADOR resolved as shift
    IDENTIFICADOR   shift and go to state 53

  ! IDENTIFICADOR   [ reduce using rule 19 (tipo -> VOID .) ]


state 25

    (123) asignarvalorobjeto -> EXCLAMACION . LPAR statement RPAR

    LPAR            shift and go to state 54


state 26

    (56) struct -> STRUCT . IDENTIFICADOR LLAVEL varblock LLAVER IDENTIFICADOR PUNTOCOMA

    IDENTIFICADOR   shift and go to state 55


state 27

    (20) imprimir -> PRINT . LPAR valor RPAR

    LPAR            shift and go to state 56


state 28

    (21) imprimir -> COUT . MENOR MENOR valor

    MENOR           shift and go to state 57


state 29

    (42) numerotipo -> INT .
    (14) tipo -> INT .

  ! reduce/reduce conflict for IDENTIFICADOR resolved using rule 14 (tipo -> INT .)
    IDENTIFICADOR   reduce using rule 14 (tipo -> INT .)

  ! IDENTIFICADOR   [ reduce using rule 42 (numerotipo -> INT .) ]


state 30

    (43) numerotipo -> FLOAT .
    (15) tipo -> FLOAT .

  ! reduce/reduce conflict for IDENTIFICADOR resolved using rule 15 (tipo -> FLOAT .)
    IDENTIFICADOR   reduce using rule 15 (tipo -> FLOAT .)

  ! IDENTIFICADOR   [ reduce using rule 43 (numerotipo -> FLOAT .) ]


state 31

    (44) numerotipo -> LONG .
    (16) tipo -> LONG .

  ! reduce/reduce conflict for IDENTIFICADOR resolved using rule 16 (tipo -> LONG .)
    IDENTIFICADOR   reduce using rule 16 (tipo -> LONG .)

  ! IDENTIFICADOR   [ reduce using rule 44 (numerotipo -> LONG .) ]


state 32

    (37) variable -> numerotipo IDENTIFICADOR . IGUAL numero PUNTOCOMA
    (38) variable -> numerotipo IDENTIFICADOR . PUNTOCOMA

    IGUAL           shift and go to state 58
    PUNTOCOMA       shift and go to state 59


state 33

    (119) creacionobjeto -> IDENTIFICADOR IDENTIFICADOR . PUNTOCOMA

    PUNTOCOMA       shift and go to state 60


state 34

    (120) asignarvalorobjeto -> IDENTIFICADOR PUNTO . IDENTIFICADOR IGUAL valor
    (124) usarfuncionobjeto -> IDENTIFICADOR PUNTO . IDENTIFICADOR LPAR parametrosfuncion RPAR PUNTOCOMA

    IDENTIFICADOR   shift and go to state 61


state 35

    (39) variable -> AUTO IDENTIFICADOR . IGUAL valor PUNTOCOMA
    (40) variable -> AUTO IDENTIFICADOR . PUNTOCOMA

    IGUAL           shift and go to state 62
    PUNTOCOMA       shift and go to state 63


state 36

    (41) variable -> CHAR IDENTIFICADOR . IGUAL CHARACTER PUNTOCOMA

    IGUAL           shift and go to state 64


state 37

    (54) while -> WHILE LPAR . statement RPAR LLAVEL bodyblock LLAVER
    (73) statement -> . expresion
    (74) statement -> . EXCLAMACION boolean
    (75) statement -> . EXCLAMACION LPAR expresion RPAR
    (76) statement -> . EXCLAMACION IDENTIFICADOR
    (55) expresion -> . expresion comparador expresion
    (79) expresion -> . valor
    (47) valor -> . ENTERO
    (48) valor -> . FLOTANTE
    (49) valor -> . CHARACTER
    (50) valor -> . STRING
    (51) valor -> . TRUE
    (52) valor -> . FALSE
    (53) valor -> . IDENTIFICADOR

    EXCLAMACION     shift and go to state 41
    ENTERO          shift and go to state 43
    FLOTANTE        shift and go to state 44
    CHARACTER       shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    IDENTIFICADOR   shift and go to state 42

    statement                      shift and go to state 65
    expresion                      shift and go to state 66
    valor                          shift and go to state 40

state 38

    (121) asignarvalorobjeto -> LPAR expresion . RPAR
    (55) expresion -> expresion . comparador expresion
    (73) statement -> expresion .
    (80) comparador -> . IGUAL IGUAL
    (81) comparador -> . MENOR
    (82) comparador -> . MAYOR
    (83) comparador -> . MENOR IGUAL
    (84) comparador -> . MAYOR IGUAL
    (85) comparador -> . EXCLAMACION IGUAL

  ! shift/reduce conflict for RPAR resolved as shift
    RPAR            shift and go to state 67
    IGUAL           shift and go to state 69
    MENOR           shift and go to state 70
    MAYOR           shift and go to state 71
    EXCLAMACION     shift and go to state 72

  ! RPAR            [ reduce using rule 73 (statement -> expresion .) ]

    comparador                     shift and go to state 68

state 39

    (122) asignarvalorobjeto -> LPAR statement . RPAR

    RPAR            shift and go to state 73


state 40

    (79) expresion -> valor .

    RPAR            reduce using rule 79 (expresion -> valor .)
    IGUAL           reduce using rule 79 (expresion -> valor .)
    MENOR           reduce using rule 79 (expresion -> valor .)
    MAYOR           reduce using rule 79 (expresion -> valor .)
    EXCLAMACION     reduce using rule 79 (expresion -> valor .)


state 41

    (74) statement -> EXCLAMACION . boolean
    (75) statement -> EXCLAMACION . LPAR expresion RPAR
    (76) statement -> EXCLAMACION . IDENTIFICADOR
    (77) boolean -> . TRUE
    (78) boolean -> . FALSE

    LPAR            shift and go to state 75
    IDENTIFICADOR   shift and go to state 76
    TRUE            shift and go to state 77
    FALSE           shift and go to state 78

    boolean                        shift and go to state 74

state 42

    (53) valor -> IDENTIFICADOR .

    RPAR            reduce using rule 53 (valor -> IDENTIFICADOR .)
    IGUAL           reduce using rule 53 (valor -> IDENTIFICADOR .)
    MENOR           reduce using rule 53 (valor -> IDENTIFICADOR .)
    MAYOR           reduce using rule 53 (valor -> IDENTIFICADOR .)
    EXCLAMACION     reduce using rule 53 (valor -> IDENTIFICADOR .)
    PUNTOCOMA       reduce using rule 53 (valor -> IDENTIFICADOR .)
    $end            reduce using rule 53 (valor -> IDENTIFICADOR .)
    LLAVER          reduce using rule 53 (valor -> IDENTIFICADOR .)
    AUTO            reduce using rule 53 (valor -> IDENTIFICADOR .)
    CHAR            reduce using rule 53 (valor -> IDENTIFICADOR .)
    WHILE           reduce using rule 53 (valor -> IDENTIFICADOR .)
    IF              reduce using rule 53 (valor -> IDENTIFICADOR .)
    FOR             reduce using rule 53 (valor -> IDENTIFICADOR .)
    PRINT           reduce using rule 53 (valor -> IDENTIFICADOR .)
    COUT            reduce using rule 53 (valor -> IDENTIFICADOR .)
    INT             reduce using rule 53 (valor -> IDENTIFICADOR .)
    FLOAT           reduce using rule 53 (valor -> IDENTIFICADOR .)
    LONG            reduce using rule 53 (valor -> IDENTIFICADOR .)
    RETURN          reduce using rule 53 (valor -> IDENTIFICADOR .)
    COMMA           reduce using rule 53 (valor -> IDENTIFICADOR .)


state 43

    (47) valor -> ENTERO .

    RPAR            reduce using rule 47 (valor -> ENTERO .)
    IGUAL           reduce using rule 47 (valor -> ENTERO .)
    MENOR           reduce using rule 47 (valor -> ENTERO .)
    MAYOR           reduce using rule 47 (valor -> ENTERO .)
    EXCLAMACION     reduce using rule 47 (valor -> ENTERO .)
    PUNTOCOMA       reduce using rule 47 (valor -> ENTERO .)
    $end            reduce using rule 47 (valor -> ENTERO .)
    LLAVER          reduce using rule 47 (valor -> ENTERO .)
    AUTO            reduce using rule 47 (valor -> ENTERO .)
    CHAR            reduce using rule 47 (valor -> ENTERO .)
    WHILE           reduce using rule 47 (valor -> ENTERO .)
    IF              reduce using rule 47 (valor -> ENTERO .)
    FOR             reduce using rule 47 (valor -> ENTERO .)
    PRINT           reduce using rule 47 (valor -> ENTERO .)
    COUT            reduce using rule 47 (valor -> ENTERO .)
    INT             reduce using rule 47 (valor -> ENTERO .)
    FLOAT           reduce using rule 47 (valor -> ENTERO .)
    LONG            reduce using rule 47 (valor -> ENTERO .)
    RETURN          reduce using rule 47 (valor -> ENTERO .)
    COMMA           reduce using rule 47 (valor -> ENTERO .)


state 44

    (48) valor -> FLOTANTE .

    RPAR            reduce using rule 48 (valor -> FLOTANTE .)
    IGUAL           reduce using rule 48 (valor -> FLOTANTE .)
    MENOR           reduce using rule 48 (valor -> FLOTANTE .)
    MAYOR           reduce using rule 48 (valor -> FLOTANTE .)
    EXCLAMACION     reduce using rule 48 (valor -> FLOTANTE .)
    PUNTOCOMA       reduce using rule 48 (valor -> FLOTANTE .)
    $end            reduce using rule 48 (valor -> FLOTANTE .)
    LLAVER          reduce using rule 48 (valor -> FLOTANTE .)
    AUTO            reduce using rule 48 (valor -> FLOTANTE .)
    CHAR            reduce using rule 48 (valor -> FLOTANTE .)
    WHILE           reduce using rule 48 (valor -> FLOTANTE .)
    IF              reduce using rule 48 (valor -> FLOTANTE .)
    FOR             reduce using rule 48 (valor -> FLOTANTE .)
    PRINT           reduce using rule 48 (valor -> FLOTANTE .)
    COUT            reduce using rule 48 (valor -> FLOTANTE .)
    INT             reduce using rule 48 (valor -> FLOTANTE .)
    FLOAT           reduce using rule 48 (valor -> FLOTANTE .)
    LONG            reduce using rule 48 (valor -> FLOTANTE .)
    RETURN          reduce using rule 48 (valor -> FLOTANTE .)
    COMMA           reduce using rule 48 (valor -> FLOTANTE .)


state 45

    (49) valor -> CHARACTER .

    RPAR            reduce using rule 49 (valor -> CHARACTER .)
    IGUAL           reduce using rule 49 (valor -> CHARACTER .)
    MENOR           reduce using rule 49 (valor -> CHARACTER .)
    MAYOR           reduce using rule 49 (valor -> CHARACTER .)
    EXCLAMACION     reduce using rule 49 (valor -> CHARACTER .)
    PUNTOCOMA       reduce using rule 49 (valor -> CHARACTER .)
    $end            reduce using rule 49 (valor -> CHARACTER .)
    LLAVER          reduce using rule 49 (valor -> CHARACTER .)
    AUTO            reduce using rule 49 (valor -> CHARACTER .)
    CHAR            reduce using rule 49 (valor -> CHARACTER .)
    WHILE           reduce using rule 49 (valor -> CHARACTER .)
    IF              reduce using rule 49 (valor -> CHARACTER .)
    FOR             reduce using rule 49 (valor -> CHARACTER .)
    PRINT           reduce using rule 49 (valor -> CHARACTER .)
    COUT            reduce using rule 49 (valor -> CHARACTER .)
    INT             reduce using rule 49 (valor -> CHARACTER .)
    FLOAT           reduce using rule 49 (valor -> CHARACTER .)
    LONG            reduce using rule 49 (valor -> CHARACTER .)
    RETURN          reduce using rule 49 (valor -> CHARACTER .)
    COMMA           reduce using rule 49 (valor -> CHARACTER .)


state 46

    (50) valor -> STRING .

    RPAR            reduce using rule 50 (valor -> STRING .)
    IGUAL           reduce using rule 50 (valor -> STRING .)
    MENOR           reduce using rule 50 (valor -> STRING .)
    MAYOR           reduce using rule 50 (valor -> STRING .)
    EXCLAMACION     reduce using rule 50 (valor -> STRING .)
    PUNTOCOMA       reduce using rule 50 (valor -> STRING .)
    $end            reduce using rule 50 (valor -> STRING .)
    LLAVER          reduce using rule 50 (valor -> STRING .)
    AUTO            reduce using rule 50 (valor -> STRING .)
    CHAR            reduce using rule 50 (valor -> STRING .)
    WHILE           reduce using rule 50 (valor -> STRING .)
    IF              reduce using rule 50 (valor -> STRING .)
    FOR             reduce using rule 50 (valor -> STRING .)
    PRINT           reduce using rule 50 (valor -> STRING .)
    COUT            reduce using rule 50 (valor -> STRING .)
    INT             reduce using rule 50 (valor -> STRING .)
    FLOAT           reduce using rule 50 (valor -> STRING .)
    LONG            reduce using rule 50 (valor -> STRING .)
    RETURN          reduce using rule 50 (valor -> STRING .)
    COMMA           reduce using rule 50 (valor -> STRING .)


state 47

    (51) valor -> TRUE .

    RPAR            reduce using rule 51 (valor -> TRUE .)
    IGUAL           reduce using rule 51 (valor -> TRUE .)
    MENOR           reduce using rule 51 (valor -> TRUE .)
    MAYOR           reduce using rule 51 (valor -> TRUE .)
    EXCLAMACION     reduce using rule 51 (valor -> TRUE .)
    PUNTOCOMA       reduce using rule 51 (valor -> TRUE .)
    $end            reduce using rule 51 (valor -> TRUE .)
    LLAVER          reduce using rule 51 (valor -> TRUE .)
    AUTO            reduce using rule 51 (valor -> TRUE .)
    CHAR            reduce using rule 51 (valor -> TRUE .)
    WHILE           reduce using rule 51 (valor -> TRUE .)
    IF              reduce using rule 51 (valor -> TRUE .)
    FOR             reduce using rule 51 (valor -> TRUE .)
    PRINT           reduce using rule 51 (valor -> TRUE .)
    COUT            reduce using rule 51 (valor -> TRUE .)
    INT             reduce using rule 51 (valor -> TRUE .)
    FLOAT           reduce using rule 51 (valor -> TRUE .)
    LONG            reduce using rule 51 (valor -> TRUE .)
    RETURN          reduce using rule 51 (valor -> TRUE .)
    COMMA           reduce using rule 51 (valor -> TRUE .)


state 48

    (52) valor -> FALSE .

    RPAR            reduce using rule 52 (valor -> FALSE .)
    IGUAL           reduce using rule 52 (valor -> FALSE .)
    MENOR           reduce using rule 52 (valor -> FALSE .)
    MAYOR           reduce using rule 52 (valor -> FALSE .)
    EXCLAMACION     reduce using rule 52 (valor -> FALSE .)
    PUNTOCOMA       reduce using rule 52 (valor -> FALSE .)
    $end            reduce using rule 52 (valor -> FALSE .)
    LLAVER          reduce using rule 52 (valor -> FALSE .)
    AUTO            reduce using rule 52 (valor -> FALSE .)
    CHAR            reduce using rule 52 (valor -> FALSE .)
    WHILE           reduce using rule 52 (valor -> FALSE .)
    IF              reduce using rule 52 (valor -> FALSE .)
    FOR             reduce using rule 52 (valor -> FALSE .)
    PRINT           reduce using rule 52 (valor -> FALSE .)
    COUT            reduce using rule 52 (valor -> FALSE .)
    INT             reduce using rule 52 (valor -> FALSE .)
    FLOAT           reduce using rule 52 (valor -> FALSE .)
    LONG            reduce using rule 52 (valor -> FALSE .)
    RETURN          reduce using rule 52 (valor -> FALSE .)
    COMMA           reduce using rule 52 (valor -> FALSE .)


state 49

    (57) expresionif -> IF LPAR . condicionif RPAR conllaves expresionpos
    (58) expresionif -> IF LPAR . condicionif RPAR sinllaves expresionpos
    (70) condicionif -> . initcondicion
    (71) condicionif -> . statement
    (72) initcondicion -> . varblock statement
    (73) statement -> . expresion
    (74) statement -> . EXCLAMACION boolean
    (75) statement -> . EXCLAMACION LPAR expresion RPAR
    (76) statement -> . EXCLAMACION IDENTIFICADOR
    (35) varblock -> . varblock variable
    (36) varblock -> .
    (55) expresion -> . expresion comparador expresion
    (79) expresion -> . valor
    (47) valor -> . ENTERO
    (48) valor -> . FLOTANTE
    (49) valor -> . CHARACTER
    (50) valor -> . STRING
    (51) valor -> . TRUE
    (52) valor -> . FALSE
    (53) valor -> . IDENTIFICADOR

  ! shift/reduce conflict for EXCLAMACION resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for FLOTANTE resolved as shift
  ! shift/reduce conflict for CHARACTER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for IDENTIFICADOR resolved as shift
    EXCLAMACION     shift and go to state 41
    AUTO            reduce using rule 36 (varblock -> .)
    CHAR            reduce using rule 36 (varblock -> .)
    INT             reduce using rule 36 (varblock -> .)
    FLOAT           reduce using rule 36 (varblock -> .)
    LONG            reduce using rule 36 (varblock -> .)
    ENTERO          shift and go to state 43
    FLOTANTE        shift and go to state 44
    CHARACTER       shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    IDENTIFICADOR   shift and go to state 42

  ! EXCLAMACION     [ reduce using rule 36 (varblock -> .) ]
  ! ENTERO          [ reduce using rule 36 (varblock -> .) ]
  ! FLOTANTE        [ reduce using rule 36 (varblock -> .) ]
  ! CHARACTER       [ reduce using rule 36 (varblock -> .) ]
  ! STRING          [ reduce using rule 36 (varblock -> .) ]
  ! TRUE            [ reduce using rule 36 (varblock -> .) ]
  ! FALSE           [ reduce using rule 36 (varblock -> .) ]
  ! IDENTIFICADOR   [ reduce using rule 36 (varblock -> .) ]

    condicionif                    shift and go to state 79
    initcondicion                  shift and go to state 80
    statement                      shift and go to state 81
    varblock                       shift and go to state 82
    expresion                      shift and go to state 66
    valor                          shift and go to state 40

state 50

    (102) claseimplementacion -> CLASS IDENTIFICADOR . LLAVEL bloqueclase LLAVER

    LLAVEL          shift and go to state 83


state 51

    (96) for -> FOR LPAR . initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER
    (86) initfor -> . tipo IDENTIFICADOR IGUAL valor
    (14) tipo -> . INT
    (15) tipo -> . FLOAT
    (16) tipo -> . LONG
    (17) tipo -> . AUTO
    (18) tipo -> . CHAR
    (19) tipo -> . VOID

    INT             shift and go to state 86
    FLOAT           shift and go to state 87
    LONG            shift and go to state 88
    AUTO            shift and go to state 89
    CHAR            shift and go to state 90
    VOID            shift and go to state 91

    initfor                        shift and go to state 84
    tipo                           shift and go to state 85

state 52

    (97) arraydeclaration -> tipo IDENTIFICADOR . CORCHETEL ENTERO CORCHETER PUNTOCOMA
    (98) arraydeclaration -> tipo IDENTIFICADOR . CORCHETEL ENTERO CORCHETER IGUAL LLAVEL arraydata LLAVER PUNTOCOMA
    (99) arraydeclaration -> tipo IDENTIFICADOR . CORCHETEL ENTERO CORCHETER IGUAL LLAVEL LLAVER PUNTOCOMA
    (108) funcionclaseimpl -> tipo IDENTIFICADOR . LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER

    CORCHETEL       shift and go to state 92
    LPAR            shift and go to state 93


state 53

    (109) funcionclaseimpl -> VOID IDENTIFICADOR . LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER

    LPAR            shift and go to state 94


state 54

    (123) asignarvalorobjeto -> EXCLAMACION LPAR . statement RPAR
    (73) statement -> . expresion
    (74) statement -> . EXCLAMACION boolean
    (75) statement -> . EXCLAMACION LPAR expresion RPAR
    (76) statement -> . EXCLAMACION IDENTIFICADOR
    (55) expresion -> . expresion comparador expresion
    (79) expresion -> . valor
    (47) valor -> . ENTERO
    (48) valor -> . FLOTANTE
    (49) valor -> . CHARACTER
    (50) valor -> . STRING
    (51) valor -> . TRUE
    (52) valor -> . FALSE
    (53) valor -> . IDENTIFICADOR

    EXCLAMACION     shift and go to state 41
    ENTERO          shift and go to state 43
    FLOTANTE        shift and go to state 44
    CHARACTER       shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    IDENTIFICADOR   shift and go to state 42

    statement                      shift and go to state 95
    expresion                      shift and go to state 66
    valor                          shift and go to state 40

state 55

    (56) struct -> STRUCT IDENTIFICADOR . LLAVEL varblock LLAVER IDENTIFICADOR PUNTOCOMA

    LLAVEL          shift and go to state 96


state 56

    (20) imprimir -> PRINT LPAR . valor RPAR
    (47) valor -> . ENTERO
    (48) valor -> . FLOTANTE
    (49) valor -> . CHARACTER
    (50) valor -> . STRING
    (51) valor -> . TRUE
    (52) valor -> . FALSE
    (53) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 43
    FLOTANTE        shift and go to state 44
    CHARACTER       shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    IDENTIFICADOR   shift and go to state 42

    valor                          shift and go to state 97

state 57

    (21) imprimir -> COUT MENOR . MENOR valor

    MENOR           shift and go to state 98


state 58

    (37) variable -> numerotipo IDENTIFICADOR IGUAL . numero PUNTOCOMA
    (45) numero -> . ENTERO
    (46) numero -> . FLOTANTE

    ENTERO          shift and go to state 100
    FLOTANTE        shift and go to state 101

    numero                         shift and go to state 99

state 59

    (38) variable -> numerotipo IDENTIFICADOR PUNTOCOMA .

    $end            reduce using rule 38 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    EXCLAMACION     reduce using rule 38 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    AUTO            reduce using rule 38 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    CHAR            reduce using rule 38 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    INT             reduce using rule 38 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    FLOAT           reduce using rule 38 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    LONG            reduce using rule 38 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    ENTERO          reduce using rule 38 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    FLOTANTE        reduce using rule 38 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    CHARACTER       reduce using rule 38 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    STRING          reduce using rule 38 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    TRUE            reduce using rule 38 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    FALSE           reduce using rule 38 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    IDENTIFICADOR   reduce using rule 38 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    ELSE            reduce using rule 38 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    LLAVER          reduce using rule 38 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    WHILE           reduce using rule 38 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    IF              reduce using rule 38 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    FOR             reduce using rule 38 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    PRINT           reduce using rule 38 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    COUT            reduce using rule 38 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    RETURN          reduce using rule 38 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)


state 60

    (119) creacionobjeto -> IDENTIFICADOR IDENTIFICADOR PUNTOCOMA .

    $end            reduce using rule 119 (creacionobjeto -> IDENTIFICADOR IDENTIFICADOR PUNTOCOMA .)


state 61

    (120) asignarvalorobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR . IGUAL valor
    (124) usarfuncionobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR . LPAR parametrosfuncion RPAR PUNTOCOMA

    IGUAL           shift and go to state 102
    LPAR            shift and go to state 103


state 62

    (39) variable -> AUTO IDENTIFICADOR IGUAL . valor PUNTOCOMA
    (47) valor -> . ENTERO
    (48) valor -> . FLOTANTE
    (49) valor -> . CHARACTER
    (50) valor -> . STRING
    (51) valor -> . TRUE
    (52) valor -> . FALSE
    (53) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 43
    FLOTANTE        shift and go to state 44
    CHARACTER       shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    IDENTIFICADOR   shift and go to state 42

    valor                          shift and go to state 104

state 63

    (40) variable -> AUTO IDENTIFICADOR PUNTOCOMA .

    $end            reduce using rule 40 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    EXCLAMACION     reduce using rule 40 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    AUTO            reduce using rule 40 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    CHAR            reduce using rule 40 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    INT             reduce using rule 40 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    FLOAT           reduce using rule 40 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    LONG            reduce using rule 40 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    ENTERO          reduce using rule 40 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    FLOTANTE        reduce using rule 40 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    CHARACTER       reduce using rule 40 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    STRING          reduce using rule 40 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    TRUE            reduce using rule 40 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    FALSE           reduce using rule 40 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    IDENTIFICADOR   reduce using rule 40 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    ELSE            reduce using rule 40 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    LLAVER          reduce using rule 40 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    WHILE           reduce using rule 40 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    IF              reduce using rule 40 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    FOR             reduce using rule 40 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    PRINT           reduce using rule 40 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    COUT            reduce using rule 40 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    RETURN          reduce using rule 40 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)


state 64

    (41) variable -> CHAR IDENTIFICADOR IGUAL . CHARACTER PUNTOCOMA

    CHARACTER       shift and go to state 105


state 65

    (54) while -> WHILE LPAR statement . RPAR LLAVEL bodyblock LLAVER

    RPAR            shift and go to state 106


state 66

    (73) statement -> expresion .
    (55) expresion -> expresion . comparador expresion
    (80) comparador -> . IGUAL IGUAL
    (81) comparador -> . MENOR
    (82) comparador -> . MAYOR
    (83) comparador -> . MENOR IGUAL
    (84) comparador -> . MAYOR IGUAL
    (85) comparador -> . EXCLAMACION IGUAL

    RPAR            reduce using rule 73 (statement -> expresion .)
    IGUAL           shift and go to state 69
    MENOR           shift and go to state 70
    MAYOR           shift and go to state 71
    EXCLAMACION     shift and go to state 72

    comparador                     shift and go to state 68

state 67

    (121) asignarvalorobjeto -> LPAR expresion RPAR .

    $end            reduce using rule 121 (asignarvalorobjeto -> LPAR expresion RPAR .)


state 68

    (55) expresion -> expresion comparador . expresion
    (55) expresion -> . expresion comparador expresion
    (79) expresion -> . valor
    (47) valor -> . ENTERO
    (48) valor -> . FLOTANTE
    (49) valor -> . CHARACTER
    (50) valor -> . STRING
    (51) valor -> . TRUE
    (52) valor -> . FALSE
    (53) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 43
    FLOTANTE        shift and go to state 44
    CHARACTER       shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    IDENTIFICADOR   shift and go to state 42

    expresion                      shift and go to state 107
    valor                          shift and go to state 40

state 69

    (80) comparador -> IGUAL . IGUAL

    IGUAL           shift and go to state 108


state 70

    (81) comparador -> MENOR .
    (83) comparador -> MENOR . IGUAL

    ENTERO          reduce using rule 81 (comparador -> MENOR .)
    FLOTANTE        reduce using rule 81 (comparador -> MENOR .)
    CHARACTER       reduce using rule 81 (comparador -> MENOR .)
    STRING          reduce using rule 81 (comparador -> MENOR .)
    TRUE            reduce using rule 81 (comparador -> MENOR .)
    FALSE           reduce using rule 81 (comparador -> MENOR .)
    IDENTIFICADOR   reduce using rule 81 (comparador -> MENOR .)
    IGUAL           shift and go to state 109


state 71

    (82) comparador -> MAYOR .
    (84) comparador -> MAYOR . IGUAL

    ENTERO          reduce using rule 82 (comparador -> MAYOR .)
    FLOTANTE        reduce using rule 82 (comparador -> MAYOR .)
    CHARACTER       reduce using rule 82 (comparador -> MAYOR .)
    STRING          reduce using rule 82 (comparador -> MAYOR .)
    TRUE            reduce using rule 82 (comparador -> MAYOR .)
    FALSE           reduce using rule 82 (comparador -> MAYOR .)
    IDENTIFICADOR   reduce using rule 82 (comparador -> MAYOR .)
    IGUAL           shift and go to state 110


state 72

    (85) comparador -> EXCLAMACION . IGUAL

    IGUAL           shift and go to state 111


state 73

    (122) asignarvalorobjeto -> LPAR statement RPAR .

    $end            reduce using rule 122 (asignarvalorobjeto -> LPAR statement RPAR .)


state 74

    (74) statement -> EXCLAMACION boolean .

    RPAR            reduce using rule 74 (statement -> EXCLAMACION boolean .)


state 75

    (75) statement -> EXCLAMACION LPAR . expresion RPAR
    (55) expresion -> . expresion comparador expresion
    (79) expresion -> . valor
    (47) valor -> . ENTERO
    (48) valor -> . FLOTANTE
    (49) valor -> . CHARACTER
    (50) valor -> . STRING
    (51) valor -> . TRUE
    (52) valor -> . FALSE
    (53) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 43
    FLOTANTE        shift and go to state 44
    CHARACTER       shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    IDENTIFICADOR   shift and go to state 42

    expresion                      shift and go to state 112
    valor                          shift and go to state 40

state 76

    (76) statement -> EXCLAMACION IDENTIFICADOR .

    RPAR            reduce using rule 76 (statement -> EXCLAMACION IDENTIFICADOR .)


state 77

    (77) boolean -> TRUE .

    RPAR            reduce using rule 77 (boolean -> TRUE .)


state 78

    (78) boolean -> FALSE .

    RPAR            reduce using rule 78 (boolean -> FALSE .)


state 79

    (57) expresionif -> IF LPAR condicionif . RPAR conllaves expresionpos
    (58) expresionif -> IF LPAR condicionif . RPAR sinllaves expresionpos

    RPAR            shift and go to state 113


state 80

    (70) condicionif -> initcondicion .

    RPAR            reduce using rule 70 (condicionif -> initcondicion .)


state 81

    (71) condicionif -> statement .

    RPAR            reduce using rule 71 (condicionif -> statement .)


state 82

    (72) initcondicion -> varblock . statement
    (35) varblock -> varblock . variable
    (73) statement -> . expresion
    (74) statement -> . EXCLAMACION boolean
    (75) statement -> . EXCLAMACION LPAR expresion RPAR
    (76) statement -> . EXCLAMACION IDENTIFICADOR
    (37) variable -> . numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA
    (38) variable -> . numerotipo IDENTIFICADOR PUNTOCOMA
    (39) variable -> . AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA
    (40) variable -> . AUTO IDENTIFICADOR PUNTOCOMA
    (41) variable -> . CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA
    (55) expresion -> . expresion comparador expresion
    (79) expresion -> . valor
    (42) numerotipo -> . INT
    (43) numerotipo -> . FLOAT
    (44) numerotipo -> . LONG
    (47) valor -> . ENTERO
    (48) valor -> . FLOTANTE
    (49) valor -> . CHARACTER
    (50) valor -> . STRING
    (51) valor -> . TRUE
    (52) valor -> . FALSE
    (53) valor -> . IDENTIFICADOR

    EXCLAMACION     shift and go to state 41
    AUTO            shift and go to state 116
    CHAR            shift and go to state 117
    INT             shift and go to state 118
    FLOAT           shift and go to state 119
    LONG            shift and go to state 120
    ENTERO          shift and go to state 43
    FLOTANTE        shift and go to state 44
    CHARACTER       shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    IDENTIFICADOR   shift and go to state 42

    statement                      shift and go to state 114
    variable                       shift and go to state 115
    expresion                      shift and go to state 66
    numerotipo                     shift and go to state 14
    valor                          shift and go to state 40

state 83

    (102) claseimplementacion -> CLASS IDENTIFICADOR LLAVEL . bloqueclase LLAVER
    (103) bloqueclase -> . bloqueclase definicion
    (104) bloqueclase -> . bloqueclase funcionclaseimpl
    (105) bloqueclase -> .

    LLAVER          reduce using rule 105 (bloqueclase -> .)
    VOID            reduce using rule 105 (bloqueclase -> .)
    INT             reduce using rule 105 (bloqueclase -> .)
    FLOAT           reduce using rule 105 (bloqueclase -> .)
    LONG            reduce using rule 105 (bloqueclase -> .)
    AUTO            reduce using rule 105 (bloqueclase -> .)
    CHAR            reduce using rule 105 (bloqueclase -> .)

    bloqueclase                    shift and go to state 121

state 84

    (96) for -> FOR LPAR initfor . PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER

    PUNTOCOMA       shift and go to state 122


state 85

    (86) initfor -> tipo . IDENTIFICADOR IGUAL valor

    IDENTIFICADOR   shift and go to state 123


state 86

    (14) tipo -> INT .

    IDENTIFICADOR   reduce using rule 14 (tipo -> INT .)


state 87

    (15) tipo -> FLOAT .

    IDENTIFICADOR   reduce using rule 15 (tipo -> FLOAT .)


state 88

    (16) tipo -> LONG .

    IDENTIFICADOR   reduce using rule 16 (tipo -> LONG .)


state 89

    (17) tipo -> AUTO .

    IDENTIFICADOR   reduce using rule 17 (tipo -> AUTO .)


state 90

    (18) tipo -> CHAR .

    IDENTIFICADOR   reduce using rule 18 (tipo -> CHAR .)


state 91

    (19) tipo -> VOID .

    IDENTIFICADOR   reduce using rule 19 (tipo -> VOID .)


state 92

    (97) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL . ENTERO CORCHETER PUNTOCOMA
    (98) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL . ENTERO CORCHETER IGUAL LLAVEL arraydata LLAVER PUNTOCOMA
    (99) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL . ENTERO CORCHETER IGUAL LLAVEL LLAVER PUNTOCOMA

    ENTERO          shift and go to state 124


state 93

    (108) funcionclaseimpl -> tipo IDENTIFICADOR LPAR . parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER
    (111) parametrosimplementacion -> . tipo IDENTIFICADOR masparametrosimplementacion
    (112) parametrosimplementacion -> .
    (14) tipo -> . INT
    (15) tipo -> . FLOAT
    (16) tipo -> . LONG
    (17) tipo -> . AUTO
    (18) tipo -> . CHAR
    (19) tipo -> . VOID

    RPAR            reduce using rule 112 (parametrosimplementacion -> .)
    INT             shift and go to state 86
    FLOAT           shift and go to state 87
    LONG            shift and go to state 88
    AUTO            shift and go to state 89
    CHAR            shift and go to state 90
    VOID            shift and go to state 91

    tipo                           shift and go to state 125
    parametrosimplementacion       shift and go to state 126

state 94

    (109) funcionclaseimpl -> VOID IDENTIFICADOR LPAR . parametrosimplementacion RPAR LLAVEL bodyblock LLAVER
    (111) parametrosimplementacion -> . tipo IDENTIFICADOR masparametrosimplementacion
    (112) parametrosimplementacion -> .
    (14) tipo -> . INT
    (15) tipo -> . FLOAT
    (16) tipo -> . LONG
    (17) tipo -> . AUTO
    (18) tipo -> . CHAR
    (19) tipo -> . VOID

    RPAR            reduce using rule 112 (parametrosimplementacion -> .)
    INT             shift and go to state 86
    FLOAT           shift and go to state 87
    LONG            shift and go to state 88
    AUTO            shift and go to state 89
    CHAR            shift and go to state 90
    VOID            shift and go to state 91

    parametrosimplementacion       shift and go to state 127
    tipo                           shift and go to state 125

state 95

    (123) asignarvalorobjeto -> EXCLAMACION LPAR statement . RPAR

    RPAR            shift and go to state 128


state 96

    (56) struct -> STRUCT IDENTIFICADOR LLAVEL . varblock LLAVER IDENTIFICADOR PUNTOCOMA
    (35) varblock -> . varblock variable
    (36) varblock -> .

    LLAVER          reduce using rule 36 (varblock -> .)
    AUTO            reduce using rule 36 (varblock -> .)
    CHAR            reduce using rule 36 (varblock -> .)
    INT             reduce using rule 36 (varblock -> .)
    FLOAT           reduce using rule 36 (varblock -> .)
    LONG            reduce using rule 36 (varblock -> .)

    varblock                       shift and go to state 129

state 97

    (20) imprimir -> PRINT LPAR valor . RPAR

    RPAR            shift and go to state 130


state 98

    (21) imprimir -> COUT MENOR MENOR . valor
    (47) valor -> . ENTERO
    (48) valor -> . FLOTANTE
    (49) valor -> . CHARACTER
    (50) valor -> . STRING
    (51) valor -> . TRUE
    (52) valor -> . FALSE
    (53) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 43
    FLOTANTE        shift and go to state 44
    CHARACTER       shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    IDENTIFICADOR   shift and go to state 42

    valor                          shift and go to state 131

state 99

    (37) variable -> numerotipo IDENTIFICADOR IGUAL numero . PUNTOCOMA

    PUNTOCOMA       shift and go to state 132


state 100

    (45) numero -> ENTERO .

    PUNTOCOMA       reduce using rule 45 (numero -> ENTERO .)


state 101

    (46) numero -> FLOTANTE .

    PUNTOCOMA       reduce using rule 46 (numero -> FLOTANTE .)


state 102

    (120) asignarvalorobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR IGUAL . valor
    (47) valor -> . ENTERO
    (48) valor -> . FLOTANTE
    (49) valor -> . CHARACTER
    (50) valor -> . STRING
    (51) valor -> . TRUE
    (52) valor -> . FALSE
    (53) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 43
    FLOTANTE        shift and go to state 44
    CHARACTER       shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    IDENTIFICADOR   shift and go to state 42

    valor                          shift and go to state 133

state 103

    (124) usarfuncionobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR LPAR . parametrosfuncion RPAR PUNTOCOMA
    (113) parametrosfuncion -> . IDENTIFICADOR masparametrosfuncion
    (114) parametrosfuncion -> .

    IDENTIFICADOR   shift and go to state 134
    RPAR            reduce using rule 114 (parametrosfuncion -> .)

    parametrosfuncion              shift and go to state 135

state 104

    (39) variable -> AUTO IDENTIFICADOR IGUAL valor . PUNTOCOMA

    PUNTOCOMA       shift and go to state 136


state 105

    (41) variable -> CHAR IDENTIFICADOR IGUAL CHARACTER . PUNTOCOMA

    PUNTOCOMA       shift and go to state 137


state 106

    (54) while -> WHILE LPAR statement RPAR . LLAVEL bodyblock LLAVER

    LLAVEL          shift and go to state 138


state 107

    (55) expresion -> expresion comparador expresion .
    (55) expresion -> expresion . comparador expresion
    (80) comparador -> . IGUAL IGUAL
    (81) comparador -> . MENOR
    (82) comparador -> . MAYOR
    (83) comparador -> . MENOR IGUAL
    (84) comparador -> . MAYOR IGUAL
    (85) comparador -> . EXCLAMACION IGUAL

  ! shift/reduce conflict for IGUAL resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for EXCLAMACION resolved as shift
    RPAR            reduce using rule 55 (expresion -> expresion comparador expresion .)
    IGUAL           shift and go to state 69
    MENOR           shift and go to state 70
    MAYOR           shift and go to state 71
    EXCLAMACION     shift and go to state 72

  ! IGUAL           [ reduce using rule 55 (expresion -> expresion comparador expresion .) ]
  ! MENOR           [ reduce using rule 55 (expresion -> expresion comparador expresion .) ]
  ! MAYOR           [ reduce using rule 55 (expresion -> expresion comparador expresion .) ]
  ! EXCLAMACION     [ reduce using rule 55 (expresion -> expresion comparador expresion .) ]

    comparador                     shift and go to state 68

state 108

    (80) comparador -> IGUAL IGUAL .

    ENTERO          reduce using rule 80 (comparador -> IGUAL IGUAL .)
    FLOTANTE        reduce using rule 80 (comparador -> IGUAL IGUAL .)
    CHARACTER       reduce using rule 80 (comparador -> IGUAL IGUAL .)
    STRING          reduce using rule 80 (comparador -> IGUAL IGUAL .)
    TRUE            reduce using rule 80 (comparador -> IGUAL IGUAL .)
    FALSE           reduce using rule 80 (comparador -> IGUAL IGUAL .)
    IDENTIFICADOR   reduce using rule 80 (comparador -> IGUAL IGUAL .)


state 109

    (83) comparador -> MENOR IGUAL .

    ENTERO          reduce using rule 83 (comparador -> MENOR IGUAL .)
    FLOTANTE        reduce using rule 83 (comparador -> MENOR IGUAL .)
    CHARACTER       reduce using rule 83 (comparador -> MENOR IGUAL .)
    STRING          reduce using rule 83 (comparador -> MENOR IGUAL .)
    TRUE            reduce using rule 83 (comparador -> MENOR IGUAL .)
    FALSE           reduce using rule 83 (comparador -> MENOR IGUAL .)
    IDENTIFICADOR   reduce using rule 83 (comparador -> MENOR IGUAL .)


state 110

    (84) comparador -> MAYOR IGUAL .

    ENTERO          reduce using rule 84 (comparador -> MAYOR IGUAL .)
    FLOTANTE        reduce using rule 84 (comparador -> MAYOR IGUAL .)
    CHARACTER       reduce using rule 84 (comparador -> MAYOR IGUAL .)
    STRING          reduce using rule 84 (comparador -> MAYOR IGUAL .)
    TRUE            reduce using rule 84 (comparador -> MAYOR IGUAL .)
    FALSE           reduce using rule 84 (comparador -> MAYOR IGUAL .)
    IDENTIFICADOR   reduce using rule 84 (comparador -> MAYOR IGUAL .)


state 111

    (85) comparador -> EXCLAMACION IGUAL .

    ENTERO          reduce using rule 85 (comparador -> EXCLAMACION IGUAL .)
    FLOTANTE        reduce using rule 85 (comparador -> EXCLAMACION IGUAL .)
    CHARACTER       reduce using rule 85 (comparador -> EXCLAMACION IGUAL .)
    STRING          reduce using rule 85 (comparador -> EXCLAMACION IGUAL .)
    TRUE            reduce using rule 85 (comparador -> EXCLAMACION IGUAL .)
    FALSE           reduce using rule 85 (comparador -> EXCLAMACION IGUAL .)
    IDENTIFICADOR   reduce using rule 85 (comparador -> EXCLAMACION IGUAL .)


state 112

    (75) statement -> EXCLAMACION LPAR expresion . RPAR
    (55) expresion -> expresion . comparador expresion
    (80) comparador -> . IGUAL IGUAL
    (81) comparador -> . MENOR
    (82) comparador -> . MAYOR
    (83) comparador -> . MENOR IGUAL
    (84) comparador -> . MAYOR IGUAL
    (85) comparador -> . EXCLAMACION IGUAL

    RPAR            shift and go to state 139
    IGUAL           shift and go to state 69
    MENOR           shift and go to state 70
    MAYOR           shift and go to state 71
    EXCLAMACION     shift and go to state 72

    comparador                     shift and go to state 68

state 113

    (57) expresionif -> IF LPAR condicionif RPAR . conllaves expresionpos
    (58) expresionif -> IF LPAR condicionif RPAR . sinllaves expresionpos
    (69) conllaves -> . LLAVEL bodyblock LLAVER
    (67) sinllaves -> . while
    (68) sinllaves -> . variable
    (54) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (37) variable -> . numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA
    (38) variable -> . numerotipo IDENTIFICADOR PUNTOCOMA
    (39) variable -> . AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA
    (40) variable -> . AUTO IDENTIFICADOR PUNTOCOMA
    (41) variable -> . CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA
    (42) numerotipo -> . INT
    (43) numerotipo -> . FLOAT
    (44) numerotipo -> . LONG

    LLAVEL          shift and go to state 142
    WHILE           shift and go to state 18
    AUTO            shift and go to state 116
    CHAR            shift and go to state 117
    INT             shift and go to state 118
    FLOAT           shift and go to state 119
    LONG            shift and go to state 120

    conllaves                      shift and go to state 140
    sinllaves                      shift and go to state 141
    while                          shift and go to state 143
    variable                       shift and go to state 144
    numerotipo                     shift and go to state 14

state 114

    (72) initcondicion -> varblock statement .

    RPAR            reduce using rule 72 (initcondicion -> varblock statement .)


state 115

    (35) varblock -> varblock variable .

    EXCLAMACION     reduce using rule 35 (varblock -> varblock variable .)
    AUTO            reduce using rule 35 (varblock -> varblock variable .)
    CHAR            reduce using rule 35 (varblock -> varblock variable .)
    INT             reduce using rule 35 (varblock -> varblock variable .)
    FLOAT           reduce using rule 35 (varblock -> varblock variable .)
    LONG            reduce using rule 35 (varblock -> varblock variable .)
    ENTERO          reduce using rule 35 (varblock -> varblock variable .)
    FLOTANTE        reduce using rule 35 (varblock -> varblock variable .)
    CHARACTER       reduce using rule 35 (varblock -> varblock variable .)
    STRING          reduce using rule 35 (varblock -> varblock variable .)
    TRUE            reduce using rule 35 (varblock -> varblock variable .)
    FALSE           reduce using rule 35 (varblock -> varblock variable .)
    IDENTIFICADOR   reduce using rule 35 (varblock -> varblock variable .)
    LLAVER          reduce using rule 35 (varblock -> varblock variable .)


state 116

    (39) variable -> AUTO . IDENTIFICADOR IGUAL valor PUNTOCOMA
    (40) variable -> AUTO . IDENTIFICADOR PUNTOCOMA

    IDENTIFICADOR   shift and go to state 35


state 117

    (41) variable -> CHAR . IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA

    IDENTIFICADOR   shift and go to state 36


state 118

    (42) numerotipo -> INT .

    IDENTIFICADOR   reduce using rule 42 (numerotipo -> INT .)


state 119

    (43) numerotipo -> FLOAT .

    IDENTIFICADOR   reduce using rule 43 (numerotipo -> FLOAT .)


state 120

    (44) numerotipo -> LONG .

    IDENTIFICADOR   reduce using rule 44 (numerotipo -> LONG .)


state 121

    (102) claseimplementacion -> CLASS IDENTIFICADOR LLAVEL bloqueclase . LLAVER
    (103) bloqueclase -> bloqueclase . definicion
    (104) bloqueclase -> bloqueclase . funcionclaseimpl
    (106) definicion -> . tipo IDENTIFICADOR PUNTOCOMA
    (107) definicion -> .
    (108) funcionclaseimpl -> . tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER
    (109) funcionclaseimpl -> . VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER
    (110) funcionclaseimpl -> .
    (14) tipo -> . INT
    (15) tipo -> . FLOAT
    (16) tipo -> . LONG
    (17) tipo -> . AUTO
    (18) tipo -> . CHAR
    (19) tipo -> . VOID

  ! shift/reduce conflict for LLAVER resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LLAVER resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! reduce/reduce conflict for INT resolved using rule 107 (definicion -> .)
  ! reduce/reduce conflict for FLOAT resolved using rule 107 (definicion -> .)
  ! reduce/reduce conflict for LONG resolved using rule 107 (definicion -> .)
  ! reduce/reduce conflict for AUTO resolved using rule 107 (definicion -> .)
  ! reduce/reduce conflict for CHAR resolved using rule 107 (definicion -> .)
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    LLAVER          shift and go to state 145
    VOID            shift and go to state 24
    INT             shift and go to state 86
    FLOAT           shift and go to state 87
    LONG            shift and go to state 88
    AUTO            shift and go to state 89
    CHAR            shift and go to state 90

  ! LLAVER          [ reduce using rule 107 (definicion -> .) ]
  ! VOID            [ reduce using rule 107 (definicion -> .) ]
  ! INT             [ reduce using rule 107 (definicion -> .) ]
  ! FLOAT           [ reduce using rule 107 (definicion -> .) ]
  ! LONG            [ reduce using rule 107 (definicion -> .) ]
  ! AUTO            [ reduce using rule 107 (definicion -> .) ]
  ! CHAR            [ reduce using rule 107 (definicion -> .) ]
  ! LLAVER          [ reduce using rule 110 (funcionclaseimpl -> .) ]
  ! VOID            [ reduce using rule 110 (funcionclaseimpl -> .) ]
  ! INT             [ reduce using rule 110 (funcionclaseimpl -> .) ]
  ! FLOAT           [ reduce using rule 110 (funcionclaseimpl -> .) ]
  ! LONG            [ reduce using rule 110 (funcionclaseimpl -> .) ]
  ! AUTO            [ reduce using rule 110 (funcionclaseimpl -> .) ]
  ! CHAR            [ reduce using rule 110 (funcionclaseimpl -> .) ]

    definicion                     shift and go to state 146
    funcionclaseimpl               shift and go to state 147
    tipo                           shift and go to state 148

state 122

    (96) for -> FOR LPAR initfor PUNTOCOMA . condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER
    (87) condfor -> . IDENTIFICADOR comparador valor

    IDENTIFICADOR   shift and go to state 150

    condfor                        shift and go to state 149

state 123

    (86) initfor -> tipo IDENTIFICADOR . IGUAL valor

    IGUAL           shift and go to state 151


state 124

    (97) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO . CORCHETER PUNTOCOMA
    (98) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO . CORCHETER IGUAL LLAVEL arraydata LLAVER PUNTOCOMA
    (99) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO . CORCHETER IGUAL LLAVEL LLAVER PUNTOCOMA

    CORCHETER       shift and go to state 152


state 125

    (111) parametrosimplementacion -> tipo . IDENTIFICADOR masparametrosimplementacion

    IDENTIFICADOR   shift and go to state 153


state 126

    (108) funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion . RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER

    RPAR            shift and go to state 154


state 127

    (109) funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion . RPAR LLAVEL bodyblock LLAVER

    RPAR            shift and go to state 155


state 128

    (123) asignarvalorobjeto -> EXCLAMACION LPAR statement RPAR .

    $end            reduce using rule 123 (asignarvalorobjeto -> EXCLAMACION LPAR statement RPAR .)


state 129

    (56) struct -> STRUCT IDENTIFICADOR LLAVEL varblock . LLAVER IDENTIFICADOR PUNTOCOMA
    (35) varblock -> varblock . variable
    (37) variable -> . numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA
    (38) variable -> . numerotipo IDENTIFICADOR PUNTOCOMA
    (39) variable -> . AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA
    (40) variable -> . AUTO IDENTIFICADOR PUNTOCOMA
    (41) variable -> . CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA
    (42) numerotipo -> . INT
    (43) numerotipo -> . FLOAT
    (44) numerotipo -> . LONG

    LLAVER          shift and go to state 156
    AUTO            shift and go to state 116
    CHAR            shift and go to state 117
    INT             shift and go to state 118
    FLOAT           shift and go to state 119
    LONG            shift and go to state 120

    variable                       shift and go to state 115
    numerotipo                     shift and go to state 14

state 130

    (20) imprimir -> PRINT LPAR valor RPAR .

    $end            reduce using rule 20 (imprimir -> PRINT LPAR valor RPAR .)
    LLAVER          reduce using rule 20 (imprimir -> PRINT LPAR valor RPAR .)
    AUTO            reduce using rule 20 (imprimir -> PRINT LPAR valor RPAR .)
    CHAR            reduce using rule 20 (imprimir -> PRINT LPAR valor RPAR .)
    WHILE           reduce using rule 20 (imprimir -> PRINT LPAR valor RPAR .)
    IF              reduce using rule 20 (imprimir -> PRINT LPAR valor RPAR .)
    FOR             reduce using rule 20 (imprimir -> PRINT LPAR valor RPAR .)
    PRINT           reduce using rule 20 (imprimir -> PRINT LPAR valor RPAR .)
    COUT            reduce using rule 20 (imprimir -> PRINT LPAR valor RPAR .)
    INT             reduce using rule 20 (imprimir -> PRINT LPAR valor RPAR .)
    FLOAT           reduce using rule 20 (imprimir -> PRINT LPAR valor RPAR .)
    LONG            reduce using rule 20 (imprimir -> PRINT LPAR valor RPAR .)
    RETURN          reduce using rule 20 (imprimir -> PRINT LPAR valor RPAR .)


state 131

    (21) imprimir -> COUT MENOR MENOR valor .

    $end            reduce using rule 21 (imprimir -> COUT MENOR MENOR valor .)
    LLAVER          reduce using rule 21 (imprimir -> COUT MENOR MENOR valor .)
    AUTO            reduce using rule 21 (imprimir -> COUT MENOR MENOR valor .)
    CHAR            reduce using rule 21 (imprimir -> COUT MENOR MENOR valor .)
    WHILE           reduce using rule 21 (imprimir -> COUT MENOR MENOR valor .)
    IF              reduce using rule 21 (imprimir -> COUT MENOR MENOR valor .)
    FOR             reduce using rule 21 (imprimir -> COUT MENOR MENOR valor .)
    PRINT           reduce using rule 21 (imprimir -> COUT MENOR MENOR valor .)
    COUT            reduce using rule 21 (imprimir -> COUT MENOR MENOR valor .)
    INT             reduce using rule 21 (imprimir -> COUT MENOR MENOR valor .)
    FLOAT           reduce using rule 21 (imprimir -> COUT MENOR MENOR valor .)
    LONG            reduce using rule 21 (imprimir -> COUT MENOR MENOR valor .)
    RETURN          reduce using rule 21 (imprimir -> COUT MENOR MENOR valor .)


state 132

    (37) variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .

    $end            reduce using rule 37 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    EXCLAMACION     reduce using rule 37 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    AUTO            reduce using rule 37 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    CHAR            reduce using rule 37 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    INT             reduce using rule 37 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    FLOAT           reduce using rule 37 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    LONG            reduce using rule 37 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    ENTERO          reduce using rule 37 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    FLOTANTE        reduce using rule 37 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    CHARACTER       reduce using rule 37 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    STRING          reduce using rule 37 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    TRUE            reduce using rule 37 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    FALSE           reduce using rule 37 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    IDENTIFICADOR   reduce using rule 37 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    ELSE            reduce using rule 37 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    LLAVER          reduce using rule 37 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    WHILE           reduce using rule 37 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    IF              reduce using rule 37 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    FOR             reduce using rule 37 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    PRINT           reduce using rule 37 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    COUT            reduce using rule 37 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    RETURN          reduce using rule 37 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)


state 133

    (120) asignarvalorobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR IGUAL valor .

    $end            reduce using rule 120 (asignarvalorobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR IGUAL valor .)


state 134

    (113) parametrosfuncion -> IDENTIFICADOR . masparametrosfuncion
    (117) masparametrosfuncion -> . COMMA parametrosfuncion
    (118) masparametrosfuncion -> .

    COMMA           shift and go to state 158
    RPAR            reduce using rule 118 (masparametrosfuncion -> .)

    masparametrosfuncion           shift and go to state 157

state 135

    (124) usarfuncionobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR LPAR parametrosfuncion . RPAR PUNTOCOMA

    RPAR            shift and go to state 159


state 136

    (39) variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .

    $end            reduce using rule 39 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    EXCLAMACION     reduce using rule 39 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    AUTO            reduce using rule 39 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    CHAR            reduce using rule 39 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    INT             reduce using rule 39 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    FLOAT           reduce using rule 39 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    LONG            reduce using rule 39 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    ENTERO          reduce using rule 39 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    FLOTANTE        reduce using rule 39 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    CHARACTER       reduce using rule 39 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    STRING          reduce using rule 39 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    TRUE            reduce using rule 39 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    FALSE           reduce using rule 39 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    IDENTIFICADOR   reduce using rule 39 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    ELSE            reduce using rule 39 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    LLAVER          reduce using rule 39 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    WHILE           reduce using rule 39 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    IF              reduce using rule 39 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    FOR             reduce using rule 39 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    PRINT           reduce using rule 39 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    COUT            reduce using rule 39 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    RETURN          reduce using rule 39 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)


state 137

    (41) variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .

    $end            reduce using rule 41 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    EXCLAMACION     reduce using rule 41 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    AUTO            reduce using rule 41 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    CHAR            reduce using rule 41 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    INT             reduce using rule 41 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    FLOAT           reduce using rule 41 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    LONG            reduce using rule 41 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    ENTERO          reduce using rule 41 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    FLOTANTE        reduce using rule 41 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    CHARACTER       reduce using rule 41 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    STRING          reduce using rule 41 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    TRUE            reduce using rule 41 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    FALSE           reduce using rule 41 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    IDENTIFICADOR   reduce using rule 41 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    ELSE            reduce using rule 41 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    LLAVER          reduce using rule 41 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    WHILE           reduce using rule 41 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    IF              reduce using rule 41 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    FOR             reduce using rule 41 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    PRINT           reduce using rule 41 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    COUT            reduce using rule 41 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    RETURN          reduce using rule 41 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)


state 138

    (54) while -> WHILE LPAR statement RPAR LLAVEL . bodyblock LLAVER
    (22) bodyblock -> . bodyblock variable
    (23) bodyblock -> . bodyblock while
    (24) bodyblock -> . bodyblock expresionif
    (25) bodyblock -> . bodyblock for
    (26) bodyblock -> . bodyblock imprimir
    (27) bodyblock -> .

    LLAVER          reduce using rule 27 (bodyblock -> .)
    AUTO            reduce using rule 27 (bodyblock -> .)
    CHAR            reduce using rule 27 (bodyblock -> .)
    WHILE           reduce using rule 27 (bodyblock -> .)
    IF              reduce using rule 27 (bodyblock -> .)
    FOR             reduce using rule 27 (bodyblock -> .)
    PRINT           reduce using rule 27 (bodyblock -> .)
    COUT            reduce using rule 27 (bodyblock -> .)
    INT             reduce using rule 27 (bodyblock -> .)
    FLOAT           reduce using rule 27 (bodyblock -> .)
    LONG            reduce using rule 27 (bodyblock -> .)

    bodyblock                      shift and go to state 160

state 139

    (75) statement -> EXCLAMACION LPAR expresion RPAR .

    RPAR            reduce using rule 75 (statement -> EXCLAMACION LPAR expresion RPAR .)


state 140

    (57) expresionif -> IF LPAR condicionif RPAR conllaves . expresionpos
    (59) expresionpos -> . else
    (60) expresionpos -> . elseif
    (61) expresionpos -> .
    (65) else -> . ELSE conllaves
    (66) else -> . ELSE sinllaves
    (62) elseif -> . ELSE IF LPAR condicionif RPAR conllaves else
    (63) elseif -> . ELSE IF LPAR condicionif RPAR sinllaves else
    (64) elseif -> .

  ! reduce/reduce conflict for $end resolved using rule 61 (expresionpos -> .)
  ! reduce/reduce conflict for LLAVER resolved using rule 61 (expresionpos -> .)
  ! reduce/reduce conflict for AUTO resolved using rule 61 (expresionpos -> .)
  ! reduce/reduce conflict for CHAR resolved using rule 61 (expresionpos -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 61 (expresionpos -> .)
  ! reduce/reduce conflict for IF resolved using rule 61 (expresionpos -> .)
  ! reduce/reduce conflict for FOR resolved using rule 61 (expresionpos -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 61 (expresionpos -> .)
  ! reduce/reduce conflict for COUT resolved using rule 61 (expresionpos -> .)
  ! reduce/reduce conflict for INT resolved using rule 61 (expresionpos -> .)
  ! reduce/reduce conflict for FLOAT resolved using rule 61 (expresionpos -> .)
  ! reduce/reduce conflict for LONG resolved using rule 61 (expresionpos -> .)
  ! reduce/reduce conflict for RETURN resolved using rule 61 (expresionpos -> .)
    $end            reduce using rule 61 (expresionpos -> .)
    LLAVER          reduce using rule 61 (expresionpos -> .)
    AUTO            reduce using rule 61 (expresionpos -> .)
    CHAR            reduce using rule 61 (expresionpos -> .)
    WHILE           reduce using rule 61 (expresionpos -> .)
    IF              reduce using rule 61 (expresionpos -> .)
    FOR             reduce using rule 61 (expresionpos -> .)
    PRINT           reduce using rule 61 (expresionpos -> .)
    COUT            reduce using rule 61 (expresionpos -> .)
    INT             reduce using rule 61 (expresionpos -> .)
    FLOAT           reduce using rule 61 (expresionpos -> .)
    LONG            reduce using rule 61 (expresionpos -> .)
    RETURN          reduce using rule 61 (expresionpos -> .)
    ELSE            shift and go to state 164

  ! $end            [ reduce using rule 64 (elseif -> .) ]
  ! LLAVER          [ reduce using rule 64 (elseif -> .) ]
  ! AUTO            [ reduce using rule 64 (elseif -> .) ]
  ! CHAR            [ reduce using rule 64 (elseif -> .) ]
  ! WHILE           [ reduce using rule 64 (elseif -> .) ]
  ! IF              [ reduce using rule 64 (elseif -> .) ]
  ! FOR             [ reduce using rule 64 (elseif -> .) ]
  ! PRINT           [ reduce using rule 64 (elseif -> .) ]
  ! COUT            [ reduce using rule 64 (elseif -> .) ]
  ! INT             [ reduce using rule 64 (elseif -> .) ]
  ! FLOAT           [ reduce using rule 64 (elseif -> .) ]
  ! LONG            [ reduce using rule 64 (elseif -> .) ]
  ! RETURN          [ reduce using rule 64 (elseif -> .) ]

    expresionpos                   shift and go to state 161
    else                           shift and go to state 162
    elseif                         shift and go to state 163

state 141

    (58) expresionif -> IF LPAR condicionif RPAR sinllaves . expresionpos
    (59) expresionpos -> . else
    (60) expresionpos -> . elseif
    (61) expresionpos -> .
    (65) else -> . ELSE conllaves
    (66) else -> . ELSE sinllaves
    (62) elseif -> . ELSE IF LPAR condicionif RPAR conllaves else
    (63) elseif -> . ELSE IF LPAR condicionif RPAR sinllaves else
    (64) elseif -> .

  ! reduce/reduce conflict for $end resolved using rule 61 (expresionpos -> .)
  ! reduce/reduce conflict for LLAVER resolved using rule 61 (expresionpos -> .)
  ! reduce/reduce conflict for AUTO resolved using rule 61 (expresionpos -> .)
  ! reduce/reduce conflict for CHAR resolved using rule 61 (expresionpos -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 61 (expresionpos -> .)
  ! reduce/reduce conflict for IF resolved using rule 61 (expresionpos -> .)
  ! reduce/reduce conflict for FOR resolved using rule 61 (expresionpos -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 61 (expresionpos -> .)
  ! reduce/reduce conflict for COUT resolved using rule 61 (expresionpos -> .)
  ! reduce/reduce conflict for INT resolved using rule 61 (expresionpos -> .)
  ! reduce/reduce conflict for FLOAT resolved using rule 61 (expresionpos -> .)
  ! reduce/reduce conflict for LONG resolved using rule 61 (expresionpos -> .)
  ! reduce/reduce conflict for RETURN resolved using rule 61 (expresionpos -> .)
    $end            reduce using rule 61 (expresionpos -> .)
    LLAVER          reduce using rule 61 (expresionpos -> .)
    AUTO            reduce using rule 61 (expresionpos -> .)
    CHAR            reduce using rule 61 (expresionpos -> .)
    WHILE           reduce using rule 61 (expresionpos -> .)
    IF              reduce using rule 61 (expresionpos -> .)
    FOR             reduce using rule 61 (expresionpos -> .)
    PRINT           reduce using rule 61 (expresionpos -> .)
    COUT            reduce using rule 61 (expresionpos -> .)
    INT             reduce using rule 61 (expresionpos -> .)
    FLOAT           reduce using rule 61 (expresionpos -> .)
    LONG            reduce using rule 61 (expresionpos -> .)
    RETURN          reduce using rule 61 (expresionpos -> .)
    ELSE            shift and go to state 164

  ! $end            [ reduce using rule 64 (elseif -> .) ]
  ! LLAVER          [ reduce using rule 64 (elseif -> .) ]
  ! AUTO            [ reduce using rule 64 (elseif -> .) ]
  ! CHAR            [ reduce using rule 64 (elseif -> .) ]
  ! WHILE           [ reduce using rule 64 (elseif -> .) ]
  ! IF              [ reduce using rule 64 (elseif -> .) ]
  ! FOR             [ reduce using rule 64 (elseif -> .) ]
  ! PRINT           [ reduce using rule 64 (elseif -> .) ]
  ! COUT            [ reduce using rule 64 (elseif -> .) ]
  ! INT             [ reduce using rule 64 (elseif -> .) ]
  ! FLOAT           [ reduce using rule 64 (elseif -> .) ]
  ! LONG            [ reduce using rule 64 (elseif -> .) ]
  ! RETURN          [ reduce using rule 64 (elseif -> .) ]

    expresionpos                   shift and go to state 165
    else                           shift and go to state 162
    elseif                         shift and go to state 163

state 142

    (69) conllaves -> LLAVEL . bodyblock LLAVER
    (22) bodyblock -> . bodyblock variable
    (23) bodyblock -> . bodyblock while
    (24) bodyblock -> . bodyblock expresionif
    (25) bodyblock -> . bodyblock for
    (26) bodyblock -> . bodyblock imprimir
    (27) bodyblock -> .

    LLAVER          reduce using rule 27 (bodyblock -> .)
    AUTO            reduce using rule 27 (bodyblock -> .)
    CHAR            reduce using rule 27 (bodyblock -> .)
    WHILE           reduce using rule 27 (bodyblock -> .)
    IF              reduce using rule 27 (bodyblock -> .)
    FOR             reduce using rule 27 (bodyblock -> .)
    PRINT           reduce using rule 27 (bodyblock -> .)
    COUT            reduce using rule 27 (bodyblock -> .)
    INT             reduce using rule 27 (bodyblock -> .)
    FLOAT           reduce using rule 27 (bodyblock -> .)
    LONG            reduce using rule 27 (bodyblock -> .)

    bodyblock                      shift and go to state 166

state 143

    (67) sinllaves -> while .

    ELSE            reduce using rule 67 (sinllaves -> while .)
    $end            reduce using rule 67 (sinllaves -> while .)
    LLAVER          reduce using rule 67 (sinllaves -> while .)
    AUTO            reduce using rule 67 (sinllaves -> while .)
    CHAR            reduce using rule 67 (sinllaves -> while .)
    WHILE           reduce using rule 67 (sinllaves -> while .)
    IF              reduce using rule 67 (sinllaves -> while .)
    FOR             reduce using rule 67 (sinllaves -> while .)
    PRINT           reduce using rule 67 (sinllaves -> while .)
    COUT            reduce using rule 67 (sinllaves -> while .)
    INT             reduce using rule 67 (sinllaves -> while .)
    FLOAT           reduce using rule 67 (sinllaves -> while .)
    LONG            reduce using rule 67 (sinllaves -> while .)
    RETURN          reduce using rule 67 (sinllaves -> while .)


state 144

    (68) sinllaves -> variable .

    ELSE            reduce using rule 68 (sinllaves -> variable .)
    $end            reduce using rule 68 (sinllaves -> variable .)
    LLAVER          reduce using rule 68 (sinllaves -> variable .)
    AUTO            reduce using rule 68 (sinllaves -> variable .)
    CHAR            reduce using rule 68 (sinllaves -> variable .)
    WHILE           reduce using rule 68 (sinllaves -> variable .)
    IF              reduce using rule 68 (sinllaves -> variable .)
    FOR             reduce using rule 68 (sinllaves -> variable .)
    PRINT           reduce using rule 68 (sinllaves -> variable .)
    COUT            reduce using rule 68 (sinllaves -> variable .)
    INT             reduce using rule 68 (sinllaves -> variable .)
    FLOAT           reduce using rule 68 (sinllaves -> variable .)
    LONG            reduce using rule 68 (sinllaves -> variable .)
    RETURN          reduce using rule 68 (sinllaves -> variable .)


state 145

    (102) claseimplementacion -> CLASS IDENTIFICADOR LLAVEL bloqueclase LLAVER .

    $end            reduce using rule 102 (claseimplementacion -> CLASS IDENTIFICADOR LLAVEL bloqueclase LLAVER .)


state 146

    (103) bloqueclase -> bloqueclase definicion .

    LLAVER          reduce using rule 103 (bloqueclase -> bloqueclase definicion .)
    VOID            reduce using rule 103 (bloqueclase -> bloqueclase definicion .)
    INT             reduce using rule 103 (bloqueclase -> bloqueclase definicion .)
    FLOAT           reduce using rule 103 (bloqueclase -> bloqueclase definicion .)
    LONG            reduce using rule 103 (bloqueclase -> bloqueclase definicion .)
    AUTO            reduce using rule 103 (bloqueclase -> bloqueclase definicion .)
    CHAR            reduce using rule 103 (bloqueclase -> bloqueclase definicion .)


state 147

    (104) bloqueclase -> bloqueclase funcionclaseimpl .

    LLAVER          reduce using rule 104 (bloqueclase -> bloqueclase funcionclaseimpl .)
    VOID            reduce using rule 104 (bloqueclase -> bloqueclase funcionclaseimpl .)
    INT             reduce using rule 104 (bloqueclase -> bloqueclase funcionclaseimpl .)
    FLOAT           reduce using rule 104 (bloqueclase -> bloqueclase funcionclaseimpl .)
    LONG            reduce using rule 104 (bloqueclase -> bloqueclase funcionclaseimpl .)
    AUTO            reduce using rule 104 (bloqueclase -> bloqueclase funcionclaseimpl .)
    CHAR            reduce using rule 104 (bloqueclase -> bloqueclase funcionclaseimpl .)


state 148

    (106) definicion -> tipo . IDENTIFICADOR PUNTOCOMA
    (108) funcionclaseimpl -> tipo . IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER

    IDENTIFICADOR   shift and go to state 167


state 149

    (96) for -> FOR LPAR initfor PUNTOCOMA condfor . PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER

    PUNTOCOMA       shift and go to state 168


state 150

    (87) condfor -> IDENTIFICADOR . comparador valor
    (80) comparador -> . IGUAL IGUAL
    (81) comparador -> . MENOR
    (82) comparador -> . MAYOR
    (83) comparador -> . MENOR IGUAL
    (84) comparador -> . MAYOR IGUAL
    (85) comparador -> . EXCLAMACION IGUAL

    IGUAL           shift and go to state 69
    MENOR           shift and go to state 70
    MAYOR           shift and go to state 71
    EXCLAMACION     shift and go to state 72

    comparador                     shift and go to state 169

state 151

    (86) initfor -> tipo IDENTIFICADOR IGUAL . valor
    (47) valor -> . ENTERO
    (48) valor -> . FLOTANTE
    (49) valor -> . CHARACTER
    (50) valor -> . STRING
    (51) valor -> . TRUE
    (52) valor -> . FALSE
    (53) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 43
    FLOTANTE        shift and go to state 44
    CHARACTER       shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    IDENTIFICADOR   shift and go to state 42

    valor                          shift and go to state 170

state 152

    (97) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER . PUNTOCOMA
    (98) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER . IGUAL LLAVEL arraydata LLAVER PUNTOCOMA
    (99) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER . IGUAL LLAVEL LLAVER PUNTOCOMA

    PUNTOCOMA       shift and go to state 171
    IGUAL           shift and go to state 172


state 153

    (111) parametrosimplementacion -> tipo IDENTIFICADOR . masparametrosimplementacion
    (115) masparametrosimplementacion -> . COMMA parametrosimplementacion
    (116) masparametrosimplementacion -> .

    COMMA           shift and go to state 174
    RPAR            reduce using rule 116 (masparametrosimplementacion -> .)

    masparametrosimplementacion    shift and go to state 173

state 154

    (108) funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR . LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER

    LLAVEL          shift and go to state 175


state 155

    (109) funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR . LLAVEL bodyblock LLAVER

    LLAVEL          shift and go to state 176


state 156

    (56) struct -> STRUCT IDENTIFICADOR LLAVEL varblock LLAVER . IDENTIFICADOR PUNTOCOMA

    IDENTIFICADOR   shift and go to state 177


state 157

    (113) parametrosfuncion -> IDENTIFICADOR masparametrosfuncion .

    RPAR            reduce using rule 113 (parametrosfuncion -> IDENTIFICADOR masparametrosfuncion .)


state 158

    (117) masparametrosfuncion -> COMMA . parametrosfuncion
    (113) parametrosfuncion -> . IDENTIFICADOR masparametrosfuncion
    (114) parametrosfuncion -> .

    IDENTIFICADOR   shift and go to state 134
    RPAR            reduce using rule 114 (parametrosfuncion -> .)

    parametrosfuncion              shift and go to state 178

state 159

    (124) usarfuncionobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR LPAR parametrosfuncion RPAR . PUNTOCOMA

    PUNTOCOMA       shift and go to state 179


state 160

    (54) while -> WHILE LPAR statement RPAR LLAVEL bodyblock . LLAVER
    (22) bodyblock -> bodyblock . variable
    (23) bodyblock -> bodyblock . while
    (24) bodyblock -> bodyblock . expresionif
    (25) bodyblock -> bodyblock . for
    (26) bodyblock -> bodyblock . imprimir
    (37) variable -> . numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA
    (38) variable -> . numerotipo IDENTIFICADOR PUNTOCOMA
    (39) variable -> . AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA
    (40) variable -> . AUTO IDENTIFICADOR PUNTOCOMA
    (41) variable -> . CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA
    (54) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (57) expresionif -> . IF LPAR condicionif RPAR conllaves expresionpos
    (58) expresionif -> . IF LPAR condicionif RPAR sinllaves expresionpos
    (96) for -> . FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER
    (20) imprimir -> . PRINT LPAR valor RPAR
    (21) imprimir -> . COUT MENOR MENOR valor
    (42) numerotipo -> . INT
    (43) numerotipo -> . FLOAT
    (44) numerotipo -> . LONG

    LLAVER          shift and go to state 180
    AUTO            shift and go to state 116
    CHAR            shift and go to state 117
    WHILE           shift and go to state 18
    IF              shift and go to state 20
    FOR             shift and go to state 22
    PRINT           shift and go to state 27
    COUT            shift and go to state 28
    INT             shift and go to state 118
    FLOAT           shift and go to state 119
    LONG            shift and go to state 120

    variable                       shift and go to state 181
    while                          shift and go to state 182
    expresionif                    shift and go to state 183
    for                            shift and go to state 184
    imprimir                       shift and go to state 185
    numerotipo                     shift and go to state 14

state 161

    (57) expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .

    $end            reduce using rule 57 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    LLAVER          reduce using rule 57 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    AUTO            reduce using rule 57 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    CHAR            reduce using rule 57 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    WHILE           reduce using rule 57 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    IF              reduce using rule 57 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    FOR             reduce using rule 57 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    PRINT           reduce using rule 57 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    COUT            reduce using rule 57 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    INT             reduce using rule 57 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    FLOAT           reduce using rule 57 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    LONG            reduce using rule 57 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    RETURN          reduce using rule 57 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)


state 162

    (59) expresionpos -> else .

    $end            reduce using rule 59 (expresionpos -> else .)
    LLAVER          reduce using rule 59 (expresionpos -> else .)
    AUTO            reduce using rule 59 (expresionpos -> else .)
    CHAR            reduce using rule 59 (expresionpos -> else .)
    WHILE           reduce using rule 59 (expresionpos -> else .)
    IF              reduce using rule 59 (expresionpos -> else .)
    FOR             reduce using rule 59 (expresionpos -> else .)
    PRINT           reduce using rule 59 (expresionpos -> else .)
    COUT            reduce using rule 59 (expresionpos -> else .)
    INT             reduce using rule 59 (expresionpos -> else .)
    FLOAT           reduce using rule 59 (expresionpos -> else .)
    LONG            reduce using rule 59 (expresionpos -> else .)
    RETURN          reduce using rule 59 (expresionpos -> else .)


state 163

    (60) expresionpos -> elseif .

    $end            reduce using rule 60 (expresionpos -> elseif .)
    LLAVER          reduce using rule 60 (expresionpos -> elseif .)
    AUTO            reduce using rule 60 (expresionpos -> elseif .)
    CHAR            reduce using rule 60 (expresionpos -> elseif .)
    WHILE           reduce using rule 60 (expresionpos -> elseif .)
    IF              reduce using rule 60 (expresionpos -> elseif .)
    FOR             reduce using rule 60 (expresionpos -> elseif .)
    PRINT           reduce using rule 60 (expresionpos -> elseif .)
    COUT            reduce using rule 60 (expresionpos -> elseif .)
    INT             reduce using rule 60 (expresionpos -> elseif .)
    FLOAT           reduce using rule 60 (expresionpos -> elseif .)
    LONG            reduce using rule 60 (expresionpos -> elseif .)
    RETURN          reduce using rule 60 (expresionpos -> elseif .)


state 164

    (65) else -> ELSE . conllaves
    (66) else -> ELSE . sinllaves
    (62) elseif -> ELSE . IF LPAR condicionif RPAR conllaves else
    (63) elseif -> ELSE . IF LPAR condicionif RPAR sinllaves else
    (69) conllaves -> . LLAVEL bodyblock LLAVER
    (67) sinllaves -> . while
    (68) sinllaves -> . variable
    (54) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (37) variable -> . numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA
    (38) variable -> . numerotipo IDENTIFICADOR PUNTOCOMA
    (39) variable -> . AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA
    (40) variable -> . AUTO IDENTIFICADOR PUNTOCOMA
    (41) variable -> . CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA
    (42) numerotipo -> . INT
    (43) numerotipo -> . FLOAT
    (44) numerotipo -> . LONG

    IF              shift and go to state 188
    LLAVEL          shift and go to state 142
    WHILE           shift and go to state 18
    AUTO            shift and go to state 116
    CHAR            shift and go to state 117
    INT             shift and go to state 118
    FLOAT           shift and go to state 119
    LONG            shift and go to state 120

    conllaves                      shift and go to state 186
    sinllaves                      shift and go to state 187
    while                          shift and go to state 143
    variable                       shift and go to state 144
    numerotipo                     shift and go to state 14

state 165

    (58) expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .

    $end            reduce using rule 58 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    LLAVER          reduce using rule 58 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    AUTO            reduce using rule 58 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    CHAR            reduce using rule 58 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    WHILE           reduce using rule 58 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    IF              reduce using rule 58 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    FOR             reduce using rule 58 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    PRINT           reduce using rule 58 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    COUT            reduce using rule 58 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    INT             reduce using rule 58 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    FLOAT           reduce using rule 58 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    LONG            reduce using rule 58 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    RETURN          reduce using rule 58 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)


state 166

    (69) conllaves -> LLAVEL bodyblock . LLAVER
    (22) bodyblock -> bodyblock . variable
    (23) bodyblock -> bodyblock . while
    (24) bodyblock -> bodyblock . expresionif
    (25) bodyblock -> bodyblock . for
    (26) bodyblock -> bodyblock . imprimir
    (37) variable -> . numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA
    (38) variable -> . numerotipo IDENTIFICADOR PUNTOCOMA
    (39) variable -> . AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA
    (40) variable -> . AUTO IDENTIFICADOR PUNTOCOMA
    (41) variable -> . CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA
    (54) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (57) expresionif -> . IF LPAR condicionif RPAR conllaves expresionpos
    (58) expresionif -> . IF LPAR condicionif RPAR sinllaves expresionpos
    (96) for -> . FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER
    (20) imprimir -> . PRINT LPAR valor RPAR
    (21) imprimir -> . COUT MENOR MENOR valor
    (42) numerotipo -> . INT
    (43) numerotipo -> . FLOAT
    (44) numerotipo -> . LONG

    LLAVER          shift and go to state 189
    AUTO            shift and go to state 116
    CHAR            shift and go to state 117
    WHILE           shift and go to state 18
    IF              shift and go to state 20
    FOR             shift and go to state 22
    PRINT           shift and go to state 27
    COUT            shift and go to state 28
    INT             shift and go to state 118
    FLOAT           shift and go to state 119
    LONG            shift and go to state 120

    variable                       shift and go to state 181
    while                          shift and go to state 182
    expresionif                    shift and go to state 183
    for                            shift and go to state 184
    imprimir                       shift and go to state 185
    numerotipo                     shift and go to state 14

state 167

    (106) definicion -> tipo IDENTIFICADOR . PUNTOCOMA
    (108) funcionclaseimpl -> tipo IDENTIFICADOR . LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER

    PUNTOCOMA       shift and go to state 190
    LPAR            shift and go to state 93


state 168

    (96) for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA . loopfor RPAR LLAVEL bodyblock LLAVER
    (88) loopfor -> . asign
    (89) loopfor -> . unaryexp
    (90) asign -> . IDENTIFICADOR MAS valor
    (91) asign -> . IDENTIFICADOR MENOS valor
    (92) asign -> . IDENTIFICADOR ASTERISCO valor
    (93) asign -> . IDENTIFICADOR SLASH valor
    (94) unaryexp -> . IDENTIFICADOR MAS MAS
    (95) unaryexp -> . IDENTIFICADOR MENOS MENOS

    IDENTIFICADOR   shift and go to state 194

    loopfor                        shift and go to state 191
    asign                          shift and go to state 192
    unaryexp                       shift and go to state 193

state 169

    (87) condfor -> IDENTIFICADOR comparador . valor
    (47) valor -> . ENTERO
    (48) valor -> . FLOTANTE
    (49) valor -> . CHARACTER
    (50) valor -> . STRING
    (51) valor -> . TRUE
    (52) valor -> . FALSE
    (53) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 43
    FLOTANTE        shift and go to state 44
    CHARACTER       shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    IDENTIFICADOR   shift and go to state 42

    valor                          shift and go to state 195

state 170

    (86) initfor -> tipo IDENTIFICADOR IGUAL valor .

    PUNTOCOMA       reduce using rule 86 (initfor -> tipo IDENTIFICADOR IGUAL valor .)


state 171

    (97) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER PUNTOCOMA .

    $end            reduce using rule 97 (arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER PUNTOCOMA .)


state 172

    (98) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL . LLAVEL arraydata LLAVER PUNTOCOMA
    (99) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL . LLAVEL LLAVER PUNTOCOMA

    LLAVEL          shift and go to state 196


state 173

    (111) parametrosimplementacion -> tipo IDENTIFICADOR masparametrosimplementacion .

    RPAR            reduce using rule 111 (parametrosimplementacion -> tipo IDENTIFICADOR masparametrosimplementacion .)


state 174

    (115) masparametrosimplementacion -> COMMA . parametrosimplementacion
    (111) parametrosimplementacion -> . tipo IDENTIFICADOR masparametrosimplementacion
    (112) parametrosimplementacion -> .
    (14) tipo -> . INT
    (15) tipo -> . FLOAT
    (16) tipo -> . LONG
    (17) tipo -> . AUTO
    (18) tipo -> . CHAR
    (19) tipo -> . VOID

    RPAR            reduce using rule 112 (parametrosimplementacion -> .)
    INT             shift and go to state 86
    FLOAT           shift and go to state 87
    LONG            shift and go to state 88
    AUTO            shift and go to state 89
    CHAR            shift and go to state 90
    VOID            shift and go to state 91

    parametrosimplementacion       shift and go to state 197
    tipo                           shift and go to state 125

state 175

    (108) funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL . bodyblock RETURN valor PUNTOCOMA LLAVER
    (22) bodyblock -> . bodyblock variable
    (23) bodyblock -> . bodyblock while
    (24) bodyblock -> . bodyblock expresionif
    (25) bodyblock -> . bodyblock for
    (26) bodyblock -> . bodyblock imprimir
    (27) bodyblock -> .

    RETURN          reduce using rule 27 (bodyblock -> .)
    AUTO            reduce using rule 27 (bodyblock -> .)
    CHAR            reduce using rule 27 (bodyblock -> .)
    WHILE           reduce using rule 27 (bodyblock -> .)
    IF              reduce using rule 27 (bodyblock -> .)
    FOR             reduce using rule 27 (bodyblock -> .)
    PRINT           reduce using rule 27 (bodyblock -> .)
    COUT            reduce using rule 27 (bodyblock -> .)
    INT             reduce using rule 27 (bodyblock -> .)
    FLOAT           reduce using rule 27 (bodyblock -> .)
    LONG            reduce using rule 27 (bodyblock -> .)

    bodyblock                      shift and go to state 198

state 176

    (109) funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL . bodyblock LLAVER
    (22) bodyblock -> . bodyblock variable
    (23) bodyblock -> . bodyblock while
    (24) bodyblock -> . bodyblock expresionif
    (25) bodyblock -> . bodyblock for
    (26) bodyblock -> . bodyblock imprimir
    (27) bodyblock -> .

    LLAVER          reduce using rule 27 (bodyblock -> .)
    AUTO            reduce using rule 27 (bodyblock -> .)
    CHAR            reduce using rule 27 (bodyblock -> .)
    WHILE           reduce using rule 27 (bodyblock -> .)
    IF              reduce using rule 27 (bodyblock -> .)
    FOR             reduce using rule 27 (bodyblock -> .)
    PRINT           reduce using rule 27 (bodyblock -> .)
    COUT            reduce using rule 27 (bodyblock -> .)
    INT             reduce using rule 27 (bodyblock -> .)
    FLOAT           reduce using rule 27 (bodyblock -> .)
    LONG            reduce using rule 27 (bodyblock -> .)

    bodyblock                      shift and go to state 199

state 177

    (56) struct -> STRUCT IDENTIFICADOR LLAVEL varblock LLAVER IDENTIFICADOR . PUNTOCOMA

    PUNTOCOMA       shift and go to state 200


state 178

    (117) masparametrosfuncion -> COMMA parametrosfuncion .

    RPAR            reduce using rule 117 (masparametrosfuncion -> COMMA parametrosfuncion .)


state 179

    (124) usarfuncionobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR LPAR parametrosfuncion RPAR PUNTOCOMA .

    $end            reduce using rule 124 (usarfuncionobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR LPAR parametrosfuncion RPAR PUNTOCOMA .)


state 180

    (54) while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .

    $end            reduce using rule 54 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    ELSE            reduce using rule 54 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    LLAVER          reduce using rule 54 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    AUTO            reduce using rule 54 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    CHAR            reduce using rule 54 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    WHILE           reduce using rule 54 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    IF              reduce using rule 54 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    FOR             reduce using rule 54 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    PRINT           reduce using rule 54 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    COUT            reduce using rule 54 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    INT             reduce using rule 54 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    FLOAT           reduce using rule 54 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    LONG            reduce using rule 54 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    RETURN          reduce using rule 54 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)


state 181

    (22) bodyblock -> bodyblock variable .

    LLAVER          reduce using rule 22 (bodyblock -> bodyblock variable .)
    AUTO            reduce using rule 22 (bodyblock -> bodyblock variable .)
    CHAR            reduce using rule 22 (bodyblock -> bodyblock variable .)
    WHILE           reduce using rule 22 (bodyblock -> bodyblock variable .)
    IF              reduce using rule 22 (bodyblock -> bodyblock variable .)
    FOR             reduce using rule 22 (bodyblock -> bodyblock variable .)
    PRINT           reduce using rule 22 (bodyblock -> bodyblock variable .)
    COUT            reduce using rule 22 (bodyblock -> bodyblock variable .)
    INT             reduce using rule 22 (bodyblock -> bodyblock variable .)
    FLOAT           reduce using rule 22 (bodyblock -> bodyblock variable .)
    LONG            reduce using rule 22 (bodyblock -> bodyblock variable .)
    RETURN          reduce using rule 22 (bodyblock -> bodyblock variable .)


state 182

    (23) bodyblock -> bodyblock while .

    LLAVER          reduce using rule 23 (bodyblock -> bodyblock while .)
    AUTO            reduce using rule 23 (bodyblock -> bodyblock while .)
    CHAR            reduce using rule 23 (bodyblock -> bodyblock while .)
    WHILE           reduce using rule 23 (bodyblock -> bodyblock while .)
    IF              reduce using rule 23 (bodyblock -> bodyblock while .)
    FOR             reduce using rule 23 (bodyblock -> bodyblock while .)
    PRINT           reduce using rule 23 (bodyblock -> bodyblock while .)
    COUT            reduce using rule 23 (bodyblock -> bodyblock while .)
    INT             reduce using rule 23 (bodyblock -> bodyblock while .)
    FLOAT           reduce using rule 23 (bodyblock -> bodyblock while .)
    LONG            reduce using rule 23 (bodyblock -> bodyblock while .)
    RETURN          reduce using rule 23 (bodyblock -> bodyblock while .)


state 183

    (24) bodyblock -> bodyblock expresionif .

    LLAVER          reduce using rule 24 (bodyblock -> bodyblock expresionif .)
    AUTO            reduce using rule 24 (bodyblock -> bodyblock expresionif .)
    CHAR            reduce using rule 24 (bodyblock -> bodyblock expresionif .)
    WHILE           reduce using rule 24 (bodyblock -> bodyblock expresionif .)
    IF              reduce using rule 24 (bodyblock -> bodyblock expresionif .)
    FOR             reduce using rule 24 (bodyblock -> bodyblock expresionif .)
    PRINT           reduce using rule 24 (bodyblock -> bodyblock expresionif .)
    COUT            reduce using rule 24 (bodyblock -> bodyblock expresionif .)
    INT             reduce using rule 24 (bodyblock -> bodyblock expresionif .)
    FLOAT           reduce using rule 24 (bodyblock -> bodyblock expresionif .)
    LONG            reduce using rule 24 (bodyblock -> bodyblock expresionif .)
    RETURN          reduce using rule 24 (bodyblock -> bodyblock expresionif .)


state 184

    (25) bodyblock -> bodyblock for .

    LLAVER          reduce using rule 25 (bodyblock -> bodyblock for .)
    AUTO            reduce using rule 25 (bodyblock -> bodyblock for .)
    CHAR            reduce using rule 25 (bodyblock -> bodyblock for .)
    WHILE           reduce using rule 25 (bodyblock -> bodyblock for .)
    IF              reduce using rule 25 (bodyblock -> bodyblock for .)
    FOR             reduce using rule 25 (bodyblock -> bodyblock for .)
    PRINT           reduce using rule 25 (bodyblock -> bodyblock for .)
    COUT            reduce using rule 25 (bodyblock -> bodyblock for .)
    INT             reduce using rule 25 (bodyblock -> bodyblock for .)
    FLOAT           reduce using rule 25 (bodyblock -> bodyblock for .)
    LONG            reduce using rule 25 (bodyblock -> bodyblock for .)
    RETURN          reduce using rule 25 (bodyblock -> bodyblock for .)


state 185

    (26) bodyblock -> bodyblock imprimir .

    LLAVER          reduce using rule 26 (bodyblock -> bodyblock imprimir .)
    AUTO            reduce using rule 26 (bodyblock -> bodyblock imprimir .)
    CHAR            reduce using rule 26 (bodyblock -> bodyblock imprimir .)
    WHILE           reduce using rule 26 (bodyblock -> bodyblock imprimir .)
    IF              reduce using rule 26 (bodyblock -> bodyblock imprimir .)
    FOR             reduce using rule 26 (bodyblock -> bodyblock imprimir .)
    PRINT           reduce using rule 26 (bodyblock -> bodyblock imprimir .)
    COUT            reduce using rule 26 (bodyblock -> bodyblock imprimir .)
    INT             reduce using rule 26 (bodyblock -> bodyblock imprimir .)
    FLOAT           reduce using rule 26 (bodyblock -> bodyblock imprimir .)
    LONG            reduce using rule 26 (bodyblock -> bodyblock imprimir .)
    RETURN          reduce using rule 26 (bodyblock -> bodyblock imprimir .)


state 186

    (65) else -> ELSE conllaves .

    $end            reduce using rule 65 (else -> ELSE conllaves .)
    LLAVER          reduce using rule 65 (else -> ELSE conllaves .)
    AUTO            reduce using rule 65 (else -> ELSE conllaves .)
    CHAR            reduce using rule 65 (else -> ELSE conllaves .)
    WHILE           reduce using rule 65 (else -> ELSE conllaves .)
    IF              reduce using rule 65 (else -> ELSE conllaves .)
    FOR             reduce using rule 65 (else -> ELSE conllaves .)
    PRINT           reduce using rule 65 (else -> ELSE conllaves .)
    COUT            reduce using rule 65 (else -> ELSE conllaves .)
    INT             reduce using rule 65 (else -> ELSE conllaves .)
    FLOAT           reduce using rule 65 (else -> ELSE conllaves .)
    LONG            reduce using rule 65 (else -> ELSE conllaves .)
    RETURN          reduce using rule 65 (else -> ELSE conllaves .)


state 187

    (66) else -> ELSE sinllaves .

    $end            reduce using rule 66 (else -> ELSE sinllaves .)
    LLAVER          reduce using rule 66 (else -> ELSE sinllaves .)
    AUTO            reduce using rule 66 (else -> ELSE sinllaves .)
    CHAR            reduce using rule 66 (else -> ELSE sinllaves .)
    WHILE           reduce using rule 66 (else -> ELSE sinllaves .)
    IF              reduce using rule 66 (else -> ELSE sinllaves .)
    FOR             reduce using rule 66 (else -> ELSE sinllaves .)
    PRINT           reduce using rule 66 (else -> ELSE sinllaves .)
    COUT            reduce using rule 66 (else -> ELSE sinllaves .)
    INT             reduce using rule 66 (else -> ELSE sinllaves .)
    FLOAT           reduce using rule 66 (else -> ELSE sinllaves .)
    LONG            reduce using rule 66 (else -> ELSE sinllaves .)
    RETURN          reduce using rule 66 (else -> ELSE sinllaves .)


state 188

    (62) elseif -> ELSE IF . LPAR condicionif RPAR conllaves else
    (63) elseif -> ELSE IF . LPAR condicionif RPAR sinllaves else

    LPAR            shift and go to state 201


state 189

    (69) conllaves -> LLAVEL bodyblock LLAVER .

    ELSE            reduce using rule 69 (conllaves -> LLAVEL bodyblock LLAVER .)
    $end            reduce using rule 69 (conllaves -> LLAVEL bodyblock LLAVER .)
    LLAVER          reduce using rule 69 (conllaves -> LLAVEL bodyblock LLAVER .)
    AUTO            reduce using rule 69 (conllaves -> LLAVEL bodyblock LLAVER .)
    CHAR            reduce using rule 69 (conllaves -> LLAVEL bodyblock LLAVER .)
    WHILE           reduce using rule 69 (conllaves -> LLAVEL bodyblock LLAVER .)
    IF              reduce using rule 69 (conllaves -> LLAVEL bodyblock LLAVER .)
    FOR             reduce using rule 69 (conllaves -> LLAVEL bodyblock LLAVER .)
    PRINT           reduce using rule 69 (conllaves -> LLAVEL bodyblock LLAVER .)
    COUT            reduce using rule 69 (conllaves -> LLAVEL bodyblock LLAVER .)
    INT             reduce using rule 69 (conllaves -> LLAVEL bodyblock LLAVER .)
    FLOAT           reduce using rule 69 (conllaves -> LLAVEL bodyblock LLAVER .)
    LONG            reduce using rule 69 (conllaves -> LLAVEL bodyblock LLAVER .)
    RETURN          reduce using rule 69 (conllaves -> LLAVEL bodyblock LLAVER .)


state 190

    (106) definicion -> tipo IDENTIFICADOR PUNTOCOMA .

    LLAVER          reduce using rule 106 (definicion -> tipo IDENTIFICADOR PUNTOCOMA .)
    VOID            reduce using rule 106 (definicion -> tipo IDENTIFICADOR PUNTOCOMA .)
    INT             reduce using rule 106 (definicion -> tipo IDENTIFICADOR PUNTOCOMA .)
    FLOAT           reduce using rule 106 (definicion -> tipo IDENTIFICADOR PUNTOCOMA .)
    LONG            reduce using rule 106 (definicion -> tipo IDENTIFICADOR PUNTOCOMA .)
    AUTO            reduce using rule 106 (definicion -> tipo IDENTIFICADOR PUNTOCOMA .)
    CHAR            reduce using rule 106 (definicion -> tipo IDENTIFICADOR PUNTOCOMA .)


state 191

    (96) for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor . RPAR LLAVEL bodyblock LLAVER

    RPAR            shift and go to state 202


state 192

    (88) loopfor -> asign .

    RPAR            reduce using rule 88 (loopfor -> asign .)


state 193

    (89) loopfor -> unaryexp .

    RPAR            reduce using rule 89 (loopfor -> unaryexp .)


state 194

    (90) asign -> IDENTIFICADOR . MAS valor
    (91) asign -> IDENTIFICADOR . MENOS valor
    (92) asign -> IDENTIFICADOR . ASTERISCO valor
    (93) asign -> IDENTIFICADOR . SLASH valor
    (94) unaryexp -> IDENTIFICADOR . MAS MAS
    (95) unaryexp -> IDENTIFICADOR . MENOS MENOS

    MAS             shift and go to state 203
    MENOS           shift and go to state 204
    ASTERISCO       shift and go to state 205
    SLASH           shift and go to state 206


state 195

    (87) condfor -> IDENTIFICADOR comparador valor .

    PUNTOCOMA       reduce using rule 87 (condfor -> IDENTIFICADOR comparador valor .)


state 196

    (98) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL LLAVEL . arraydata LLAVER PUNTOCOMA
    (99) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL LLAVEL . LLAVER PUNTOCOMA
    (100) arraydata -> . arraydata COMMA valor
    (101) arraydata -> . valor
    (47) valor -> . ENTERO
    (48) valor -> . FLOTANTE
    (49) valor -> . CHARACTER
    (50) valor -> . STRING
    (51) valor -> . TRUE
    (52) valor -> . FALSE
    (53) valor -> . IDENTIFICADOR

    LLAVER          shift and go to state 208
    ENTERO          shift and go to state 43
    FLOTANTE        shift and go to state 44
    CHARACTER       shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    IDENTIFICADOR   shift and go to state 42

    arraydata                      shift and go to state 207
    valor                          shift and go to state 209

state 197

    (115) masparametrosimplementacion -> COMMA parametrosimplementacion .

    RPAR            reduce using rule 115 (masparametrosimplementacion -> COMMA parametrosimplementacion .)


state 198

    (108) funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock . RETURN valor PUNTOCOMA LLAVER
    (22) bodyblock -> bodyblock . variable
    (23) bodyblock -> bodyblock . while
    (24) bodyblock -> bodyblock . expresionif
    (25) bodyblock -> bodyblock . for
    (26) bodyblock -> bodyblock . imprimir
    (37) variable -> . numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA
    (38) variable -> . numerotipo IDENTIFICADOR PUNTOCOMA
    (39) variable -> . AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA
    (40) variable -> . AUTO IDENTIFICADOR PUNTOCOMA
    (41) variable -> . CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA
    (54) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (57) expresionif -> . IF LPAR condicionif RPAR conllaves expresionpos
    (58) expresionif -> . IF LPAR condicionif RPAR sinllaves expresionpos
    (96) for -> . FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER
    (20) imprimir -> . PRINT LPAR valor RPAR
    (21) imprimir -> . COUT MENOR MENOR valor
    (42) numerotipo -> . INT
    (43) numerotipo -> . FLOAT
    (44) numerotipo -> . LONG

    RETURN          shift and go to state 210
    AUTO            shift and go to state 116
    CHAR            shift and go to state 117
    WHILE           shift and go to state 18
    IF              shift and go to state 20
    FOR             shift and go to state 22
    PRINT           shift and go to state 27
    COUT            shift and go to state 28
    INT             shift and go to state 118
    FLOAT           shift and go to state 119
    LONG            shift and go to state 120

    variable                       shift and go to state 181
    while                          shift and go to state 182
    expresionif                    shift and go to state 183
    for                            shift and go to state 184
    imprimir                       shift and go to state 185
    numerotipo                     shift and go to state 14

state 199

    (109) funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock . LLAVER
    (22) bodyblock -> bodyblock . variable
    (23) bodyblock -> bodyblock . while
    (24) bodyblock -> bodyblock . expresionif
    (25) bodyblock -> bodyblock . for
    (26) bodyblock -> bodyblock . imprimir
    (37) variable -> . numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA
    (38) variable -> . numerotipo IDENTIFICADOR PUNTOCOMA
    (39) variable -> . AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA
    (40) variable -> . AUTO IDENTIFICADOR PUNTOCOMA
    (41) variable -> . CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA
    (54) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (57) expresionif -> . IF LPAR condicionif RPAR conllaves expresionpos
    (58) expresionif -> . IF LPAR condicionif RPAR sinllaves expresionpos
    (96) for -> . FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER
    (20) imprimir -> . PRINT LPAR valor RPAR
    (21) imprimir -> . COUT MENOR MENOR valor
    (42) numerotipo -> . INT
    (43) numerotipo -> . FLOAT
    (44) numerotipo -> . LONG

    LLAVER          shift and go to state 211
    AUTO            shift and go to state 116
    CHAR            shift and go to state 117
    WHILE           shift and go to state 18
    IF              shift and go to state 20
    FOR             shift and go to state 22
    PRINT           shift and go to state 27
    COUT            shift and go to state 28
    INT             shift and go to state 118
    FLOAT           shift and go to state 119
    LONG            shift and go to state 120

    variable                       shift and go to state 181
    while                          shift and go to state 182
    expresionif                    shift and go to state 183
    for                            shift and go to state 184
    imprimir                       shift and go to state 185
    numerotipo                     shift and go to state 14

state 200

    (56) struct -> STRUCT IDENTIFICADOR LLAVEL varblock LLAVER IDENTIFICADOR PUNTOCOMA .

    $end            reduce using rule 56 (struct -> STRUCT IDENTIFICADOR LLAVEL varblock LLAVER IDENTIFICADOR PUNTOCOMA .)


state 201

    (62) elseif -> ELSE IF LPAR . condicionif RPAR conllaves else
    (63) elseif -> ELSE IF LPAR . condicionif RPAR sinllaves else
    (70) condicionif -> . initcondicion
    (71) condicionif -> . statement
    (72) initcondicion -> . varblock statement
    (73) statement -> . expresion
    (74) statement -> . EXCLAMACION boolean
    (75) statement -> . EXCLAMACION LPAR expresion RPAR
    (76) statement -> . EXCLAMACION IDENTIFICADOR
    (35) varblock -> . varblock variable
    (36) varblock -> .
    (55) expresion -> . expresion comparador expresion
    (79) expresion -> . valor
    (47) valor -> . ENTERO
    (48) valor -> . FLOTANTE
    (49) valor -> . CHARACTER
    (50) valor -> . STRING
    (51) valor -> . TRUE
    (52) valor -> . FALSE
    (53) valor -> . IDENTIFICADOR

  ! shift/reduce conflict for EXCLAMACION resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for FLOTANTE resolved as shift
  ! shift/reduce conflict for CHARACTER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for IDENTIFICADOR resolved as shift
    EXCLAMACION     shift and go to state 41
    AUTO            reduce using rule 36 (varblock -> .)
    CHAR            reduce using rule 36 (varblock -> .)
    INT             reduce using rule 36 (varblock -> .)
    FLOAT           reduce using rule 36 (varblock -> .)
    LONG            reduce using rule 36 (varblock -> .)
    ENTERO          shift and go to state 43
    FLOTANTE        shift and go to state 44
    CHARACTER       shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    IDENTIFICADOR   shift and go to state 42

  ! EXCLAMACION     [ reduce using rule 36 (varblock -> .) ]
  ! ENTERO          [ reduce using rule 36 (varblock -> .) ]
  ! FLOTANTE        [ reduce using rule 36 (varblock -> .) ]
  ! CHARACTER       [ reduce using rule 36 (varblock -> .) ]
  ! STRING          [ reduce using rule 36 (varblock -> .) ]
  ! TRUE            [ reduce using rule 36 (varblock -> .) ]
  ! FALSE           [ reduce using rule 36 (varblock -> .) ]
  ! IDENTIFICADOR   [ reduce using rule 36 (varblock -> .) ]

    condicionif                    shift and go to state 212
    initcondicion                  shift and go to state 80
    statement                      shift and go to state 81
    varblock                       shift and go to state 82
    expresion                      shift and go to state 66
    valor                          shift and go to state 40

state 202

    (96) for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR . LLAVEL bodyblock LLAVER

    LLAVEL          shift and go to state 213


state 203

    (90) asign -> IDENTIFICADOR MAS . valor
    (94) unaryexp -> IDENTIFICADOR MAS . MAS
    (47) valor -> . ENTERO
    (48) valor -> . FLOTANTE
    (49) valor -> . CHARACTER
    (50) valor -> . STRING
    (51) valor -> . TRUE
    (52) valor -> . FALSE
    (53) valor -> . IDENTIFICADOR

    MAS             shift and go to state 214
    ENTERO          shift and go to state 43
    FLOTANTE        shift and go to state 44
    CHARACTER       shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    IDENTIFICADOR   shift and go to state 42

    valor                          shift and go to state 215

state 204

    (91) asign -> IDENTIFICADOR MENOS . valor
    (95) unaryexp -> IDENTIFICADOR MENOS . MENOS
    (47) valor -> . ENTERO
    (48) valor -> . FLOTANTE
    (49) valor -> . CHARACTER
    (50) valor -> . STRING
    (51) valor -> . TRUE
    (52) valor -> . FALSE
    (53) valor -> . IDENTIFICADOR

    MENOS           shift and go to state 216
    ENTERO          shift and go to state 43
    FLOTANTE        shift and go to state 44
    CHARACTER       shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    IDENTIFICADOR   shift and go to state 42

    valor                          shift and go to state 217

state 205

    (92) asign -> IDENTIFICADOR ASTERISCO . valor
    (47) valor -> . ENTERO
    (48) valor -> . FLOTANTE
    (49) valor -> . CHARACTER
    (50) valor -> . STRING
    (51) valor -> . TRUE
    (52) valor -> . FALSE
    (53) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 43
    FLOTANTE        shift and go to state 44
    CHARACTER       shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    IDENTIFICADOR   shift and go to state 42

    valor                          shift and go to state 218

state 206

    (93) asign -> IDENTIFICADOR SLASH . valor
    (47) valor -> . ENTERO
    (48) valor -> . FLOTANTE
    (49) valor -> . CHARACTER
    (50) valor -> . STRING
    (51) valor -> . TRUE
    (52) valor -> . FALSE
    (53) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 43
    FLOTANTE        shift and go to state 44
    CHARACTER       shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    IDENTIFICADOR   shift and go to state 42

    valor                          shift and go to state 219

state 207

    (98) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL LLAVEL arraydata . LLAVER PUNTOCOMA
    (100) arraydata -> arraydata . COMMA valor

    LLAVER          shift and go to state 220
    COMMA           shift and go to state 221


state 208

    (99) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL LLAVEL LLAVER . PUNTOCOMA

    PUNTOCOMA       shift and go to state 222


state 209

    (101) arraydata -> valor .

    LLAVER          reduce using rule 101 (arraydata -> valor .)
    COMMA           reduce using rule 101 (arraydata -> valor .)


state 210

    (108) funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN . valor PUNTOCOMA LLAVER
    (47) valor -> . ENTERO
    (48) valor -> . FLOTANTE
    (49) valor -> . CHARACTER
    (50) valor -> . STRING
    (51) valor -> . TRUE
    (52) valor -> . FALSE
    (53) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 43
    FLOTANTE        shift and go to state 44
    CHARACTER       shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    IDENTIFICADOR   shift and go to state 42

    valor                          shift and go to state 223

state 211

    (109) funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER .

    $end            reduce using rule 109 (funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER .)
    LLAVER          reduce using rule 109 (funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER .)
    VOID            reduce using rule 109 (funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER .)
    INT             reduce using rule 109 (funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER .)
    FLOAT           reduce using rule 109 (funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER .)
    LONG            reduce using rule 109 (funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER .)
    AUTO            reduce using rule 109 (funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER .)
    CHAR            reduce using rule 109 (funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER .)


state 212

    (62) elseif -> ELSE IF LPAR condicionif . RPAR conllaves else
    (63) elseif -> ELSE IF LPAR condicionif . RPAR sinllaves else

    RPAR            shift and go to state 224


state 213

    (96) for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL . bodyblock LLAVER
    (22) bodyblock -> . bodyblock variable
    (23) bodyblock -> . bodyblock while
    (24) bodyblock -> . bodyblock expresionif
    (25) bodyblock -> . bodyblock for
    (26) bodyblock -> . bodyblock imprimir
    (27) bodyblock -> .

    LLAVER          reduce using rule 27 (bodyblock -> .)
    AUTO            reduce using rule 27 (bodyblock -> .)
    CHAR            reduce using rule 27 (bodyblock -> .)
    WHILE           reduce using rule 27 (bodyblock -> .)
    IF              reduce using rule 27 (bodyblock -> .)
    FOR             reduce using rule 27 (bodyblock -> .)
    PRINT           reduce using rule 27 (bodyblock -> .)
    COUT            reduce using rule 27 (bodyblock -> .)
    INT             reduce using rule 27 (bodyblock -> .)
    FLOAT           reduce using rule 27 (bodyblock -> .)
    LONG            reduce using rule 27 (bodyblock -> .)

    bodyblock                      shift and go to state 225

state 214

    (94) unaryexp -> IDENTIFICADOR MAS MAS .

    RPAR            reduce using rule 94 (unaryexp -> IDENTIFICADOR MAS MAS .)


state 215

    (90) asign -> IDENTIFICADOR MAS valor .

    RPAR            reduce using rule 90 (asign -> IDENTIFICADOR MAS valor .)


state 216

    (95) unaryexp -> IDENTIFICADOR MENOS MENOS .

    RPAR            reduce using rule 95 (unaryexp -> IDENTIFICADOR MENOS MENOS .)


state 217

    (91) asign -> IDENTIFICADOR MENOS valor .

    RPAR            reduce using rule 91 (asign -> IDENTIFICADOR MENOS valor .)


state 218

    (92) asign -> IDENTIFICADOR ASTERISCO valor .

    RPAR            reduce using rule 92 (asign -> IDENTIFICADOR ASTERISCO valor .)


state 219

    (93) asign -> IDENTIFICADOR SLASH valor .

    RPAR            reduce using rule 93 (asign -> IDENTIFICADOR SLASH valor .)


state 220

    (98) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL LLAVEL arraydata LLAVER . PUNTOCOMA

    PUNTOCOMA       shift and go to state 226


state 221

    (100) arraydata -> arraydata COMMA . valor
    (47) valor -> . ENTERO
    (48) valor -> . FLOTANTE
    (49) valor -> . CHARACTER
    (50) valor -> . STRING
    (51) valor -> . TRUE
    (52) valor -> . FALSE
    (53) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 43
    FLOTANTE        shift and go to state 44
    CHARACTER       shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    IDENTIFICADOR   shift and go to state 42

    valor                          shift and go to state 227

state 222

    (99) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL LLAVEL LLAVER PUNTOCOMA .

    $end            reduce using rule 99 (arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL LLAVEL LLAVER PUNTOCOMA .)


state 223

    (108) funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor . PUNTOCOMA LLAVER

    PUNTOCOMA       shift and go to state 228


state 224

    (62) elseif -> ELSE IF LPAR condicionif RPAR . conllaves else
    (63) elseif -> ELSE IF LPAR condicionif RPAR . sinllaves else
    (69) conllaves -> . LLAVEL bodyblock LLAVER
    (67) sinllaves -> . while
    (68) sinllaves -> . variable
    (54) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (37) variable -> . numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA
    (38) variable -> . numerotipo IDENTIFICADOR PUNTOCOMA
    (39) variable -> . AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA
    (40) variable -> . AUTO IDENTIFICADOR PUNTOCOMA
    (41) variable -> . CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA
    (42) numerotipo -> . INT
    (43) numerotipo -> . FLOAT
    (44) numerotipo -> . LONG

    LLAVEL          shift and go to state 142
    WHILE           shift and go to state 18
    AUTO            shift and go to state 116
    CHAR            shift and go to state 117
    INT             shift and go to state 118
    FLOAT           shift and go to state 119
    LONG            shift and go to state 120

    conllaves                      shift and go to state 229
    sinllaves                      shift and go to state 230
    while                          shift and go to state 143
    variable                       shift and go to state 144
    numerotipo                     shift and go to state 14

state 225

    (96) for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock . LLAVER
    (22) bodyblock -> bodyblock . variable
    (23) bodyblock -> bodyblock . while
    (24) bodyblock -> bodyblock . expresionif
    (25) bodyblock -> bodyblock . for
    (26) bodyblock -> bodyblock . imprimir
    (37) variable -> . numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA
    (38) variable -> . numerotipo IDENTIFICADOR PUNTOCOMA
    (39) variable -> . AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA
    (40) variable -> . AUTO IDENTIFICADOR PUNTOCOMA
    (41) variable -> . CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA
    (54) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (57) expresionif -> . IF LPAR condicionif RPAR conllaves expresionpos
    (58) expresionif -> . IF LPAR condicionif RPAR sinllaves expresionpos
    (96) for -> . FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER
    (20) imprimir -> . PRINT LPAR valor RPAR
    (21) imprimir -> . COUT MENOR MENOR valor
    (42) numerotipo -> . INT
    (43) numerotipo -> . FLOAT
    (44) numerotipo -> . LONG

    LLAVER          shift and go to state 231
    AUTO            shift and go to state 116
    CHAR            shift and go to state 117
    WHILE           shift and go to state 18
    IF              shift and go to state 20
    FOR             shift and go to state 22
    PRINT           shift and go to state 27
    COUT            shift and go to state 28
    INT             shift and go to state 118
    FLOAT           shift and go to state 119
    LONG            shift and go to state 120

    variable                       shift and go to state 181
    while                          shift and go to state 182
    expresionif                    shift and go to state 183
    for                            shift and go to state 184
    imprimir                       shift and go to state 185
    numerotipo                     shift and go to state 14

state 226

    (98) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL LLAVEL arraydata LLAVER PUNTOCOMA .

    $end            reduce using rule 98 (arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL LLAVEL arraydata LLAVER PUNTOCOMA .)


state 227

    (100) arraydata -> arraydata COMMA valor .

    LLAVER          reduce using rule 100 (arraydata -> arraydata COMMA valor .)
    COMMA           reduce using rule 100 (arraydata -> arraydata COMMA valor .)


state 228

    (108) funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA . LLAVER

    LLAVER          shift and go to state 232


state 229

    (62) elseif -> ELSE IF LPAR condicionif RPAR conllaves . else
    (65) else -> . ELSE conllaves
    (66) else -> . ELSE sinllaves

    ELSE            shift and go to state 233

    else                           shift and go to state 234

state 230

    (63) elseif -> ELSE IF LPAR condicionif RPAR sinllaves . else
    (65) else -> . ELSE conllaves
    (66) else -> . ELSE sinllaves

    ELSE            shift and go to state 233

    else                           shift and go to state 235

state 231

    (96) for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .

    $end            reduce using rule 96 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)
    LLAVER          reduce using rule 96 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)
    AUTO            reduce using rule 96 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)
    CHAR            reduce using rule 96 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)
    WHILE           reduce using rule 96 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)
    IF              reduce using rule 96 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)
    FOR             reduce using rule 96 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)
    PRINT           reduce using rule 96 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)
    COUT            reduce using rule 96 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)
    INT             reduce using rule 96 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)
    FLOAT           reduce using rule 96 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)
    LONG            reduce using rule 96 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)
    RETURN          reduce using rule 96 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)


state 232

    (108) funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER .

    $end            reduce using rule 108 (funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER .)
    LLAVER          reduce using rule 108 (funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER .)
    VOID            reduce using rule 108 (funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER .)
    INT             reduce using rule 108 (funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER .)
    FLOAT           reduce using rule 108 (funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER .)
    LONG            reduce using rule 108 (funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER .)
    AUTO            reduce using rule 108 (funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER .)
    CHAR            reduce using rule 108 (funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER .)


state 233

    (65) else -> ELSE . conllaves
    (66) else -> ELSE . sinllaves
    (69) conllaves -> . LLAVEL bodyblock LLAVER
    (67) sinllaves -> . while
    (68) sinllaves -> . variable
    (54) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (37) variable -> . numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA
    (38) variable -> . numerotipo IDENTIFICADOR PUNTOCOMA
    (39) variable -> . AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA
    (40) variable -> . AUTO IDENTIFICADOR PUNTOCOMA
    (41) variable -> . CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA
    (42) numerotipo -> . INT
    (43) numerotipo -> . FLOAT
    (44) numerotipo -> . LONG

    LLAVEL          shift and go to state 142
    WHILE           shift and go to state 18
    AUTO            shift and go to state 116
    CHAR            shift and go to state 117
    INT             shift and go to state 118
    FLOAT           shift and go to state 119
    LONG            shift and go to state 120

    conllaves                      shift and go to state 186
    sinllaves                      shift and go to state 187
    while                          shift and go to state 143
    variable                       shift and go to state 144
    numerotipo                     shift and go to state 14

state 234

    (62) elseif -> ELSE IF LPAR condicionif RPAR conllaves else .

    $end            reduce using rule 62 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    LLAVER          reduce using rule 62 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    AUTO            reduce using rule 62 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    CHAR            reduce using rule 62 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    WHILE           reduce using rule 62 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    IF              reduce using rule 62 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    FOR             reduce using rule 62 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    PRINT           reduce using rule 62 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    COUT            reduce using rule 62 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    INT             reduce using rule 62 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    FLOAT           reduce using rule 62 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    LONG            reduce using rule 62 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    RETURN          reduce using rule 62 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)


state 235

    (63) elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .

    $end            reduce using rule 63 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    LLAVER          reduce using rule 63 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    AUTO            reduce using rule 63 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    CHAR            reduce using rule 63 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    WHILE           reduce using rule 63 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    IF              reduce using rule 63 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    FOR             reduce using rule 63 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    PRINT           reduce using rule 63 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    COUT            reduce using rule 63 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    INT             reduce using rule 63 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    FLOAT           reduce using rule 63 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    LONG            reduce using rule 63 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    RETURN          reduce using rule 63 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IDENTIFICADOR in state 16 resolved as shift
WARNING: shift/reduce conflict for IDENTIFICADOR in state 17 resolved as shift
WARNING: shift/reduce conflict for IDENTIFICADOR in state 24 resolved as shift
WARNING: shift/reduce conflict for RPAR in state 38 resolved as shift
WARNING: shift/reduce conflict for EXCLAMACION in state 49 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 49 resolved as shift
WARNING: shift/reduce conflict for FLOTANTE in state 49 resolved as shift
WARNING: shift/reduce conflict for CHARACTER in state 49 resolved as shift
WARNING: shift/reduce conflict for STRING in state 49 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 49 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 49 resolved as shift
WARNING: shift/reduce conflict for IDENTIFICADOR in state 49 resolved as shift
WARNING: shift/reduce conflict for IGUAL in state 107 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 107 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 107 resolved as shift
WARNING: shift/reduce conflict for EXCLAMACION in state 107 resolved as shift
WARNING: shift/reduce conflict for LLAVER in state 121 resolved as shift
WARNING: shift/reduce conflict for VOID in state 121 resolved as shift
WARNING: shift/reduce conflict for LLAVER in state 121 resolved as shift
WARNING: shift/reduce conflict for VOID in state 121 resolved as shift
WARNING: shift/reduce conflict for INT in state 121 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 121 resolved as shift
WARNING: shift/reduce conflict for LONG in state 121 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 121 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 121 resolved as shift
WARNING: shift/reduce conflict for EXCLAMACION in state 201 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 201 resolved as shift
WARNING: shift/reduce conflict for FLOTANTE in state 201 resolved as shift
WARNING: shift/reduce conflict for CHARACTER in state 201 resolved as shift
WARNING: shift/reduce conflict for STRING in state 201 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 201 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 201 resolved as shift
WARNING: shift/reduce conflict for IDENTIFICADOR in state 201 resolved as shift
WARNING: reduce/reduce conflict in state 0 resolved using rule (body -> <empty>)
WARNING: rejected rule (funcionclaseimpl -> <empty>) in state 0
WARNING: reduce/reduce conflict in state 29 resolved using rule (tipo -> INT)
WARNING: rejected rule (numerotipo -> INT) in state 29
WARNING: reduce/reduce conflict in state 30 resolved using rule (tipo -> FLOAT)
WARNING: rejected rule (numerotipo -> FLOAT) in state 30
WARNING: reduce/reduce conflict in state 31 resolved using rule (tipo -> LONG)
WARNING: rejected rule (numerotipo -> LONG) in state 31
WARNING: reduce/reduce conflict in state 121 resolved using rule (definicion -> <empty>)
WARNING: rejected rule (funcionclaseimpl -> <empty>) in state 121
WARNING: reduce/reduce conflict in state 140 resolved using rule (expresionpos -> <empty>)
WARNING: rejected rule (elseif -> <empty>) in state 140
WARNING: reduce/reduce conflict in state 141 resolved using rule (expresionpos -> <empty>)
WARNING: rejected rule (elseif -> <empty>) in state 141
WARNING: Rule (funcionclaseimpl -> <empty>) is never reduced
WARNING: Rule (elseif -> <empty>) is never reduced
