Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    BACKSLASH
    BOOL
    CIRCUNFLEJO
    COMADOBLE
    COMASIMPLE
    COMENTARIO
    DOBLEPUNTO
    INTERROGACION
    NEW
    NULLPOINTER
    NUMERAL
    PIPE
    PORCENTAJE
    PRIVATE
    PROTECTED
    PUBLIC
    PUNTERO
    STATIC
    THEN
    VIRGUILA

Grammar

Rule 0     S' -> body
Rule 1     body -> variable
Rule 2     body -> while
Rule 3     body -> expresionif
Rule 4     body -> claseimplementacion
Rule 5     body -> for
Rule 6     body -> arraydeclaration
Rule 7     body -> funcionclaseimpl
Rule 8     body -> creacionobjeto
Rule 9     body -> asignarvalorobjeto
Rule 10    body -> usarfuncionobjeto
Rule 11    body -> struct
Rule 12    body -> imprimir
Rule 13    body -> <empty>
Rule 14    id -> IDENTIFICADOR
Rule 15    id -> IDENTIFICADOR CORCHETEL ENTERO CORCHETER
Rule 16    tipo -> INT
Rule 17    tipo -> FLOAT
Rule 18    tipo -> LONG
Rule 19    tipo -> AUTO
Rule 20    tipo -> CHAR
Rule 21    tipo -> VOID
Rule 22    imprimir -> PRINT LPAR valor RPAR
Rule 23    imprimir -> COUT MENOR MENOR valor
Rule 24    bodyblock -> bodyblock variable
Rule 25    bodyblock -> bodyblock while
Rule 26    bodyblock -> bodyblock expresionif
Rule 27    bodyblock -> bodyblock for
Rule 28    bodyblock -> bodyblock imprimir
Rule 29    bodyblock -> bodyblock arraydeclaration
Rule 30    bodyblock -> <empty>
Rule 31    funcionblock -> bodyblock variable
Rule 32    funcionblock -> bodyblock while
Rule 33    funcionblock -> bodyblock expresionif
Rule 34    funcionblock -> bodyblock for
Rule 35    funcionblock -> bodyblock imprimir
Rule 36    funcionblock -> RETURN statement
Rule 37    funcionblock -> <empty>
Rule 38    varblock -> varblock variable
Rule 39    varblock -> <empty>
Rule 40    variable -> numerotipo id IGUAL numero PUNTOCOMA
Rule 41    variable -> numerotipo id PUNTOCOMA
Rule 42    variable -> AUTO id IGUAL valor PUNTOCOMA
Rule 43    variable -> AUTO id PUNTOCOMA
Rule 44    variable -> CHAR id IGUAL CHARACTER PUNTOCOMA
Rule 45    numerotipo -> INT
Rule 46    numerotipo -> FLOAT
Rule 47    numerotipo -> LONG
Rule 48    numero -> ENTERO
Rule 49    numero -> FLOTANTE
Rule 50    valor -> ENTERO
Rule 51    valor -> FLOTANTE
Rule 52    valor -> CHARACTER
Rule 53    valor -> STRING
Rule 54    valor -> TRUE
Rule 55    valor -> FALSE
Rule 56    valor -> IDENTIFICADOR
Rule 57    while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
Rule 58    expresion -> expresion comparador expresion
Rule 59    struct -> STRUCT IDENTIFICADOR LLAVEL varblock LLAVER IDENTIFICADOR PUNTOCOMA
Rule 60    expresionif -> IF LPAR condicionif RPAR conllaves expresionpos
Rule 61    expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos
Rule 62    expresionpos -> else
Rule 63    expresionpos -> elseif
Rule 64    expresionpos -> <empty>
Rule 65    elseif -> ELSE IF LPAR condicionif RPAR conllaves else
Rule 66    elseif -> ELSE IF LPAR condicionif RPAR sinllaves else
Rule 67    elseif -> <empty>
Rule 68    else -> ELSE conllaves
Rule 69    else -> ELSE sinllaves
Rule 70    sinllaves -> while
Rule 71    sinllaves -> variable
Rule 72    conllaves -> LLAVEL bodyblock LLAVER
Rule 73    condicionif -> initcondicion
Rule 74    condicionif -> statement
Rule 75    initcondicion -> varblock statement
Rule 76    statement -> expresion
Rule 77    statement -> EXCLAMACION boolean
Rule 78    statement -> EXCLAMACION LPAR expresion RPAR
Rule 79    statement -> EXCLAMACION IDENTIFICADOR
Rule 80    boolean -> TRUE
Rule 81    boolean -> FALSE
Rule 82    expresion -> valor
Rule 83    comparador -> IGUAL IGUAL
Rule 84    comparador -> MENOR
Rule 85    comparador -> MAYOR
Rule 86    comparador -> MENOR IGUAL
Rule 87    comparador -> MAYOR IGUAL
Rule 88    comparador -> EXCLAMACION IGUAL
Rule 89    initfor -> tipo IDENTIFICADOR IGUAL valor
Rule 90    condfor -> IDENTIFICADOR comparador valor
Rule 91    loopfor -> asign
Rule 92    loopfor -> unaryexp
Rule 93    asign -> IDENTIFICADOR MAS valor
Rule 94    asign -> IDENTIFICADOR MENOS valor
Rule 95    asign -> IDENTIFICADOR ASTERISCO valor
Rule 96    asign -> IDENTIFICADOR SLASH valor
Rule 97    unaryexp -> IDENTIFICADOR MAS MAS
Rule 98    unaryexp -> IDENTIFICADOR MENOS MENOS
Rule 99    for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER
Rule 100   arraydeclaration -> tipo id PUNTOCOMA
Rule 101   arraydeclaration -> tipo id IGUAL LLAVEL arraydata LLAVER PUNTOCOMA
Rule 102   arraydeclaration -> tipo id IGUAL LLAVEL LLAVER PUNTOCOMA
Rule 103   arraydata -> arraydata COMMA valor
Rule 104   arraydata -> valor
Rule 105   claseimplementacion -> CLASS IDENTIFICADOR LLAVEL bloqueclase LLAVER
Rule 106   bloqueclase -> bloqueclase definicion
Rule 107   bloqueclase -> bloqueclase funcionclaseimpl
Rule 108   bloqueclase -> <empty>
Rule 109   definicion -> tipo IDENTIFICADOR PUNTOCOMA
Rule 110   definicion -> <empty>
Rule 111   funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER
Rule 112   funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER
Rule 113   funcionclaseimpl -> <empty>
Rule 114   parametrosimplementacion -> tipo IDENTIFICADOR masparametrosimplementacion
Rule 115   parametrosimplementacion -> <empty>
Rule 116   parametrosfuncion -> IDENTIFICADOR masparametrosfuncion
Rule 117   parametrosfuncion -> <empty>
Rule 118   masparametrosimplementacion -> COMMA parametrosimplementacion
Rule 119   masparametrosimplementacion -> <empty>
Rule 120   masparametrosfuncion -> COMMA parametrosfuncion
Rule 121   masparametrosfuncion -> <empty>
Rule 122   creacionobjeto -> IDENTIFICADOR IDENTIFICADOR PUNTOCOMA
Rule 123   asignarvalorobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR IGUAL valor
Rule 124   asignarvalorobjeto -> LPAR expresion RPAR
Rule 125   asignarvalorobjeto -> LPAR statement RPAR
Rule 126   asignarvalorobjeto -> EXCLAMACION LPAR statement RPAR
Rule 127   usarfuncionobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR LPAR parametrosfuncion RPAR PUNTOCOMA

Terminals, with rules where they appear

AND                  : 
ASTERISCO            : 95
AUTO                 : 19 42 43
BACKSLASH            : 
BOOL                 : 
CHAR                 : 20 44
CHARACTER            : 44 52
CIRCUNFLEJO          : 
CLASS                : 105
COMADOBLE            : 
COMASIMPLE           : 
COMENTARIO           : 
COMMA                : 103 118 120
CORCHETEL            : 15
CORCHETER            : 15
COUT                 : 23
DOBLEPUNTO           : 
ELSE                 : 65 66 68 69
ENTERO               : 15 48 50
EXCLAMACION          : 77 78 79 88 126
FALSE                : 55 81
FLOAT                : 17 46
FLOTANTE             : 49 51
FOR                  : 99
IDENTIFICADOR        : 14 15 56 59 59 79 89 90 93 94 95 96 97 98 105 109 111 112 114 116 122 122 123 123 127 127
IF                   : 60 61 65 66
IGUAL                : 40 42 44 83 83 86 87 88 89 101 102 123
INT                  : 16 45
INTERROGACION        : 
LLAVEL               : 57 59 72 99 101 102 105 111 112
LLAVER               : 57 59 72 99 101 102 105 111 112
LONG                 : 18 47
LPAR                 : 22 57 60 61 65 66 78 99 111 112 124 125 126 127
MAS                  : 93 97 97
MAYOR                : 85 87
MENOR                : 23 23 84 86
MENOS                : 94 98 98
NEW                  : 
NULLPOINTER          : 
NUMERAL              : 
PIPE                 : 
PORCENTAJE           : 
PRINT                : 22
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
PUNTERO              : 
PUNTO                : 123 127
PUNTOCOMA            : 40 41 42 43 44 59 99 99 100 101 102 109 111 122 127
RETURN               : 36 111
RPAR                 : 22 57 60 61 65 66 78 99 111 112 124 125 126 127
SLASH                : 96
STATIC               : 
STRING               : 53
STRUCT               : 59
THEN                 : 
TRUE                 : 54 80
VIRGUILA             : 
VOID                 : 21 112
WHILE                : 57
error                : 

Nonterminals, with rules where they appear

arraydata            : 101 103
arraydeclaration     : 6 29
asign                : 91
asignarvalorobjeto   : 9
bloqueclase          : 105 106 107
body                 : 0
bodyblock            : 24 25 26 27 28 29 31 32 33 34 35 57 72 99 111 112
boolean              : 77
claseimplementacion  : 4
comparador           : 58 90
condfor              : 99
condicionif          : 60 61 65 66
conllaves            : 60 65 68
creacionobjeto       : 8
definicion           : 106
else                 : 62 65 66
elseif               : 63
expresion            : 58 58 76 78 124
expresionif          : 3 26 33
expresionpos         : 60 61
for                  : 5 27 34
funcionblock         : 
funcionclaseimpl     : 7 107
id                   : 40 41 42 43 44 100 101 102
imprimir             : 12 28 35
initcondicion        : 73
initfor              : 99
loopfor              : 99
masparametrosfuncion : 116
masparametrosimplementacion : 114
numero               : 40
numerotipo           : 40 41
parametrosfuncion    : 120 127
parametrosimplementacion : 111 112 118
sinllaves            : 61 66 69
statement            : 36 57 74 75 125 126
struct               : 11
tipo                 : 89 100 101 102 109 111 114
unaryexp             : 92
usarfuncionobjeto    : 10
valor                : 22 23 42 82 89 90 93 94 95 96 103 104 111 123
varblock             : 38 59 75
variable             : 1 24 31 38 71
while                : 2 25 32 70

Parsing method: LALR

state 0

    (0) S' -> . body
    (1) body -> . variable
    (2) body -> . while
    (3) body -> . expresionif
    (4) body -> . claseimplementacion
    (5) body -> . for
    (6) body -> . arraydeclaration
    (7) body -> . funcionclaseimpl
    (8) body -> . creacionobjeto
    (9) body -> . asignarvalorobjeto
    (10) body -> . usarfuncionobjeto
    (11) body -> . struct
    (12) body -> . imprimir
    (13) body -> .
    (40) variable -> . numerotipo id IGUAL numero PUNTOCOMA
    (41) variable -> . numerotipo id PUNTOCOMA
    (42) variable -> . AUTO id IGUAL valor PUNTOCOMA
    (43) variable -> . AUTO id PUNTOCOMA
    (44) variable -> . CHAR id IGUAL CHARACTER PUNTOCOMA
    (57) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (60) expresionif -> . IF LPAR condicionif RPAR conllaves expresionpos
    (61) expresionif -> . IF LPAR condicionif RPAR sinllaves expresionpos
    (105) claseimplementacion -> . CLASS IDENTIFICADOR LLAVEL bloqueclase LLAVER
    (99) for -> . FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER
    (100) arraydeclaration -> . tipo id PUNTOCOMA
    (101) arraydeclaration -> . tipo id IGUAL LLAVEL arraydata LLAVER PUNTOCOMA
    (102) arraydeclaration -> . tipo id IGUAL LLAVEL LLAVER PUNTOCOMA
    (111) funcionclaseimpl -> . tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER
    (112) funcionclaseimpl -> . VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER
    (113) funcionclaseimpl -> .
    (122) creacionobjeto -> . IDENTIFICADOR IDENTIFICADOR PUNTOCOMA
    (123) asignarvalorobjeto -> . IDENTIFICADOR PUNTO IDENTIFICADOR IGUAL valor
    (124) asignarvalorobjeto -> . LPAR expresion RPAR
    (125) asignarvalorobjeto -> . LPAR statement RPAR
    (126) asignarvalorobjeto -> . EXCLAMACION LPAR statement RPAR
    (127) usarfuncionobjeto -> . IDENTIFICADOR PUNTO IDENTIFICADOR LPAR parametrosfuncion RPAR PUNTOCOMA
    (59) struct -> . STRUCT IDENTIFICADOR LLAVEL varblock LLAVER IDENTIFICADOR PUNTOCOMA
    (22) imprimir -> . PRINT LPAR valor RPAR
    (23) imprimir -> . COUT MENOR MENOR valor
    (45) numerotipo -> . INT
    (46) numerotipo -> . FLOAT
    (47) numerotipo -> . LONG
    (16) tipo -> . INT
    (17) tipo -> . FLOAT
    (18) tipo -> . LONG
    (19) tipo -> . AUTO
    (20) tipo -> . CHAR
    (21) tipo -> . VOID

  ! reduce/reduce conflict for $end resolved using rule 13 (body -> .)
    $end            reduce using rule 13 (body -> .)
    AUTO            shift and go to state 15
    CHAR            shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 19
    CLASS           shift and go to state 20
    FOR             shift and go to state 22
    VOID            shift and go to state 24
    IDENTIFICADOR   shift and go to state 21
    LPAR            shift and go to state 18
    EXCLAMACION     shift and go to state 25
    STRUCT          shift and go to state 26
    PRINT           shift and go to state 27
    COUT            shift and go to state 28
    INT             shift and go to state 29
    FLOAT           shift and go to state 30
    LONG            shift and go to state 31

  ! $end            [ reduce using rule 113 (funcionclaseimpl -> .) ]

    body                           shift and go to state 1
    variable                       shift and go to state 2
    while                          shift and go to state 3
    expresionif                    shift and go to state 4
    claseimplementacion            shift and go to state 5
    for                            shift and go to state 6
    arraydeclaration               shift and go to state 7
    funcionclaseimpl               shift and go to state 8
    creacionobjeto                 shift and go to state 9
    asignarvalorobjeto             shift and go to state 10
    usarfuncionobjeto              shift and go to state 11
    struct                         shift and go to state 12
    imprimir                       shift and go to state 13
    numerotipo                     shift and go to state 14
    tipo                           shift and go to state 23

state 1

    (0) S' -> body .



state 2

    (1) body -> variable .

    $end            reduce using rule 1 (body -> variable .)


state 3

    (2) body -> while .

    $end            reduce using rule 2 (body -> while .)


state 4

    (3) body -> expresionif .

    $end            reduce using rule 3 (body -> expresionif .)


state 5

    (4) body -> claseimplementacion .

    $end            reduce using rule 4 (body -> claseimplementacion .)


state 6

    (5) body -> for .

    $end            reduce using rule 5 (body -> for .)


state 7

    (6) body -> arraydeclaration .

    $end            reduce using rule 6 (body -> arraydeclaration .)


state 8

    (7) body -> funcionclaseimpl .

    $end            reduce using rule 7 (body -> funcionclaseimpl .)


state 9

    (8) body -> creacionobjeto .

    $end            reduce using rule 8 (body -> creacionobjeto .)


state 10

    (9) body -> asignarvalorobjeto .

    $end            reduce using rule 9 (body -> asignarvalorobjeto .)


state 11

    (10) body -> usarfuncionobjeto .

    $end            reduce using rule 10 (body -> usarfuncionobjeto .)


state 12

    (11) body -> struct .

    $end            reduce using rule 11 (body -> struct .)


state 13

    (12) body -> imprimir .

    $end            reduce using rule 12 (body -> imprimir .)


state 14

    (40) variable -> numerotipo . id IGUAL numero PUNTOCOMA
    (41) variable -> numerotipo . id PUNTOCOMA
    (14) id -> . IDENTIFICADOR
    (15) id -> . IDENTIFICADOR CORCHETEL ENTERO CORCHETER

    IDENTIFICADOR   shift and go to state 33

    id                             shift and go to state 32

state 15

    (42) variable -> AUTO . id IGUAL valor PUNTOCOMA
    (43) variable -> AUTO . id PUNTOCOMA
    (19) tipo -> AUTO .
    (14) id -> . IDENTIFICADOR
    (15) id -> . IDENTIFICADOR CORCHETEL ENTERO CORCHETER

  ! shift/reduce conflict for IDENTIFICADOR resolved as shift
    IDENTIFICADOR   shift and go to state 33

  ! IDENTIFICADOR   [ reduce using rule 19 (tipo -> AUTO .) ]

    id                             shift and go to state 34

state 16

    (44) variable -> CHAR . id IGUAL CHARACTER PUNTOCOMA
    (20) tipo -> CHAR .
    (14) id -> . IDENTIFICADOR
    (15) id -> . IDENTIFICADOR CORCHETEL ENTERO CORCHETER

  ! shift/reduce conflict for IDENTIFICADOR resolved as shift
    IDENTIFICADOR   shift and go to state 33

  ! IDENTIFICADOR   [ reduce using rule 20 (tipo -> CHAR .) ]

    id                             shift and go to state 35

state 17

    (57) while -> WHILE . LPAR statement RPAR LLAVEL bodyblock LLAVER

    LPAR            shift and go to state 36


state 18

    (124) asignarvalorobjeto -> LPAR . expresion RPAR
    (125) asignarvalorobjeto -> LPAR . statement RPAR
    (58) expresion -> . expresion comparador expresion
    (82) expresion -> . valor
    (76) statement -> . expresion
    (77) statement -> . EXCLAMACION boolean
    (78) statement -> . EXCLAMACION LPAR expresion RPAR
    (79) statement -> . EXCLAMACION IDENTIFICADOR
    (50) valor -> . ENTERO
    (51) valor -> . FLOTANTE
    (52) valor -> . CHARACTER
    (53) valor -> . STRING
    (54) valor -> . TRUE
    (55) valor -> . FALSE
    (56) valor -> . IDENTIFICADOR

    EXCLAMACION     shift and go to state 40
    ENTERO          shift and go to state 42
    FLOTANTE        shift and go to state 43
    CHARACTER       shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    IDENTIFICADOR   shift and go to state 41

    expresion                      shift and go to state 37
    statement                      shift and go to state 38
    valor                          shift and go to state 39

state 19

    (60) expresionif -> IF . LPAR condicionif RPAR conllaves expresionpos
    (61) expresionif -> IF . LPAR condicionif RPAR sinllaves expresionpos

    LPAR            shift and go to state 48


state 20

    (105) claseimplementacion -> CLASS . IDENTIFICADOR LLAVEL bloqueclase LLAVER

    IDENTIFICADOR   shift and go to state 49


state 21

    (122) creacionobjeto -> IDENTIFICADOR . IDENTIFICADOR PUNTOCOMA
    (123) asignarvalorobjeto -> IDENTIFICADOR . PUNTO IDENTIFICADOR IGUAL valor
    (127) usarfuncionobjeto -> IDENTIFICADOR . PUNTO IDENTIFICADOR LPAR parametrosfuncion RPAR PUNTOCOMA

    IDENTIFICADOR   shift and go to state 50
    PUNTO           shift and go to state 51


state 22

    (99) for -> FOR . LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER

    LPAR            shift and go to state 52


state 23

    (100) arraydeclaration -> tipo . id PUNTOCOMA
    (101) arraydeclaration -> tipo . id IGUAL LLAVEL arraydata LLAVER PUNTOCOMA
    (102) arraydeclaration -> tipo . id IGUAL LLAVEL LLAVER PUNTOCOMA
    (111) funcionclaseimpl -> tipo . IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER
    (14) id -> . IDENTIFICADOR
    (15) id -> . IDENTIFICADOR CORCHETEL ENTERO CORCHETER

    IDENTIFICADOR   shift and go to state 54

    id                             shift and go to state 53

state 24

    (112) funcionclaseimpl -> VOID . IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER
    (21) tipo -> VOID .

  ! shift/reduce conflict for IDENTIFICADOR resolved as shift
    IDENTIFICADOR   shift and go to state 55

  ! IDENTIFICADOR   [ reduce using rule 21 (tipo -> VOID .) ]


state 25

    (126) asignarvalorobjeto -> EXCLAMACION . LPAR statement RPAR

    LPAR            shift and go to state 56


state 26

    (59) struct -> STRUCT . IDENTIFICADOR LLAVEL varblock LLAVER IDENTIFICADOR PUNTOCOMA

    IDENTIFICADOR   shift and go to state 57


state 27

    (22) imprimir -> PRINT . LPAR valor RPAR

    LPAR            shift and go to state 58


state 28

    (23) imprimir -> COUT . MENOR MENOR valor

    MENOR           shift and go to state 59


state 29

    (45) numerotipo -> INT .
    (16) tipo -> INT .

  ! reduce/reduce conflict for IDENTIFICADOR resolved using rule 16 (tipo -> INT .)
    IDENTIFICADOR   reduce using rule 16 (tipo -> INT .)

  ! IDENTIFICADOR   [ reduce using rule 45 (numerotipo -> INT .) ]


state 30

    (46) numerotipo -> FLOAT .
    (17) tipo -> FLOAT .

  ! reduce/reduce conflict for IDENTIFICADOR resolved using rule 17 (tipo -> FLOAT .)
    IDENTIFICADOR   reduce using rule 17 (tipo -> FLOAT .)

  ! IDENTIFICADOR   [ reduce using rule 46 (numerotipo -> FLOAT .) ]


state 31

    (47) numerotipo -> LONG .
    (18) tipo -> LONG .

  ! reduce/reduce conflict for IDENTIFICADOR resolved using rule 18 (tipo -> LONG .)
    IDENTIFICADOR   reduce using rule 18 (tipo -> LONG .)

  ! IDENTIFICADOR   [ reduce using rule 47 (numerotipo -> LONG .) ]


state 32

    (40) variable -> numerotipo id . IGUAL numero PUNTOCOMA
    (41) variable -> numerotipo id . PUNTOCOMA

    IGUAL           shift and go to state 60
    PUNTOCOMA       shift and go to state 61


state 33

    (14) id -> IDENTIFICADOR .
    (15) id -> IDENTIFICADOR . CORCHETEL ENTERO CORCHETER

    IGUAL           reduce using rule 14 (id -> IDENTIFICADOR .)
    PUNTOCOMA       reduce using rule 14 (id -> IDENTIFICADOR .)
    CORCHETEL       shift and go to state 62


state 34

    (42) variable -> AUTO id . IGUAL valor PUNTOCOMA
    (43) variable -> AUTO id . PUNTOCOMA

    IGUAL           shift and go to state 63
    PUNTOCOMA       shift and go to state 64


state 35

    (44) variable -> CHAR id . IGUAL CHARACTER PUNTOCOMA

    IGUAL           shift and go to state 65


state 36

    (57) while -> WHILE LPAR . statement RPAR LLAVEL bodyblock LLAVER
    (76) statement -> . expresion
    (77) statement -> . EXCLAMACION boolean
    (78) statement -> . EXCLAMACION LPAR expresion RPAR
    (79) statement -> . EXCLAMACION IDENTIFICADOR
    (58) expresion -> . expresion comparador expresion
    (82) expresion -> . valor
    (50) valor -> . ENTERO
    (51) valor -> . FLOTANTE
    (52) valor -> . CHARACTER
    (53) valor -> . STRING
    (54) valor -> . TRUE
    (55) valor -> . FALSE
    (56) valor -> . IDENTIFICADOR

    EXCLAMACION     shift and go to state 40
    ENTERO          shift and go to state 42
    FLOTANTE        shift and go to state 43
    CHARACTER       shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    IDENTIFICADOR   shift and go to state 41

    statement                      shift and go to state 66
    expresion                      shift and go to state 67
    valor                          shift and go to state 39

state 37

    (124) asignarvalorobjeto -> LPAR expresion . RPAR
    (58) expresion -> expresion . comparador expresion
    (76) statement -> expresion .
    (83) comparador -> . IGUAL IGUAL
    (84) comparador -> . MENOR
    (85) comparador -> . MAYOR
    (86) comparador -> . MENOR IGUAL
    (87) comparador -> . MAYOR IGUAL
    (88) comparador -> . EXCLAMACION IGUAL

  ! shift/reduce conflict for RPAR resolved as shift
    RPAR            shift and go to state 68
    IGUAL           shift and go to state 70
    MENOR           shift and go to state 71
    MAYOR           shift and go to state 72
    EXCLAMACION     shift and go to state 73

  ! RPAR            [ reduce using rule 76 (statement -> expresion .) ]

    comparador                     shift and go to state 69

state 38

    (125) asignarvalorobjeto -> LPAR statement . RPAR

    RPAR            shift and go to state 74


state 39

    (82) expresion -> valor .

    RPAR            reduce using rule 82 (expresion -> valor .)
    IGUAL           reduce using rule 82 (expresion -> valor .)
    MENOR           reduce using rule 82 (expresion -> valor .)
    MAYOR           reduce using rule 82 (expresion -> valor .)
    EXCLAMACION     reduce using rule 82 (expresion -> valor .)


state 40

    (77) statement -> EXCLAMACION . boolean
    (78) statement -> EXCLAMACION . LPAR expresion RPAR
    (79) statement -> EXCLAMACION . IDENTIFICADOR
    (80) boolean -> . TRUE
    (81) boolean -> . FALSE

    LPAR            shift and go to state 76
    IDENTIFICADOR   shift and go to state 77
    TRUE            shift and go to state 78
    FALSE           shift and go to state 79

    boolean                        shift and go to state 75

state 41

    (56) valor -> IDENTIFICADOR .

    RPAR            reduce using rule 56 (valor -> IDENTIFICADOR .)
    IGUAL           reduce using rule 56 (valor -> IDENTIFICADOR .)
    MENOR           reduce using rule 56 (valor -> IDENTIFICADOR .)
    MAYOR           reduce using rule 56 (valor -> IDENTIFICADOR .)
    EXCLAMACION     reduce using rule 56 (valor -> IDENTIFICADOR .)
    PUNTOCOMA       reduce using rule 56 (valor -> IDENTIFICADOR .)
    $end            reduce using rule 56 (valor -> IDENTIFICADOR .)
    LLAVER          reduce using rule 56 (valor -> IDENTIFICADOR .)
    AUTO            reduce using rule 56 (valor -> IDENTIFICADOR .)
    CHAR            reduce using rule 56 (valor -> IDENTIFICADOR .)
    WHILE           reduce using rule 56 (valor -> IDENTIFICADOR .)
    IF              reduce using rule 56 (valor -> IDENTIFICADOR .)
    FOR             reduce using rule 56 (valor -> IDENTIFICADOR .)
    PRINT           reduce using rule 56 (valor -> IDENTIFICADOR .)
    COUT            reduce using rule 56 (valor -> IDENTIFICADOR .)
    INT             reduce using rule 56 (valor -> IDENTIFICADOR .)
    FLOAT           reduce using rule 56 (valor -> IDENTIFICADOR .)
    LONG            reduce using rule 56 (valor -> IDENTIFICADOR .)
    VOID            reduce using rule 56 (valor -> IDENTIFICADOR .)
    RETURN          reduce using rule 56 (valor -> IDENTIFICADOR .)
    COMMA           reduce using rule 56 (valor -> IDENTIFICADOR .)


state 42

    (50) valor -> ENTERO .

    RPAR            reduce using rule 50 (valor -> ENTERO .)
    IGUAL           reduce using rule 50 (valor -> ENTERO .)
    MENOR           reduce using rule 50 (valor -> ENTERO .)
    MAYOR           reduce using rule 50 (valor -> ENTERO .)
    EXCLAMACION     reduce using rule 50 (valor -> ENTERO .)
    PUNTOCOMA       reduce using rule 50 (valor -> ENTERO .)
    $end            reduce using rule 50 (valor -> ENTERO .)
    LLAVER          reduce using rule 50 (valor -> ENTERO .)
    AUTO            reduce using rule 50 (valor -> ENTERO .)
    CHAR            reduce using rule 50 (valor -> ENTERO .)
    WHILE           reduce using rule 50 (valor -> ENTERO .)
    IF              reduce using rule 50 (valor -> ENTERO .)
    FOR             reduce using rule 50 (valor -> ENTERO .)
    PRINT           reduce using rule 50 (valor -> ENTERO .)
    COUT            reduce using rule 50 (valor -> ENTERO .)
    INT             reduce using rule 50 (valor -> ENTERO .)
    FLOAT           reduce using rule 50 (valor -> ENTERO .)
    LONG            reduce using rule 50 (valor -> ENTERO .)
    VOID            reduce using rule 50 (valor -> ENTERO .)
    RETURN          reduce using rule 50 (valor -> ENTERO .)
    COMMA           reduce using rule 50 (valor -> ENTERO .)


state 43

    (51) valor -> FLOTANTE .

    RPAR            reduce using rule 51 (valor -> FLOTANTE .)
    IGUAL           reduce using rule 51 (valor -> FLOTANTE .)
    MENOR           reduce using rule 51 (valor -> FLOTANTE .)
    MAYOR           reduce using rule 51 (valor -> FLOTANTE .)
    EXCLAMACION     reduce using rule 51 (valor -> FLOTANTE .)
    PUNTOCOMA       reduce using rule 51 (valor -> FLOTANTE .)
    $end            reduce using rule 51 (valor -> FLOTANTE .)
    LLAVER          reduce using rule 51 (valor -> FLOTANTE .)
    AUTO            reduce using rule 51 (valor -> FLOTANTE .)
    CHAR            reduce using rule 51 (valor -> FLOTANTE .)
    WHILE           reduce using rule 51 (valor -> FLOTANTE .)
    IF              reduce using rule 51 (valor -> FLOTANTE .)
    FOR             reduce using rule 51 (valor -> FLOTANTE .)
    PRINT           reduce using rule 51 (valor -> FLOTANTE .)
    COUT            reduce using rule 51 (valor -> FLOTANTE .)
    INT             reduce using rule 51 (valor -> FLOTANTE .)
    FLOAT           reduce using rule 51 (valor -> FLOTANTE .)
    LONG            reduce using rule 51 (valor -> FLOTANTE .)
    VOID            reduce using rule 51 (valor -> FLOTANTE .)
    RETURN          reduce using rule 51 (valor -> FLOTANTE .)
    COMMA           reduce using rule 51 (valor -> FLOTANTE .)


state 44

    (52) valor -> CHARACTER .

    RPAR            reduce using rule 52 (valor -> CHARACTER .)
    IGUAL           reduce using rule 52 (valor -> CHARACTER .)
    MENOR           reduce using rule 52 (valor -> CHARACTER .)
    MAYOR           reduce using rule 52 (valor -> CHARACTER .)
    EXCLAMACION     reduce using rule 52 (valor -> CHARACTER .)
    PUNTOCOMA       reduce using rule 52 (valor -> CHARACTER .)
    $end            reduce using rule 52 (valor -> CHARACTER .)
    LLAVER          reduce using rule 52 (valor -> CHARACTER .)
    AUTO            reduce using rule 52 (valor -> CHARACTER .)
    CHAR            reduce using rule 52 (valor -> CHARACTER .)
    WHILE           reduce using rule 52 (valor -> CHARACTER .)
    IF              reduce using rule 52 (valor -> CHARACTER .)
    FOR             reduce using rule 52 (valor -> CHARACTER .)
    PRINT           reduce using rule 52 (valor -> CHARACTER .)
    COUT            reduce using rule 52 (valor -> CHARACTER .)
    INT             reduce using rule 52 (valor -> CHARACTER .)
    FLOAT           reduce using rule 52 (valor -> CHARACTER .)
    LONG            reduce using rule 52 (valor -> CHARACTER .)
    VOID            reduce using rule 52 (valor -> CHARACTER .)
    RETURN          reduce using rule 52 (valor -> CHARACTER .)
    COMMA           reduce using rule 52 (valor -> CHARACTER .)


state 45

    (53) valor -> STRING .

    RPAR            reduce using rule 53 (valor -> STRING .)
    IGUAL           reduce using rule 53 (valor -> STRING .)
    MENOR           reduce using rule 53 (valor -> STRING .)
    MAYOR           reduce using rule 53 (valor -> STRING .)
    EXCLAMACION     reduce using rule 53 (valor -> STRING .)
    PUNTOCOMA       reduce using rule 53 (valor -> STRING .)
    $end            reduce using rule 53 (valor -> STRING .)
    LLAVER          reduce using rule 53 (valor -> STRING .)
    AUTO            reduce using rule 53 (valor -> STRING .)
    CHAR            reduce using rule 53 (valor -> STRING .)
    WHILE           reduce using rule 53 (valor -> STRING .)
    IF              reduce using rule 53 (valor -> STRING .)
    FOR             reduce using rule 53 (valor -> STRING .)
    PRINT           reduce using rule 53 (valor -> STRING .)
    COUT            reduce using rule 53 (valor -> STRING .)
    INT             reduce using rule 53 (valor -> STRING .)
    FLOAT           reduce using rule 53 (valor -> STRING .)
    LONG            reduce using rule 53 (valor -> STRING .)
    VOID            reduce using rule 53 (valor -> STRING .)
    RETURN          reduce using rule 53 (valor -> STRING .)
    COMMA           reduce using rule 53 (valor -> STRING .)


state 46

    (54) valor -> TRUE .

    RPAR            reduce using rule 54 (valor -> TRUE .)
    IGUAL           reduce using rule 54 (valor -> TRUE .)
    MENOR           reduce using rule 54 (valor -> TRUE .)
    MAYOR           reduce using rule 54 (valor -> TRUE .)
    EXCLAMACION     reduce using rule 54 (valor -> TRUE .)
    PUNTOCOMA       reduce using rule 54 (valor -> TRUE .)
    $end            reduce using rule 54 (valor -> TRUE .)
    LLAVER          reduce using rule 54 (valor -> TRUE .)
    AUTO            reduce using rule 54 (valor -> TRUE .)
    CHAR            reduce using rule 54 (valor -> TRUE .)
    WHILE           reduce using rule 54 (valor -> TRUE .)
    IF              reduce using rule 54 (valor -> TRUE .)
    FOR             reduce using rule 54 (valor -> TRUE .)
    PRINT           reduce using rule 54 (valor -> TRUE .)
    COUT            reduce using rule 54 (valor -> TRUE .)
    INT             reduce using rule 54 (valor -> TRUE .)
    FLOAT           reduce using rule 54 (valor -> TRUE .)
    LONG            reduce using rule 54 (valor -> TRUE .)
    VOID            reduce using rule 54 (valor -> TRUE .)
    RETURN          reduce using rule 54 (valor -> TRUE .)
    COMMA           reduce using rule 54 (valor -> TRUE .)


state 47

    (55) valor -> FALSE .

    RPAR            reduce using rule 55 (valor -> FALSE .)
    IGUAL           reduce using rule 55 (valor -> FALSE .)
    MENOR           reduce using rule 55 (valor -> FALSE .)
    MAYOR           reduce using rule 55 (valor -> FALSE .)
    EXCLAMACION     reduce using rule 55 (valor -> FALSE .)
    PUNTOCOMA       reduce using rule 55 (valor -> FALSE .)
    $end            reduce using rule 55 (valor -> FALSE .)
    LLAVER          reduce using rule 55 (valor -> FALSE .)
    AUTO            reduce using rule 55 (valor -> FALSE .)
    CHAR            reduce using rule 55 (valor -> FALSE .)
    WHILE           reduce using rule 55 (valor -> FALSE .)
    IF              reduce using rule 55 (valor -> FALSE .)
    FOR             reduce using rule 55 (valor -> FALSE .)
    PRINT           reduce using rule 55 (valor -> FALSE .)
    COUT            reduce using rule 55 (valor -> FALSE .)
    INT             reduce using rule 55 (valor -> FALSE .)
    FLOAT           reduce using rule 55 (valor -> FALSE .)
    LONG            reduce using rule 55 (valor -> FALSE .)
    VOID            reduce using rule 55 (valor -> FALSE .)
    RETURN          reduce using rule 55 (valor -> FALSE .)
    COMMA           reduce using rule 55 (valor -> FALSE .)


state 48

    (60) expresionif -> IF LPAR . condicionif RPAR conllaves expresionpos
    (61) expresionif -> IF LPAR . condicionif RPAR sinllaves expresionpos
    (73) condicionif -> . initcondicion
    (74) condicionif -> . statement
    (75) initcondicion -> . varblock statement
    (76) statement -> . expresion
    (77) statement -> . EXCLAMACION boolean
    (78) statement -> . EXCLAMACION LPAR expresion RPAR
    (79) statement -> . EXCLAMACION IDENTIFICADOR
    (38) varblock -> . varblock variable
    (39) varblock -> .
    (58) expresion -> . expresion comparador expresion
    (82) expresion -> . valor
    (50) valor -> . ENTERO
    (51) valor -> . FLOTANTE
    (52) valor -> . CHARACTER
    (53) valor -> . STRING
    (54) valor -> . TRUE
    (55) valor -> . FALSE
    (56) valor -> . IDENTIFICADOR

  ! shift/reduce conflict for EXCLAMACION resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for FLOTANTE resolved as shift
  ! shift/reduce conflict for CHARACTER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for IDENTIFICADOR resolved as shift
    EXCLAMACION     shift and go to state 40
    AUTO            reduce using rule 39 (varblock -> .)
    CHAR            reduce using rule 39 (varblock -> .)
    INT             reduce using rule 39 (varblock -> .)
    FLOAT           reduce using rule 39 (varblock -> .)
    LONG            reduce using rule 39 (varblock -> .)
    ENTERO          shift and go to state 42
    FLOTANTE        shift and go to state 43
    CHARACTER       shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    IDENTIFICADOR   shift and go to state 41

  ! EXCLAMACION     [ reduce using rule 39 (varblock -> .) ]
  ! ENTERO          [ reduce using rule 39 (varblock -> .) ]
  ! FLOTANTE        [ reduce using rule 39 (varblock -> .) ]
  ! CHARACTER       [ reduce using rule 39 (varblock -> .) ]
  ! STRING          [ reduce using rule 39 (varblock -> .) ]
  ! TRUE            [ reduce using rule 39 (varblock -> .) ]
  ! FALSE           [ reduce using rule 39 (varblock -> .) ]
  ! IDENTIFICADOR   [ reduce using rule 39 (varblock -> .) ]

    condicionif                    shift and go to state 80
    initcondicion                  shift and go to state 81
    statement                      shift and go to state 82
    varblock                       shift and go to state 83
    expresion                      shift and go to state 67
    valor                          shift and go to state 39

state 49

    (105) claseimplementacion -> CLASS IDENTIFICADOR . LLAVEL bloqueclase LLAVER

    LLAVEL          shift and go to state 84


state 50

    (122) creacionobjeto -> IDENTIFICADOR IDENTIFICADOR . PUNTOCOMA

    PUNTOCOMA       shift and go to state 85


state 51

    (123) asignarvalorobjeto -> IDENTIFICADOR PUNTO . IDENTIFICADOR IGUAL valor
    (127) usarfuncionobjeto -> IDENTIFICADOR PUNTO . IDENTIFICADOR LPAR parametrosfuncion RPAR PUNTOCOMA

    IDENTIFICADOR   shift and go to state 86


state 52

    (99) for -> FOR LPAR . initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER
    (89) initfor -> . tipo IDENTIFICADOR IGUAL valor
    (16) tipo -> . INT
    (17) tipo -> . FLOAT
    (18) tipo -> . LONG
    (19) tipo -> . AUTO
    (20) tipo -> . CHAR
    (21) tipo -> . VOID

    INT             shift and go to state 89
    FLOAT           shift and go to state 90
    LONG            shift and go to state 91
    AUTO            shift and go to state 92
    CHAR            shift and go to state 93
    VOID            shift and go to state 94

    initfor                        shift and go to state 87
    tipo                           shift and go to state 88

state 53

    (100) arraydeclaration -> tipo id . PUNTOCOMA
    (101) arraydeclaration -> tipo id . IGUAL LLAVEL arraydata LLAVER PUNTOCOMA
    (102) arraydeclaration -> tipo id . IGUAL LLAVEL LLAVER PUNTOCOMA

    PUNTOCOMA       shift and go to state 95
    IGUAL           shift and go to state 96


state 54

    (111) funcionclaseimpl -> tipo IDENTIFICADOR . LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER
    (14) id -> IDENTIFICADOR .
    (15) id -> IDENTIFICADOR . CORCHETEL ENTERO CORCHETER

    LPAR            shift and go to state 97
    PUNTOCOMA       reduce using rule 14 (id -> IDENTIFICADOR .)
    IGUAL           reduce using rule 14 (id -> IDENTIFICADOR .)
    CORCHETEL       shift and go to state 62


state 55

    (112) funcionclaseimpl -> VOID IDENTIFICADOR . LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER

    LPAR            shift and go to state 98


state 56

    (126) asignarvalorobjeto -> EXCLAMACION LPAR . statement RPAR
    (76) statement -> . expresion
    (77) statement -> . EXCLAMACION boolean
    (78) statement -> . EXCLAMACION LPAR expresion RPAR
    (79) statement -> . EXCLAMACION IDENTIFICADOR
    (58) expresion -> . expresion comparador expresion
    (82) expresion -> . valor
    (50) valor -> . ENTERO
    (51) valor -> . FLOTANTE
    (52) valor -> . CHARACTER
    (53) valor -> . STRING
    (54) valor -> . TRUE
    (55) valor -> . FALSE
    (56) valor -> . IDENTIFICADOR

    EXCLAMACION     shift and go to state 40
    ENTERO          shift and go to state 42
    FLOTANTE        shift and go to state 43
    CHARACTER       shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    IDENTIFICADOR   shift and go to state 41

    statement                      shift and go to state 99
    expresion                      shift and go to state 67
    valor                          shift and go to state 39

state 57

    (59) struct -> STRUCT IDENTIFICADOR . LLAVEL varblock LLAVER IDENTIFICADOR PUNTOCOMA

    LLAVEL          shift and go to state 100


state 58

    (22) imprimir -> PRINT LPAR . valor RPAR
    (50) valor -> . ENTERO
    (51) valor -> . FLOTANTE
    (52) valor -> . CHARACTER
    (53) valor -> . STRING
    (54) valor -> . TRUE
    (55) valor -> . FALSE
    (56) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 42
    FLOTANTE        shift and go to state 43
    CHARACTER       shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    IDENTIFICADOR   shift and go to state 41

    valor                          shift and go to state 101

state 59

    (23) imprimir -> COUT MENOR . MENOR valor

    MENOR           shift and go to state 102


state 60

    (40) variable -> numerotipo id IGUAL . numero PUNTOCOMA
    (48) numero -> . ENTERO
    (49) numero -> . FLOTANTE

    ENTERO          shift and go to state 104
    FLOTANTE        shift and go to state 105

    numero                         shift and go to state 103

state 61

    (41) variable -> numerotipo id PUNTOCOMA .

    $end            reduce using rule 41 (variable -> numerotipo id PUNTOCOMA .)
    EXCLAMACION     reduce using rule 41 (variable -> numerotipo id PUNTOCOMA .)
    AUTO            reduce using rule 41 (variable -> numerotipo id PUNTOCOMA .)
    CHAR            reduce using rule 41 (variable -> numerotipo id PUNTOCOMA .)
    INT             reduce using rule 41 (variable -> numerotipo id PUNTOCOMA .)
    FLOAT           reduce using rule 41 (variable -> numerotipo id PUNTOCOMA .)
    LONG            reduce using rule 41 (variable -> numerotipo id PUNTOCOMA .)
    ENTERO          reduce using rule 41 (variable -> numerotipo id PUNTOCOMA .)
    FLOTANTE        reduce using rule 41 (variable -> numerotipo id PUNTOCOMA .)
    CHARACTER       reduce using rule 41 (variable -> numerotipo id PUNTOCOMA .)
    STRING          reduce using rule 41 (variable -> numerotipo id PUNTOCOMA .)
    TRUE            reduce using rule 41 (variable -> numerotipo id PUNTOCOMA .)
    FALSE           reduce using rule 41 (variable -> numerotipo id PUNTOCOMA .)
    IDENTIFICADOR   reduce using rule 41 (variable -> numerotipo id PUNTOCOMA .)
    ELSE            reduce using rule 41 (variable -> numerotipo id PUNTOCOMA .)
    LLAVER          reduce using rule 41 (variable -> numerotipo id PUNTOCOMA .)
    WHILE           reduce using rule 41 (variable -> numerotipo id PUNTOCOMA .)
    IF              reduce using rule 41 (variable -> numerotipo id PUNTOCOMA .)
    FOR             reduce using rule 41 (variable -> numerotipo id PUNTOCOMA .)
    PRINT           reduce using rule 41 (variable -> numerotipo id PUNTOCOMA .)
    COUT            reduce using rule 41 (variable -> numerotipo id PUNTOCOMA .)
    VOID            reduce using rule 41 (variable -> numerotipo id PUNTOCOMA .)
    RETURN          reduce using rule 41 (variable -> numerotipo id PUNTOCOMA .)


state 62

    (15) id -> IDENTIFICADOR CORCHETEL . ENTERO CORCHETER

    ENTERO          shift and go to state 106


state 63

    (42) variable -> AUTO id IGUAL . valor PUNTOCOMA
    (50) valor -> . ENTERO
    (51) valor -> . FLOTANTE
    (52) valor -> . CHARACTER
    (53) valor -> . STRING
    (54) valor -> . TRUE
    (55) valor -> . FALSE
    (56) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 42
    FLOTANTE        shift and go to state 43
    CHARACTER       shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    IDENTIFICADOR   shift and go to state 41

    valor                          shift and go to state 107

state 64

    (43) variable -> AUTO id PUNTOCOMA .

    $end            reduce using rule 43 (variable -> AUTO id PUNTOCOMA .)
    EXCLAMACION     reduce using rule 43 (variable -> AUTO id PUNTOCOMA .)
    AUTO            reduce using rule 43 (variable -> AUTO id PUNTOCOMA .)
    CHAR            reduce using rule 43 (variable -> AUTO id PUNTOCOMA .)
    INT             reduce using rule 43 (variable -> AUTO id PUNTOCOMA .)
    FLOAT           reduce using rule 43 (variable -> AUTO id PUNTOCOMA .)
    LONG            reduce using rule 43 (variable -> AUTO id PUNTOCOMA .)
    ENTERO          reduce using rule 43 (variable -> AUTO id PUNTOCOMA .)
    FLOTANTE        reduce using rule 43 (variable -> AUTO id PUNTOCOMA .)
    CHARACTER       reduce using rule 43 (variable -> AUTO id PUNTOCOMA .)
    STRING          reduce using rule 43 (variable -> AUTO id PUNTOCOMA .)
    TRUE            reduce using rule 43 (variable -> AUTO id PUNTOCOMA .)
    FALSE           reduce using rule 43 (variable -> AUTO id PUNTOCOMA .)
    IDENTIFICADOR   reduce using rule 43 (variable -> AUTO id PUNTOCOMA .)
    ELSE            reduce using rule 43 (variable -> AUTO id PUNTOCOMA .)
    LLAVER          reduce using rule 43 (variable -> AUTO id PUNTOCOMA .)
    WHILE           reduce using rule 43 (variable -> AUTO id PUNTOCOMA .)
    IF              reduce using rule 43 (variable -> AUTO id PUNTOCOMA .)
    FOR             reduce using rule 43 (variable -> AUTO id PUNTOCOMA .)
    PRINT           reduce using rule 43 (variable -> AUTO id PUNTOCOMA .)
    COUT            reduce using rule 43 (variable -> AUTO id PUNTOCOMA .)
    VOID            reduce using rule 43 (variable -> AUTO id PUNTOCOMA .)
    RETURN          reduce using rule 43 (variable -> AUTO id PUNTOCOMA .)


state 65

    (44) variable -> CHAR id IGUAL . CHARACTER PUNTOCOMA

    CHARACTER       shift and go to state 108


state 66

    (57) while -> WHILE LPAR statement . RPAR LLAVEL bodyblock LLAVER

    RPAR            shift and go to state 109


state 67

    (76) statement -> expresion .
    (58) expresion -> expresion . comparador expresion
    (83) comparador -> . IGUAL IGUAL
    (84) comparador -> . MENOR
    (85) comparador -> . MAYOR
    (86) comparador -> . MENOR IGUAL
    (87) comparador -> . MAYOR IGUAL
    (88) comparador -> . EXCLAMACION IGUAL

    RPAR            reduce using rule 76 (statement -> expresion .)
    IGUAL           shift and go to state 70
    MENOR           shift and go to state 71
    MAYOR           shift and go to state 72
    EXCLAMACION     shift and go to state 73

    comparador                     shift and go to state 69

state 68

    (124) asignarvalorobjeto -> LPAR expresion RPAR .

    $end            reduce using rule 124 (asignarvalorobjeto -> LPAR expresion RPAR .)


state 69

    (58) expresion -> expresion comparador . expresion
    (58) expresion -> . expresion comparador expresion
    (82) expresion -> . valor
    (50) valor -> . ENTERO
    (51) valor -> . FLOTANTE
    (52) valor -> . CHARACTER
    (53) valor -> . STRING
    (54) valor -> . TRUE
    (55) valor -> . FALSE
    (56) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 42
    FLOTANTE        shift and go to state 43
    CHARACTER       shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    IDENTIFICADOR   shift and go to state 41

    expresion                      shift and go to state 110
    valor                          shift and go to state 39

state 70

    (83) comparador -> IGUAL . IGUAL

    IGUAL           shift and go to state 111


state 71

    (84) comparador -> MENOR .
    (86) comparador -> MENOR . IGUAL

    ENTERO          reduce using rule 84 (comparador -> MENOR .)
    FLOTANTE        reduce using rule 84 (comparador -> MENOR .)
    CHARACTER       reduce using rule 84 (comparador -> MENOR .)
    STRING          reduce using rule 84 (comparador -> MENOR .)
    TRUE            reduce using rule 84 (comparador -> MENOR .)
    FALSE           reduce using rule 84 (comparador -> MENOR .)
    IDENTIFICADOR   reduce using rule 84 (comparador -> MENOR .)
    IGUAL           shift and go to state 112


state 72

    (85) comparador -> MAYOR .
    (87) comparador -> MAYOR . IGUAL

    ENTERO          reduce using rule 85 (comparador -> MAYOR .)
    FLOTANTE        reduce using rule 85 (comparador -> MAYOR .)
    CHARACTER       reduce using rule 85 (comparador -> MAYOR .)
    STRING          reduce using rule 85 (comparador -> MAYOR .)
    TRUE            reduce using rule 85 (comparador -> MAYOR .)
    FALSE           reduce using rule 85 (comparador -> MAYOR .)
    IDENTIFICADOR   reduce using rule 85 (comparador -> MAYOR .)
    IGUAL           shift and go to state 113


state 73

    (88) comparador -> EXCLAMACION . IGUAL

    IGUAL           shift and go to state 114


state 74

    (125) asignarvalorobjeto -> LPAR statement RPAR .

    $end            reduce using rule 125 (asignarvalorobjeto -> LPAR statement RPAR .)


state 75

    (77) statement -> EXCLAMACION boolean .

    RPAR            reduce using rule 77 (statement -> EXCLAMACION boolean .)


state 76

    (78) statement -> EXCLAMACION LPAR . expresion RPAR
    (58) expresion -> . expresion comparador expresion
    (82) expresion -> . valor
    (50) valor -> . ENTERO
    (51) valor -> . FLOTANTE
    (52) valor -> . CHARACTER
    (53) valor -> . STRING
    (54) valor -> . TRUE
    (55) valor -> . FALSE
    (56) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 42
    FLOTANTE        shift and go to state 43
    CHARACTER       shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    IDENTIFICADOR   shift and go to state 41

    expresion                      shift and go to state 115
    valor                          shift and go to state 39

state 77

    (79) statement -> EXCLAMACION IDENTIFICADOR .

    RPAR            reduce using rule 79 (statement -> EXCLAMACION IDENTIFICADOR .)


state 78

    (80) boolean -> TRUE .

    RPAR            reduce using rule 80 (boolean -> TRUE .)


state 79

    (81) boolean -> FALSE .

    RPAR            reduce using rule 81 (boolean -> FALSE .)


state 80

    (60) expresionif -> IF LPAR condicionif . RPAR conllaves expresionpos
    (61) expresionif -> IF LPAR condicionif . RPAR sinllaves expresionpos

    RPAR            shift and go to state 116


state 81

    (73) condicionif -> initcondicion .

    RPAR            reduce using rule 73 (condicionif -> initcondicion .)


state 82

    (74) condicionif -> statement .

    RPAR            reduce using rule 74 (condicionif -> statement .)


state 83

    (75) initcondicion -> varblock . statement
    (38) varblock -> varblock . variable
    (76) statement -> . expresion
    (77) statement -> . EXCLAMACION boolean
    (78) statement -> . EXCLAMACION LPAR expresion RPAR
    (79) statement -> . EXCLAMACION IDENTIFICADOR
    (40) variable -> . numerotipo id IGUAL numero PUNTOCOMA
    (41) variable -> . numerotipo id PUNTOCOMA
    (42) variable -> . AUTO id IGUAL valor PUNTOCOMA
    (43) variable -> . AUTO id PUNTOCOMA
    (44) variable -> . CHAR id IGUAL CHARACTER PUNTOCOMA
    (58) expresion -> . expresion comparador expresion
    (82) expresion -> . valor
    (45) numerotipo -> . INT
    (46) numerotipo -> . FLOAT
    (47) numerotipo -> . LONG
    (50) valor -> . ENTERO
    (51) valor -> . FLOTANTE
    (52) valor -> . CHARACTER
    (53) valor -> . STRING
    (54) valor -> . TRUE
    (55) valor -> . FALSE
    (56) valor -> . IDENTIFICADOR

    EXCLAMACION     shift and go to state 40
    AUTO            shift and go to state 119
    CHAR            shift and go to state 120
    INT             shift and go to state 121
    FLOAT           shift and go to state 122
    LONG            shift and go to state 123
    ENTERO          shift and go to state 42
    FLOTANTE        shift and go to state 43
    CHARACTER       shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    IDENTIFICADOR   shift and go to state 41

    statement                      shift and go to state 117
    variable                       shift and go to state 118
    expresion                      shift and go to state 67
    numerotipo                     shift and go to state 14
    valor                          shift and go to state 39

state 84

    (105) claseimplementacion -> CLASS IDENTIFICADOR LLAVEL . bloqueclase LLAVER
    (106) bloqueclase -> . bloqueclase definicion
    (107) bloqueclase -> . bloqueclase funcionclaseimpl
    (108) bloqueclase -> .

    LLAVER          reduce using rule 108 (bloqueclase -> .)
    VOID            reduce using rule 108 (bloqueclase -> .)
    INT             reduce using rule 108 (bloqueclase -> .)
    FLOAT           reduce using rule 108 (bloqueclase -> .)
    LONG            reduce using rule 108 (bloqueclase -> .)
    AUTO            reduce using rule 108 (bloqueclase -> .)
    CHAR            reduce using rule 108 (bloqueclase -> .)

    bloqueclase                    shift and go to state 124

state 85

    (122) creacionobjeto -> IDENTIFICADOR IDENTIFICADOR PUNTOCOMA .

    $end            reduce using rule 122 (creacionobjeto -> IDENTIFICADOR IDENTIFICADOR PUNTOCOMA .)


state 86

    (123) asignarvalorobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR . IGUAL valor
    (127) usarfuncionobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR . LPAR parametrosfuncion RPAR PUNTOCOMA

    IGUAL           shift and go to state 125
    LPAR            shift and go to state 126


state 87

    (99) for -> FOR LPAR initfor . PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER

    PUNTOCOMA       shift and go to state 127


state 88

    (89) initfor -> tipo . IDENTIFICADOR IGUAL valor

    IDENTIFICADOR   shift and go to state 128


state 89

    (16) tipo -> INT .

    IDENTIFICADOR   reduce using rule 16 (tipo -> INT .)


state 90

    (17) tipo -> FLOAT .

    IDENTIFICADOR   reduce using rule 17 (tipo -> FLOAT .)


state 91

    (18) tipo -> LONG .

    IDENTIFICADOR   reduce using rule 18 (tipo -> LONG .)


state 92

    (19) tipo -> AUTO .

    IDENTIFICADOR   reduce using rule 19 (tipo -> AUTO .)


state 93

    (20) tipo -> CHAR .

    IDENTIFICADOR   reduce using rule 20 (tipo -> CHAR .)


state 94

    (21) tipo -> VOID .

    IDENTIFICADOR   reduce using rule 21 (tipo -> VOID .)


state 95

    (100) arraydeclaration -> tipo id PUNTOCOMA .

    $end            reduce using rule 100 (arraydeclaration -> tipo id PUNTOCOMA .)
    LLAVER          reduce using rule 100 (arraydeclaration -> tipo id PUNTOCOMA .)
    AUTO            reduce using rule 100 (arraydeclaration -> tipo id PUNTOCOMA .)
    CHAR            reduce using rule 100 (arraydeclaration -> tipo id PUNTOCOMA .)
    WHILE           reduce using rule 100 (arraydeclaration -> tipo id PUNTOCOMA .)
    IF              reduce using rule 100 (arraydeclaration -> tipo id PUNTOCOMA .)
    FOR             reduce using rule 100 (arraydeclaration -> tipo id PUNTOCOMA .)
    PRINT           reduce using rule 100 (arraydeclaration -> tipo id PUNTOCOMA .)
    COUT            reduce using rule 100 (arraydeclaration -> tipo id PUNTOCOMA .)
    INT             reduce using rule 100 (arraydeclaration -> tipo id PUNTOCOMA .)
    FLOAT           reduce using rule 100 (arraydeclaration -> tipo id PUNTOCOMA .)
    LONG            reduce using rule 100 (arraydeclaration -> tipo id PUNTOCOMA .)
    VOID            reduce using rule 100 (arraydeclaration -> tipo id PUNTOCOMA .)
    RETURN          reduce using rule 100 (arraydeclaration -> tipo id PUNTOCOMA .)


state 96

    (101) arraydeclaration -> tipo id IGUAL . LLAVEL arraydata LLAVER PUNTOCOMA
    (102) arraydeclaration -> tipo id IGUAL . LLAVEL LLAVER PUNTOCOMA

    LLAVEL          shift and go to state 129


state 97

    (111) funcionclaseimpl -> tipo IDENTIFICADOR LPAR . parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER
    (114) parametrosimplementacion -> . tipo IDENTIFICADOR masparametrosimplementacion
    (115) parametrosimplementacion -> .
    (16) tipo -> . INT
    (17) tipo -> . FLOAT
    (18) tipo -> . LONG
    (19) tipo -> . AUTO
    (20) tipo -> . CHAR
    (21) tipo -> . VOID

    RPAR            reduce using rule 115 (parametrosimplementacion -> .)
    INT             shift and go to state 89
    FLOAT           shift and go to state 90
    LONG            shift and go to state 91
    AUTO            shift and go to state 92
    CHAR            shift and go to state 93
    VOID            shift and go to state 94

    tipo                           shift and go to state 130
    parametrosimplementacion       shift and go to state 131

state 98

    (112) funcionclaseimpl -> VOID IDENTIFICADOR LPAR . parametrosimplementacion RPAR LLAVEL bodyblock LLAVER
    (114) parametrosimplementacion -> . tipo IDENTIFICADOR masparametrosimplementacion
    (115) parametrosimplementacion -> .
    (16) tipo -> . INT
    (17) tipo -> . FLOAT
    (18) tipo -> . LONG
    (19) tipo -> . AUTO
    (20) tipo -> . CHAR
    (21) tipo -> . VOID

    RPAR            reduce using rule 115 (parametrosimplementacion -> .)
    INT             shift and go to state 89
    FLOAT           shift and go to state 90
    LONG            shift and go to state 91
    AUTO            shift and go to state 92
    CHAR            shift and go to state 93
    VOID            shift and go to state 94

    parametrosimplementacion       shift and go to state 132
    tipo                           shift and go to state 130

state 99

    (126) asignarvalorobjeto -> EXCLAMACION LPAR statement . RPAR

    RPAR            shift and go to state 133


state 100

    (59) struct -> STRUCT IDENTIFICADOR LLAVEL . varblock LLAVER IDENTIFICADOR PUNTOCOMA
    (38) varblock -> . varblock variable
    (39) varblock -> .

    LLAVER          reduce using rule 39 (varblock -> .)
    AUTO            reduce using rule 39 (varblock -> .)
    CHAR            reduce using rule 39 (varblock -> .)
    INT             reduce using rule 39 (varblock -> .)
    FLOAT           reduce using rule 39 (varblock -> .)
    LONG            reduce using rule 39 (varblock -> .)

    varblock                       shift and go to state 134

state 101

    (22) imprimir -> PRINT LPAR valor . RPAR

    RPAR            shift and go to state 135


state 102

    (23) imprimir -> COUT MENOR MENOR . valor
    (50) valor -> . ENTERO
    (51) valor -> . FLOTANTE
    (52) valor -> . CHARACTER
    (53) valor -> . STRING
    (54) valor -> . TRUE
    (55) valor -> . FALSE
    (56) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 42
    FLOTANTE        shift and go to state 43
    CHARACTER       shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    IDENTIFICADOR   shift and go to state 41

    valor                          shift and go to state 136

state 103

    (40) variable -> numerotipo id IGUAL numero . PUNTOCOMA

    PUNTOCOMA       shift and go to state 137


state 104

    (48) numero -> ENTERO .

    PUNTOCOMA       reduce using rule 48 (numero -> ENTERO .)


state 105

    (49) numero -> FLOTANTE .

    PUNTOCOMA       reduce using rule 49 (numero -> FLOTANTE .)


state 106

    (15) id -> IDENTIFICADOR CORCHETEL ENTERO . CORCHETER

    CORCHETER       shift and go to state 138


state 107

    (42) variable -> AUTO id IGUAL valor . PUNTOCOMA

    PUNTOCOMA       shift and go to state 139


state 108

    (44) variable -> CHAR id IGUAL CHARACTER . PUNTOCOMA

    PUNTOCOMA       shift and go to state 140


state 109

    (57) while -> WHILE LPAR statement RPAR . LLAVEL bodyblock LLAVER

    LLAVEL          shift and go to state 141


state 110

    (58) expresion -> expresion comparador expresion .
    (58) expresion -> expresion . comparador expresion
    (83) comparador -> . IGUAL IGUAL
    (84) comparador -> . MENOR
    (85) comparador -> . MAYOR
    (86) comparador -> . MENOR IGUAL
    (87) comparador -> . MAYOR IGUAL
    (88) comparador -> . EXCLAMACION IGUAL

  ! shift/reduce conflict for IGUAL resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for EXCLAMACION resolved as shift
    RPAR            reduce using rule 58 (expresion -> expresion comparador expresion .)
    IGUAL           shift and go to state 70
    MENOR           shift and go to state 71
    MAYOR           shift and go to state 72
    EXCLAMACION     shift and go to state 73

  ! IGUAL           [ reduce using rule 58 (expresion -> expresion comparador expresion .) ]
  ! MENOR           [ reduce using rule 58 (expresion -> expresion comparador expresion .) ]
  ! MAYOR           [ reduce using rule 58 (expresion -> expresion comparador expresion .) ]
  ! EXCLAMACION     [ reduce using rule 58 (expresion -> expresion comparador expresion .) ]

    comparador                     shift and go to state 69

state 111

    (83) comparador -> IGUAL IGUAL .

    ENTERO          reduce using rule 83 (comparador -> IGUAL IGUAL .)
    FLOTANTE        reduce using rule 83 (comparador -> IGUAL IGUAL .)
    CHARACTER       reduce using rule 83 (comparador -> IGUAL IGUAL .)
    STRING          reduce using rule 83 (comparador -> IGUAL IGUAL .)
    TRUE            reduce using rule 83 (comparador -> IGUAL IGUAL .)
    FALSE           reduce using rule 83 (comparador -> IGUAL IGUAL .)
    IDENTIFICADOR   reduce using rule 83 (comparador -> IGUAL IGUAL .)


state 112

    (86) comparador -> MENOR IGUAL .

    ENTERO          reduce using rule 86 (comparador -> MENOR IGUAL .)
    FLOTANTE        reduce using rule 86 (comparador -> MENOR IGUAL .)
    CHARACTER       reduce using rule 86 (comparador -> MENOR IGUAL .)
    STRING          reduce using rule 86 (comparador -> MENOR IGUAL .)
    TRUE            reduce using rule 86 (comparador -> MENOR IGUAL .)
    FALSE           reduce using rule 86 (comparador -> MENOR IGUAL .)
    IDENTIFICADOR   reduce using rule 86 (comparador -> MENOR IGUAL .)


state 113

    (87) comparador -> MAYOR IGUAL .

    ENTERO          reduce using rule 87 (comparador -> MAYOR IGUAL .)
    FLOTANTE        reduce using rule 87 (comparador -> MAYOR IGUAL .)
    CHARACTER       reduce using rule 87 (comparador -> MAYOR IGUAL .)
    STRING          reduce using rule 87 (comparador -> MAYOR IGUAL .)
    TRUE            reduce using rule 87 (comparador -> MAYOR IGUAL .)
    FALSE           reduce using rule 87 (comparador -> MAYOR IGUAL .)
    IDENTIFICADOR   reduce using rule 87 (comparador -> MAYOR IGUAL .)


state 114

    (88) comparador -> EXCLAMACION IGUAL .

    ENTERO          reduce using rule 88 (comparador -> EXCLAMACION IGUAL .)
    FLOTANTE        reduce using rule 88 (comparador -> EXCLAMACION IGUAL .)
    CHARACTER       reduce using rule 88 (comparador -> EXCLAMACION IGUAL .)
    STRING          reduce using rule 88 (comparador -> EXCLAMACION IGUAL .)
    TRUE            reduce using rule 88 (comparador -> EXCLAMACION IGUAL .)
    FALSE           reduce using rule 88 (comparador -> EXCLAMACION IGUAL .)
    IDENTIFICADOR   reduce using rule 88 (comparador -> EXCLAMACION IGUAL .)


state 115

    (78) statement -> EXCLAMACION LPAR expresion . RPAR
    (58) expresion -> expresion . comparador expresion
    (83) comparador -> . IGUAL IGUAL
    (84) comparador -> . MENOR
    (85) comparador -> . MAYOR
    (86) comparador -> . MENOR IGUAL
    (87) comparador -> . MAYOR IGUAL
    (88) comparador -> . EXCLAMACION IGUAL

    RPAR            shift and go to state 142
    IGUAL           shift and go to state 70
    MENOR           shift and go to state 71
    MAYOR           shift and go to state 72
    EXCLAMACION     shift and go to state 73

    comparador                     shift and go to state 69

state 116

    (60) expresionif -> IF LPAR condicionif RPAR . conllaves expresionpos
    (61) expresionif -> IF LPAR condicionif RPAR . sinllaves expresionpos
    (72) conllaves -> . LLAVEL bodyblock LLAVER
    (70) sinllaves -> . while
    (71) sinllaves -> . variable
    (57) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (40) variable -> . numerotipo id IGUAL numero PUNTOCOMA
    (41) variable -> . numerotipo id PUNTOCOMA
    (42) variable -> . AUTO id IGUAL valor PUNTOCOMA
    (43) variable -> . AUTO id PUNTOCOMA
    (44) variable -> . CHAR id IGUAL CHARACTER PUNTOCOMA
    (45) numerotipo -> . INT
    (46) numerotipo -> . FLOAT
    (47) numerotipo -> . LONG

    LLAVEL          shift and go to state 145
    WHILE           shift and go to state 17
    AUTO            shift and go to state 119
    CHAR            shift and go to state 120
    INT             shift and go to state 121
    FLOAT           shift and go to state 122
    LONG            shift and go to state 123

    conllaves                      shift and go to state 143
    sinllaves                      shift and go to state 144
    while                          shift and go to state 146
    variable                       shift and go to state 147
    numerotipo                     shift and go to state 14

state 117

    (75) initcondicion -> varblock statement .

    RPAR            reduce using rule 75 (initcondicion -> varblock statement .)


state 118

    (38) varblock -> varblock variable .

    EXCLAMACION     reduce using rule 38 (varblock -> varblock variable .)
    AUTO            reduce using rule 38 (varblock -> varblock variable .)
    CHAR            reduce using rule 38 (varblock -> varblock variable .)
    INT             reduce using rule 38 (varblock -> varblock variable .)
    FLOAT           reduce using rule 38 (varblock -> varblock variable .)
    LONG            reduce using rule 38 (varblock -> varblock variable .)
    ENTERO          reduce using rule 38 (varblock -> varblock variable .)
    FLOTANTE        reduce using rule 38 (varblock -> varblock variable .)
    CHARACTER       reduce using rule 38 (varblock -> varblock variable .)
    STRING          reduce using rule 38 (varblock -> varblock variable .)
    TRUE            reduce using rule 38 (varblock -> varblock variable .)
    FALSE           reduce using rule 38 (varblock -> varblock variable .)
    IDENTIFICADOR   reduce using rule 38 (varblock -> varblock variable .)
    LLAVER          reduce using rule 38 (varblock -> varblock variable .)


state 119

    (42) variable -> AUTO . id IGUAL valor PUNTOCOMA
    (43) variable -> AUTO . id PUNTOCOMA
    (14) id -> . IDENTIFICADOR
    (15) id -> . IDENTIFICADOR CORCHETEL ENTERO CORCHETER

    IDENTIFICADOR   shift and go to state 33

    id                             shift and go to state 34

state 120

    (44) variable -> CHAR . id IGUAL CHARACTER PUNTOCOMA
    (14) id -> . IDENTIFICADOR
    (15) id -> . IDENTIFICADOR CORCHETEL ENTERO CORCHETER

    IDENTIFICADOR   shift and go to state 33

    id                             shift and go to state 35

state 121

    (45) numerotipo -> INT .

    IDENTIFICADOR   reduce using rule 45 (numerotipo -> INT .)


state 122

    (46) numerotipo -> FLOAT .

    IDENTIFICADOR   reduce using rule 46 (numerotipo -> FLOAT .)


state 123

    (47) numerotipo -> LONG .

    IDENTIFICADOR   reduce using rule 47 (numerotipo -> LONG .)


state 124

    (105) claseimplementacion -> CLASS IDENTIFICADOR LLAVEL bloqueclase . LLAVER
    (106) bloqueclase -> bloqueclase . definicion
    (107) bloqueclase -> bloqueclase . funcionclaseimpl
    (109) definicion -> . tipo IDENTIFICADOR PUNTOCOMA
    (110) definicion -> .
    (111) funcionclaseimpl -> . tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER
    (112) funcionclaseimpl -> . VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER
    (113) funcionclaseimpl -> .
    (16) tipo -> . INT
    (17) tipo -> . FLOAT
    (18) tipo -> . LONG
    (19) tipo -> . AUTO
    (20) tipo -> . CHAR
    (21) tipo -> . VOID

  ! shift/reduce conflict for LLAVER resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LLAVER resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! reduce/reduce conflict for INT resolved using rule 110 (definicion -> .)
  ! reduce/reduce conflict for FLOAT resolved using rule 110 (definicion -> .)
  ! reduce/reduce conflict for LONG resolved using rule 110 (definicion -> .)
  ! reduce/reduce conflict for AUTO resolved using rule 110 (definicion -> .)
  ! reduce/reduce conflict for CHAR resolved using rule 110 (definicion -> .)
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    LLAVER          shift and go to state 148
    VOID            shift and go to state 24
    INT             shift and go to state 89
    FLOAT           shift and go to state 90
    LONG            shift and go to state 91
    AUTO            shift and go to state 92
    CHAR            shift and go to state 93

  ! LLAVER          [ reduce using rule 110 (definicion -> .) ]
  ! VOID            [ reduce using rule 110 (definicion -> .) ]
  ! INT             [ reduce using rule 110 (definicion -> .) ]
  ! FLOAT           [ reduce using rule 110 (definicion -> .) ]
  ! LONG            [ reduce using rule 110 (definicion -> .) ]
  ! AUTO            [ reduce using rule 110 (definicion -> .) ]
  ! CHAR            [ reduce using rule 110 (definicion -> .) ]
  ! LLAVER          [ reduce using rule 113 (funcionclaseimpl -> .) ]
  ! VOID            [ reduce using rule 113 (funcionclaseimpl -> .) ]
  ! INT             [ reduce using rule 113 (funcionclaseimpl -> .) ]
  ! FLOAT           [ reduce using rule 113 (funcionclaseimpl -> .) ]
  ! LONG            [ reduce using rule 113 (funcionclaseimpl -> .) ]
  ! AUTO            [ reduce using rule 113 (funcionclaseimpl -> .) ]
  ! CHAR            [ reduce using rule 113 (funcionclaseimpl -> .) ]

    definicion                     shift and go to state 149
    funcionclaseimpl               shift and go to state 150
    tipo                           shift and go to state 151

state 125

    (123) asignarvalorobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR IGUAL . valor
    (50) valor -> . ENTERO
    (51) valor -> . FLOTANTE
    (52) valor -> . CHARACTER
    (53) valor -> . STRING
    (54) valor -> . TRUE
    (55) valor -> . FALSE
    (56) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 42
    FLOTANTE        shift and go to state 43
    CHARACTER       shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    IDENTIFICADOR   shift and go to state 41

    valor                          shift and go to state 152

state 126

    (127) usarfuncionobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR LPAR . parametrosfuncion RPAR PUNTOCOMA
    (116) parametrosfuncion -> . IDENTIFICADOR masparametrosfuncion
    (117) parametrosfuncion -> .

    IDENTIFICADOR   shift and go to state 153
    RPAR            reduce using rule 117 (parametrosfuncion -> .)

    parametrosfuncion              shift and go to state 154

state 127

    (99) for -> FOR LPAR initfor PUNTOCOMA . condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER
    (90) condfor -> . IDENTIFICADOR comparador valor

    IDENTIFICADOR   shift and go to state 156

    condfor                        shift and go to state 155

state 128

    (89) initfor -> tipo IDENTIFICADOR . IGUAL valor

    IGUAL           shift and go to state 157


state 129

    (101) arraydeclaration -> tipo id IGUAL LLAVEL . arraydata LLAVER PUNTOCOMA
    (102) arraydeclaration -> tipo id IGUAL LLAVEL . LLAVER PUNTOCOMA
    (103) arraydata -> . arraydata COMMA valor
    (104) arraydata -> . valor
    (50) valor -> . ENTERO
    (51) valor -> . FLOTANTE
    (52) valor -> . CHARACTER
    (53) valor -> . STRING
    (54) valor -> . TRUE
    (55) valor -> . FALSE
    (56) valor -> . IDENTIFICADOR

    LLAVER          shift and go to state 159
    ENTERO          shift and go to state 42
    FLOTANTE        shift and go to state 43
    CHARACTER       shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    IDENTIFICADOR   shift and go to state 41

    arraydata                      shift and go to state 158
    valor                          shift and go to state 160

state 130

    (114) parametrosimplementacion -> tipo . IDENTIFICADOR masparametrosimplementacion

    IDENTIFICADOR   shift and go to state 161


state 131

    (111) funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion . RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER

    RPAR            shift and go to state 162


state 132

    (112) funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion . RPAR LLAVEL bodyblock LLAVER

    RPAR            shift and go to state 163


state 133

    (126) asignarvalorobjeto -> EXCLAMACION LPAR statement RPAR .

    $end            reduce using rule 126 (asignarvalorobjeto -> EXCLAMACION LPAR statement RPAR .)


state 134

    (59) struct -> STRUCT IDENTIFICADOR LLAVEL varblock . LLAVER IDENTIFICADOR PUNTOCOMA
    (38) varblock -> varblock . variable
    (40) variable -> . numerotipo id IGUAL numero PUNTOCOMA
    (41) variable -> . numerotipo id PUNTOCOMA
    (42) variable -> . AUTO id IGUAL valor PUNTOCOMA
    (43) variable -> . AUTO id PUNTOCOMA
    (44) variable -> . CHAR id IGUAL CHARACTER PUNTOCOMA
    (45) numerotipo -> . INT
    (46) numerotipo -> . FLOAT
    (47) numerotipo -> . LONG

    LLAVER          shift and go to state 164
    AUTO            shift and go to state 119
    CHAR            shift and go to state 120
    INT             shift and go to state 121
    FLOAT           shift and go to state 122
    LONG            shift and go to state 123

    variable                       shift and go to state 118
    numerotipo                     shift and go to state 14

state 135

    (22) imprimir -> PRINT LPAR valor RPAR .

    $end            reduce using rule 22 (imprimir -> PRINT LPAR valor RPAR .)
    LLAVER          reduce using rule 22 (imprimir -> PRINT LPAR valor RPAR .)
    AUTO            reduce using rule 22 (imprimir -> PRINT LPAR valor RPAR .)
    CHAR            reduce using rule 22 (imprimir -> PRINT LPAR valor RPAR .)
    WHILE           reduce using rule 22 (imprimir -> PRINT LPAR valor RPAR .)
    IF              reduce using rule 22 (imprimir -> PRINT LPAR valor RPAR .)
    FOR             reduce using rule 22 (imprimir -> PRINT LPAR valor RPAR .)
    PRINT           reduce using rule 22 (imprimir -> PRINT LPAR valor RPAR .)
    COUT            reduce using rule 22 (imprimir -> PRINT LPAR valor RPAR .)
    INT             reduce using rule 22 (imprimir -> PRINT LPAR valor RPAR .)
    FLOAT           reduce using rule 22 (imprimir -> PRINT LPAR valor RPAR .)
    LONG            reduce using rule 22 (imprimir -> PRINT LPAR valor RPAR .)
    VOID            reduce using rule 22 (imprimir -> PRINT LPAR valor RPAR .)
    RETURN          reduce using rule 22 (imprimir -> PRINT LPAR valor RPAR .)


state 136

    (23) imprimir -> COUT MENOR MENOR valor .

    $end            reduce using rule 23 (imprimir -> COUT MENOR MENOR valor .)
    LLAVER          reduce using rule 23 (imprimir -> COUT MENOR MENOR valor .)
    AUTO            reduce using rule 23 (imprimir -> COUT MENOR MENOR valor .)
    CHAR            reduce using rule 23 (imprimir -> COUT MENOR MENOR valor .)
    WHILE           reduce using rule 23 (imprimir -> COUT MENOR MENOR valor .)
    IF              reduce using rule 23 (imprimir -> COUT MENOR MENOR valor .)
    FOR             reduce using rule 23 (imprimir -> COUT MENOR MENOR valor .)
    PRINT           reduce using rule 23 (imprimir -> COUT MENOR MENOR valor .)
    COUT            reduce using rule 23 (imprimir -> COUT MENOR MENOR valor .)
    INT             reduce using rule 23 (imprimir -> COUT MENOR MENOR valor .)
    FLOAT           reduce using rule 23 (imprimir -> COUT MENOR MENOR valor .)
    LONG            reduce using rule 23 (imprimir -> COUT MENOR MENOR valor .)
    VOID            reduce using rule 23 (imprimir -> COUT MENOR MENOR valor .)
    RETURN          reduce using rule 23 (imprimir -> COUT MENOR MENOR valor .)


state 137

    (40) variable -> numerotipo id IGUAL numero PUNTOCOMA .

    $end            reduce using rule 40 (variable -> numerotipo id IGUAL numero PUNTOCOMA .)
    EXCLAMACION     reduce using rule 40 (variable -> numerotipo id IGUAL numero PUNTOCOMA .)
    AUTO            reduce using rule 40 (variable -> numerotipo id IGUAL numero PUNTOCOMA .)
    CHAR            reduce using rule 40 (variable -> numerotipo id IGUAL numero PUNTOCOMA .)
    INT             reduce using rule 40 (variable -> numerotipo id IGUAL numero PUNTOCOMA .)
    FLOAT           reduce using rule 40 (variable -> numerotipo id IGUAL numero PUNTOCOMA .)
    LONG            reduce using rule 40 (variable -> numerotipo id IGUAL numero PUNTOCOMA .)
    ENTERO          reduce using rule 40 (variable -> numerotipo id IGUAL numero PUNTOCOMA .)
    FLOTANTE        reduce using rule 40 (variable -> numerotipo id IGUAL numero PUNTOCOMA .)
    CHARACTER       reduce using rule 40 (variable -> numerotipo id IGUAL numero PUNTOCOMA .)
    STRING          reduce using rule 40 (variable -> numerotipo id IGUAL numero PUNTOCOMA .)
    TRUE            reduce using rule 40 (variable -> numerotipo id IGUAL numero PUNTOCOMA .)
    FALSE           reduce using rule 40 (variable -> numerotipo id IGUAL numero PUNTOCOMA .)
    IDENTIFICADOR   reduce using rule 40 (variable -> numerotipo id IGUAL numero PUNTOCOMA .)
    ELSE            reduce using rule 40 (variable -> numerotipo id IGUAL numero PUNTOCOMA .)
    LLAVER          reduce using rule 40 (variable -> numerotipo id IGUAL numero PUNTOCOMA .)
    WHILE           reduce using rule 40 (variable -> numerotipo id IGUAL numero PUNTOCOMA .)
    IF              reduce using rule 40 (variable -> numerotipo id IGUAL numero PUNTOCOMA .)
    FOR             reduce using rule 40 (variable -> numerotipo id IGUAL numero PUNTOCOMA .)
    PRINT           reduce using rule 40 (variable -> numerotipo id IGUAL numero PUNTOCOMA .)
    COUT            reduce using rule 40 (variable -> numerotipo id IGUAL numero PUNTOCOMA .)
    VOID            reduce using rule 40 (variable -> numerotipo id IGUAL numero PUNTOCOMA .)
    RETURN          reduce using rule 40 (variable -> numerotipo id IGUAL numero PUNTOCOMA .)


state 138

    (15) id -> IDENTIFICADOR CORCHETEL ENTERO CORCHETER .

    IGUAL           reduce using rule 15 (id -> IDENTIFICADOR CORCHETEL ENTERO CORCHETER .)
    PUNTOCOMA       reduce using rule 15 (id -> IDENTIFICADOR CORCHETEL ENTERO CORCHETER .)


state 139

    (42) variable -> AUTO id IGUAL valor PUNTOCOMA .

    $end            reduce using rule 42 (variable -> AUTO id IGUAL valor PUNTOCOMA .)
    EXCLAMACION     reduce using rule 42 (variable -> AUTO id IGUAL valor PUNTOCOMA .)
    AUTO            reduce using rule 42 (variable -> AUTO id IGUAL valor PUNTOCOMA .)
    CHAR            reduce using rule 42 (variable -> AUTO id IGUAL valor PUNTOCOMA .)
    INT             reduce using rule 42 (variable -> AUTO id IGUAL valor PUNTOCOMA .)
    FLOAT           reduce using rule 42 (variable -> AUTO id IGUAL valor PUNTOCOMA .)
    LONG            reduce using rule 42 (variable -> AUTO id IGUAL valor PUNTOCOMA .)
    ENTERO          reduce using rule 42 (variable -> AUTO id IGUAL valor PUNTOCOMA .)
    FLOTANTE        reduce using rule 42 (variable -> AUTO id IGUAL valor PUNTOCOMA .)
    CHARACTER       reduce using rule 42 (variable -> AUTO id IGUAL valor PUNTOCOMA .)
    STRING          reduce using rule 42 (variable -> AUTO id IGUAL valor PUNTOCOMA .)
    TRUE            reduce using rule 42 (variable -> AUTO id IGUAL valor PUNTOCOMA .)
    FALSE           reduce using rule 42 (variable -> AUTO id IGUAL valor PUNTOCOMA .)
    IDENTIFICADOR   reduce using rule 42 (variable -> AUTO id IGUAL valor PUNTOCOMA .)
    ELSE            reduce using rule 42 (variable -> AUTO id IGUAL valor PUNTOCOMA .)
    LLAVER          reduce using rule 42 (variable -> AUTO id IGUAL valor PUNTOCOMA .)
    WHILE           reduce using rule 42 (variable -> AUTO id IGUAL valor PUNTOCOMA .)
    IF              reduce using rule 42 (variable -> AUTO id IGUAL valor PUNTOCOMA .)
    FOR             reduce using rule 42 (variable -> AUTO id IGUAL valor PUNTOCOMA .)
    PRINT           reduce using rule 42 (variable -> AUTO id IGUAL valor PUNTOCOMA .)
    COUT            reduce using rule 42 (variable -> AUTO id IGUAL valor PUNTOCOMA .)
    VOID            reduce using rule 42 (variable -> AUTO id IGUAL valor PUNTOCOMA .)
    RETURN          reduce using rule 42 (variable -> AUTO id IGUAL valor PUNTOCOMA .)


state 140

    (44) variable -> CHAR id IGUAL CHARACTER PUNTOCOMA .

    $end            reduce using rule 44 (variable -> CHAR id IGUAL CHARACTER PUNTOCOMA .)
    EXCLAMACION     reduce using rule 44 (variable -> CHAR id IGUAL CHARACTER PUNTOCOMA .)
    AUTO            reduce using rule 44 (variable -> CHAR id IGUAL CHARACTER PUNTOCOMA .)
    CHAR            reduce using rule 44 (variable -> CHAR id IGUAL CHARACTER PUNTOCOMA .)
    INT             reduce using rule 44 (variable -> CHAR id IGUAL CHARACTER PUNTOCOMA .)
    FLOAT           reduce using rule 44 (variable -> CHAR id IGUAL CHARACTER PUNTOCOMA .)
    LONG            reduce using rule 44 (variable -> CHAR id IGUAL CHARACTER PUNTOCOMA .)
    ENTERO          reduce using rule 44 (variable -> CHAR id IGUAL CHARACTER PUNTOCOMA .)
    FLOTANTE        reduce using rule 44 (variable -> CHAR id IGUAL CHARACTER PUNTOCOMA .)
    CHARACTER       reduce using rule 44 (variable -> CHAR id IGUAL CHARACTER PUNTOCOMA .)
    STRING          reduce using rule 44 (variable -> CHAR id IGUAL CHARACTER PUNTOCOMA .)
    TRUE            reduce using rule 44 (variable -> CHAR id IGUAL CHARACTER PUNTOCOMA .)
    FALSE           reduce using rule 44 (variable -> CHAR id IGUAL CHARACTER PUNTOCOMA .)
    IDENTIFICADOR   reduce using rule 44 (variable -> CHAR id IGUAL CHARACTER PUNTOCOMA .)
    ELSE            reduce using rule 44 (variable -> CHAR id IGUAL CHARACTER PUNTOCOMA .)
    LLAVER          reduce using rule 44 (variable -> CHAR id IGUAL CHARACTER PUNTOCOMA .)
    WHILE           reduce using rule 44 (variable -> CHAR id IGUAL CHARACTER PUNTOCOMA .)
    IF              reduce using rule 44 (variable -> CHAR id IGUAL CHARACTER PUNTOCOMA .)
    FOR             reduce using rule 44 (variable -> CHAR id IGUAL CHARACTER PUNTOCOMA .)
    PRINT           reduce using rule 44 (variable -> CHAR id IGUAL CHARACTER PUNTOCOMA .)
    COUT            reduce using rule 44 (variable -> CHAR id IGUAL CHARACTER PUNTOCOMA .)
    VOID            reduce using rule 44 (variable -> CHAR id IGUAL CHARACTER PUNTOCOMA .)
    RETURN          reduce using rule 44 (variable -> CHAR id IGUAL CHARACTER PUNTOCOMA .)


state 141

    (57) while -> WHILE LPAR statement RPAR LLAVEL . bodyblock LLAVER
    (24) bodyblock -> . bodyblock variable
    (25) bodyblock -> . bodyblock while
    (26) bodyblock -> . bodyblock expresionif
    (27) bodyblock -> . bodyblock for
    (28) bodyblock -> . bodyblock imprimir
    (29) bodyblock -> . bodyblock arraydeclaration
    (30) bodyblock -> .

    LLAVER          reduce using rule 30 (bodyblock -> .)
    AUTO            reduce using rule 30 (bodyblock -> .)
    CHAR            reduce using rule 30 (bodyblock -> .)
    WHILE           reduce using rule 30 (bodyblock -> .)
    IF              reduce using rule 30 (bodyblock -> .)
    FOR             reduce using rule 30 (bodyblock -> .)
    PRINT           reduce using rule 30 (bodyblock -> .)
    COUT            reduce using rule 30 (bodyblock -> .)
    INT             reduce using rule 30 (bodyblock -> .)
    FLOAT           reduce using rule 30 (bodyblock -> .)
    LONG            reduce using rule 30 (bodyblock -> .)
    VOID            reduce using rule 30 (bodyblock -> .)

    bodyblock                      shift and go to state 165

state 142

    (78) statement -> EXCLAMACION LPAR expresion RPAR .

    RPAR            reduce using rule 78 (statement -> EXCLAMACION LPAR expresion RPAR .)


state 143

    (60) expresionif -> IF LPAR condicionif RPAR conllaves . expresionpos
    (62) expresionpos -> . else
    (63) expresionpos -> . elseif
    (64) expresionpos -> .
    (68) else -> . ELSE conllaves
    (69) else -> . ELSE sinllaves
    (65) elseif -> . ELSE IF LPAR condicionif RPAR conllaves else
    (66) elseif -> . ELSE IF LPAR condicionif RPAR sinllaves else
    (67) elseif -> .

  ! reduce/reduce conflict for $end resolved using rule 64 (expresionpos -> .)
  ! reduce/reduce conflict for LLAVER resolved using rule 64 (expresionpos -> .)
  ! reduce/reduce conflict for AUTO resolved using rule 64 (expresionpos -> .)
  ! reduce/reduce conflict for CHAR resolved using rule 64 (expresionpos -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 64 (expresionpos -> .)
  ! reduce/reduce conflict for IF resolved using rule 64 (expresionpos -> .)
  ! reduce/reduce conflict for FOR resolved using rule 64 (expresionpos -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 64 (expresionpos -> .)
  ! reduce/reduce conflict for COUT resolved using rule 64 (expresionpos -> .)
  ! reduce/reduce conflict for INT resolved using rule 64 (expresionpos -> .)
  ! reduce/reduce conflict for FLOAT resolved using rule 64 (expresionpos -> .)
  ! reduce/reduce conflict for LONG resolved using rule 64 (expresionpos -> .)
  ! reduce/reduce conflict for VOID resolved using rule 64 (expresionpos -> .)
  ! reduce/reduce conflict for RETURN resolved using rule 64 (expresionpos -> .)
    $end            reduce using rule 64 (expresionpos -> .)
    LLAVER          reduce using rule 64 (expresionpos -> .)
    AUTO            reduce using rule 64 (expresionpos -> .)
    CHAR            reduce using rule 64 (expresionpos -> .)
    WHILE           reduce using rule 64 (expresionpos -> .)
    IF              reduce using rule 64 (expresionpos -> .)
    FOR             reduce using rule 64 (expresionpos -> .)
    PRINT           reduce using rule 64 (expresionpos -> .)
    COUT            reduce using rule 64 (expresionpos -> .)
    INT             reduce using rule 64 (expresionpos -> .)
    FLOAT           reduce using rule 64 (expresionpos -> .)
    LONG            reduce using rule 64 (expresionpos -> .)
    VOID            reduce using rule 64 (expresionpos -> .)
    RETURN          reduce using rule 64 (expresionpos -> .)
    ELSE            shift and go to state 169

  ! $end            [ reduce using rule 67 (elseif -> .) ]
  ! LLAVER          [ reduce using rule 67 (elseif -> .) ]
  ! AUTO            [ reduce using rule 67 (elseif -> .) ]
  ! CHAR            [ reduce using rule 67 (elseif -> .) ]
  ! WHILE           [ reduce using rule 67 (elseif -> .) ]
  ! IF              [ reduce using rule 67 (elseif -> .) ]
  ! FOR             [ reduce using rule 67 (elseif -> .) ]
  ! PRINT           [ reduce using rule 67 (elseif -> .) ]
  ! COUT            [ reduce using rule 67 (elseif -> .) ]
  ! INT             [ reduce using rule 67 (elseif -> .) ]
  ! FLOAT           [ reduce using rule 67 (elseif -> .) ]
  ! LONG            [ reduce using rule 67 (elseif -> .) ]
  ! VOID            [ reduce using rule 67 (elseif -> .) ]
  ! RETURN          [ reduce using rule 67 (elseif -> .) ]

    expresionpos                   shift and go to state 166
    else                           shift and go to state 167
    elseif                         shift and go to state 168

state 144

    (61) expresionif -> IF LPAR condicionif RPAR sinllaves . expresionpos
    (62) expresionpos -> . else
    (63) expresionpos -> . elseif
    (64) expresionpos -> .
    (68) else -> . ELSE conllaves
    (69) else -> . ELSE sinllaves
    (65) elseif -> . ELSE IF LPAR condicionif RPAR conllaves else
    (66) elseif -> . ELSE IF LPAR condicionif RPAR sinllaves else
    (67) elseif -> .

  ! reduce/reduce conflict for $end resolved using rule 64 (expresionpos -> .)
  ! reduce/reduce conflict for LLAVER resolved using rule 64 (expresionpos -> .)
  ! reduce/reduce conflict for AUTO resolved using rule 64 (expresionpos -> .)
  ! reduce/reduce conflict for CHAR resolved using rule 64 (expresionpos -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 64 (expresionpos -> .)
  ! reduce/reduce conflict for IF resolved using rule 64 (expresionpos -> .)
  ! reduce/reduce conflict for FOR resolved using rule 64 (expresionpos -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 64 (expresionpos -> .)
  ! reduce/reduce conflict for COUT resolved using rule 64 (expresionpos -> .)
  ! reduce/reduce conflict for INT resolved using rule 64 (expresionpos -> .)
  ! reduce/reduce conflict for FLOAT resolved using rule 64 (expresionpos -> .)
  ! reduce/reduce conflict for LONG resolved using rule 64 (expresionpos -> .)
  ! reduce/reduce conflict for VOID resolved using rule 64 (expresionpos -> .)
  ! reduce/reduce conflict for RETURN resolved using rule 64 (expresionpos -> .)
    $end            reduce using rule 64 (expresionpos -> .)
    LLAVER          reduce using rule 64 (expresionpos -> .)
    AUTO            reduce using rule 64 (expresionpos -> .)
    CHAR            reduce using rule 64 (expresionpos -> .)
    WHILE           reduce using rule 64 (expresionpos -> .)
    IF              reduce using rule 64 (expresionpos -> .)
    FOR             reduce using rule 64 (expresionpos -> .)
    PRINT           reduce using rule 64 (expresionpos -> .)
    COUT            reduce using rule 64 (expresionpos -> .)
    INT             reduce using rule 64 (expresionpos -> .)
    FLOAT           reduce using rule 64 (expresionpos -> .)
    LONG            reduce using rule 64 (expresionpos -> .)
    VOID            reduce using rule 64 (expresionpos -> .)
    RETURN          reduce using rule 64 (expresionpos -> .)
    ELSE            shift and go to state 169

  ! $end            [ reduce using rule 67 (elseif -> .) ]
  ! LLAVER          [ reduce using rule 67 (elseif -> .) ]
  ! AUTO            [ reduce using rule 67 (elseif -> .) ]
  ! CHAR            [ reduce using rule 67 (elseif -> .) ]
  ! WHILE           [ reduce using rule 67 (elseif -> .) ]
  ! IF              [ reduce using rule 67 (elseif -> .) ]
  ! FOR             [ reduce using rule 67 (elseif -> .) ]
  ! PRINT           [ reduce using rule 67 (elseif -> .) ]
  ! COUT            [ reduce using rule 67 (elseif -> .) ]
  ! INT             [ reduce using rule 67 (elseif -> .) ]
  ! FLOAT           [ reduce using rule 67 (elseif -> .) ]
  ! LONG            [ reduce using rule 67 (elseif -> .) ]
  ! VOID            [ reduce using rule 67 (elseif -> .) ]
  ! RETURN          [ reduce using rule 67 (elseif -> .) ]

    expresionpos                   shift and go to state 170
    else                           shift and go to state 167
    elseif                         shift and go to state 168

state 145

    (72) conllaves -> LLAVEL . bodyblock LLAVER
    (24) bodyblock -> . bodyblock variable
    (25) bodyblock -> . bodyblock while
    (26) bodyblock -> . bodyblock expresionif
    (27) bodyblock -> . bodyblock for
    (28) bodyblock -> . bodyblock imprimir
    (29) bodyblock -> . bodyblock arraydeclaration
    (30) bodyblock -> .

    LLAVER          reduce using rule 30 (bodyblock -> .)
    AUTO            reduce using rule 30 (bodyblock -> .)
    CHAR            reduce using rule 30 (bodyblock -> .)
    WHILE           reduce using rule 30 (bodyblock -> .)
    IF              reduce using rule 30 (bodyblock -> .)
    FOR             reduce using rule 30 (bodyblock -> .)
    PRINT           reduce using rule 30 (bodyblock -> .)
    COUT            reduce using rule 30 (bodyblock -> .)
    INT             reduce using rule 30 (bodyblock -> .)
    FLOAT           reduce using rule 30 (bodyblock -> .)
    LONG            reduce using rule 30 (bodyblock -> .)
    VOID            reduce using rule 30 (bodyblock -> .)

    bodyblock                      shift and go to state 171

state 146

    (70) sinllaves -> while .

    ELSE            reduce using rule 70 (sinllaves -> while .)
    $end            reduce using rule 70 (sinllaves -> while .)
    LLAVER          reduce using rule 70 (sinllaves -> while .)
    AUTO            reduce using rule 70 (sinllaves -> while .)
    CHAR            reduce using rule 70 (sinllaves -> while .)
    WHILE           reduce using rule 70 (sinllaves -> while .)
    IF              reduce using rule 70 (sinllaves -> while .)
    FOR             reduce using rule 70 (sinllaves -> while .)
    PRINT           reduce using rule 70 (sinllaves -> while .)
    COUT            reduce using rule 70 (sinllaves -> while .)
    INT             reduce using rule 70 (sinllaves -> while .)
    FLOAT           reduce using rule 70 (sinllaves -> while .)
    LONG            reduce using rule 70 (sinllaves -> while .)
    VOID            reduce using rule 70 (sinllaves -> while .)
    RETURN          reduce using rule 70 (sinllaves -> while .)


state 147

    (71) sinllaves -> variable .

    ELSE            reduce using rule 71 (sinllaves -> variable .)
    $end            reduce using rule 71 (sinllaves -> variable .)
    LLAVER          reduce using rule 71 (sinllaves -> variable .)
    AUTO            reduce using rule 71 (sinllaves -> variable .)
    CHAR            reduce using rule 71 (sinllaves -> variable .)
    WHILE           reduce using rule 71 (sinllaves -> variable .)
    IF              reduce using rule 71 (sinllaves -> variable .)
    FOR             reduce using rule 71 (sinllaves -> variable .)
    PRINT           reduce using rule 71 (sinllaves -> variable .)
    COUT            reduce using rule 71 (sinllaves -> variable .)
    INT             reduce using rule 71 (sinllaves -> variable .)
    FLOAT           reduce using rule 71 (sinllaves -> variable .)
    LONG            reduce using rule 71 (sinllaves -> variable .)
    VOID            reduce using rule 71 (sinllaves -> variable .)
    RETURN          reduce using rule 71 (sinllaves -> variable .)


state 148

    (105) claseimplementacion -> CLASS IDENTIFICADOR LLAVEL bloqueclase LLAVER .

    $end            reduce using rule 105 (claseimplementacion -> CLASS IDENTIFICADOR LLAVEL bloqueclase LLAVER .)


state 149

    (106) bloqueclase -> bloqueclase definicion .

    LLAVER          reduce using rule 106 (bloqueclase -> bloqueclase definicion .)
    VOID            reduce using rule 106 (bloqueclase -> bloqueclase definicion .)
    INT             reduce using rule 106 (bloqueclase -> bloqueclase definicion .)
    FLOAT           reduce using rule 106 (bloqueclase -> bloqueclase definicion .)
    LONG            reduce using rule 106 (bloqueclase -> bloqueclase definicion .)
    AUTO            reduce using rule 106 (bloqueclase -> bloqueclase definicion .)
    CHAR            reduce using rule 106 (bloqueclase -> bloqueclase definicion .)


state 150

    (107) bloqueclase -> bloqueclase funcionclaseimpl .

    LLAVER          reduce using rule 107 (bloqueclase -> bloqueclase funcionclaseimpl .)
    VOID            reduce using rule 107 (bloqueclase -> bloqueclase funcionclaseimpl .)
    INT             reduce using rule 107 (bloqueclase -> bloqueclase funcionclaseimpl .)
    FLOAT           reduce using rule 107 (bloqueclase -> bloqueclase funcionclaseimpl .)
    LONG            reduce using rule 107 (bloqueclase -> bloqueclase funcionclaseimpl .)
    AUTO            reduce using rule 107 (bloqueclase -> bloqueclase funcionclaseimpl .)
    CHAR            reduce using rule 107 (bloqueclase -> bloqueclase funcionclaseimpl .)


state 151

    (109) definicion -> tipo . IDENTIFICADOR PUNTOCOMA
    (111) funcionclaseimpl -> tipo . IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER

    IDENTIFICADOR   shift and go to state 172


state 152

    (123) asignarvalorobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR IGUAL valor .

    $end            reduce using rule 123 (asignarvalorobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR IGUAL valor .)


state 153

    (116) parametrosfuncion -> IDENTIFICADOR . masparametrosfuncion
    (120) masparametrosfuncion -> . COMMA parametrosfuncion
    (121) masparametrosfuncion -> .

    COMMA           shift and go to state 174
    RPAR            reduce using rule 121 (masparametrosfuncion -> .)

    masparametrosfuncion           shift and go to state 173

state 154

    (127) usarfuncionobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR LPAR parametrosfuncion . RPAR PUNTOCOMA

    RPAR            shift and go to state 175


state 155

    (99) for -> FOR LPAR initfor PUNTOCOMA condfor . PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER

    PUNTOCOMA       shift and go to state 176


state 156

    (90) condfor -> IDENTIFICADOR . comparador valor
    (83) comparador -> . IGUAL IGUAL
    (84) comparador -> . MENOR
    (85) comparador -> . MAYOR
    (86) comparador -> . MENOR IGUAL
    (87) comparador -> . MAYOR IGUAL
    (88) comparador -> . EXCLAMACION IGUAL

    IGUAL           shift and go to state 70
    MENOR           shift and go to state 71
    MAYOR           shift and go to state 72
    EXCLAMACION     shift and go to state 73

    comparador                     shift and go to state 177

state 157

    (89) initfor -> tipo IDENTIFICADOR IGUAL . valor
    (50) valor -> . ENTERO
    (51) valor -> . FLOTANTE
    (52) valor -> . CHARACTER
    (53) valor -> . STRING
    (54) valor -> . TRUE
    (55) valor -> . FALSE
    (56) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 42
    FLOTANTE        shift and go to state 43
    CHARACTER       shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    IDENTIFICADOR   shift and go to state 41

    valor                          shift and go to state 178

state 158

    (101) arraydeclaration -> tipo id IGUAL LLAVEL arraydata . LLAVER PUNTOCOMA
    (103) arraydata -> arraydata . COMMA valor

    LLAVER          shift and go to state 179
    COMMA           shift and go to state 180


state 159

    (102) arraydeclaration -> tipo id IGUAL LLAVEL LLAVER . PUNTOCOMA

    PUNTOCOMA       shift and go to state 181


state 160

    (104) arraydata -> valor .

    LLAVER          reduce using rule 104 (arraydata -> valor .)
    COMMA           reduce using rule 104 (arraydata -> valor .)


state 161

    (114) parametrosimplementacion -> tipo IDENTIFICADOR . masparametrosimplementacion
    (118) masparametrosimplementacion -> . COMMA parametrosimplementacion
    (119) masparametrosimplementacion -> .

    COMMA           shift and go to state 183
    RPAR            reduce using rule 119 (masparametrosimplementacion -> .)

    masparametrosimplementacion    shift and go to state 182

state 162

    (111) funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR . LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER

    LLAVEL          shift and go to state 184


state 163

    (112) funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR . LLAVEL bodyblock LLAVER

    LLAVEL          shift and go to state 185


state 164

    (59) struct -> STRUCT IDENTIFICADOR LLAVEL varblock LLAVER . IDENTIFICADOR PUNTOCOMA

    IDENTIFICADOR   shift and go to state 186


state 165

    (57) while -> WHILE LPAR statement RPAR LLAVEL bodyblock . LLAVER
    (24) bodyblock -> bodyblock . variable
    (25) bodyblock -> bodyblock . while
    (26) bodyblock -> bodyblock . expresionif
    (27) bodyblock -> bodyblock . for
    (28) bodyblock -> bodyblock . imprimir
    (29) bodyblock -> bodyblock . arraydeclaration
    (40) variable -> . numerotipo id IGUAL numero PUNTOCOMA
    (41) variable -> . numerotipo id PUNTOCOMA
    (42) variable -> . AUTO id IGUAL valor PUNTOCOMA
    (43) variable -> . AUTO id PUNTOCOMA
    (44) variable -> . CHAR id IGUAL CHARACTER PUNTOCOMA
    (57) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (60) expresionif -> . IF LPAR condicionif RPAR conllaves expresionpos
    (61) expresionif -> . IF LPAR condicionif RPAR sinllaves expresionpos
    (99) for -> . FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER
    (22) imprimir -> . PRINT LPAR valor RPAR
    (23) imprimir -> . COUT MENOR MENOR valor
    (100) arraydeclaration -> . tipo id PUNTOCOMA
    (101) arraydeclaration -> . tipo id IGUAL LLAVEL arraydata LLAVER PUNTOCOMA
    (102) arraydeclaration -> . tipo id IGUAL LLAVEL LLAVER PUNTOCOMA
    (45) numerotipo -> . INT
    (46) numerotipo -> . FLOAT
    (47) numerotipo -> . LONG
    (16) tipo -> . INT
    (17) tipo -> . FLOAT
    (18) tipo -> . LONG
    (19) tipo -> . AUTO
    (20) tipo -> . CHAR
    (21) tipo -> . VOID

    LLAVER          shift and go to state 187
    AUTO            shift and go to state 15
    CHAR            shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 19
    FOR             shift and go to state 22
    PRINT           shift and go to state 27
    COUT            shift and go to state 28
    INT             shift and go to state 29
    FLOAT           shift and go to state 30
    LONG            shift and go to state 31
    VOID            shift and go to state 94

    variable                       shift and go to state 188
    while                          shift and go to state 189
    expresionif                    shift and go to state 190
    for                            shift and go to state 191
    imprimir                       shift and go to state 192
    arraydeclaration               shift and go to state 193
    numerotipo                     shift and go to state 14
    tipo                           shift and go to state 194

state 166

    (60) expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .

    $end            reduce using rule 60 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    LLAVER          reduce using rule 60 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    AUTO            reduce using rule 60 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    CHAR            reduce using rule 60 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    WHILE           reduce using rule 60 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    IF              reduce using rule 60 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    FOR             reduce using rule 60 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    PRINT           reduce using rule 60 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    COUT            reduce using rule 60 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    INT             reduce using rule 60 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    FLOAT           reduce using rule 60 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    LONG            reduce using rule 60 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    VOID            reduce using rule 60 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    RETURN          reduce using rule 60 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)


state 167

    (62) expresionpos -> else .

    $end            reduce using rule 62 (expresionpos -> else .)
    LLAVER          reduce using rule 62 (expresionpos -> else .)
    AUTO            reduce using rule 62 (expresionpos -> else .)
    CHAR            reduce using rule 62 (expresionpos -> else .)
    WHILE           reduce using rule 62 (expresionpos -> else .)
    IF              reduce using rule 62 (expresionpos -> else .)
    FOR             reduce using rule 62 (expresionpos -> else .)
    PRINT           reduce using rule 62 (expresionpos -> else .)
    COUT            reduce using rule 62 (expresionpos -> else .)
    INT             reduce using rule 62 (expresionpos -> else .)
    FLOAT           reduce using rule 62 (expresionpos -> else .)
    LONG            reduce using rule 62 (expresionpos -> else .)
    VOID            reduce using rule 62 (expresionpos -> else .)
    RETURN          reduce using rule 62 (expresionpos -> else .)


state 168

    (63) expresionpos -> elseif .

    $end            reduce using rule 63 (expresionpos -> elseif .)
    LLAVER          reduce using rule 63 (expresionpos -> elseif .)
    AUTO            reduce using rule 63 (expresionpos -> elseif .)
    CHAR            reduce using rule 63 (expresionpos -> elseif .)
    WHILE           reduce using rule 63 (expresionpos -> elseif .)
    IF              reduce using rule 63 (expresionpos -> elseif .)
    FOR             reduce using rule 63 (expresionpos -> elseif .)
    PRINT           reduce using rule 63 (expresionpos -> elseif .)
    COUT            reduce using rule 63 (expresionpos -> elseif .)
    INT             reduce using rule 63 (expresionpos -> elseif .)
    FLOAT           reduce using rule 63 (expresionpos -> elseif .)
    LONG            reduce using rule 63 (expresionpos -> elseif .)
    VOID            reduce using rule 63 (expresionpos -> elseif .)
    RETURN          reduce using rule 63 (expresionpos -> elseif .)


state 169

    (68) else -> ELSE . conllaves
    (69) else -> ELSE . sinllaves
    (65) elseif -> ELSE . IF LPAR condicionif RPAR conllaves else
    (66) elseif -> ELSE . IF LPAR condicionif RPAR sinllaves else
    (72) conllaves -> . LLAVEL bodyblock LLAVER
    (70) sinllaves -> . while
    (71) sinllaves -> . variable
    (57) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (40) variable -> . numerotipo id IGUAL numero PUNTOCOMA
    (41) variable -> . numerotipo id PUNTOCOMA
    (42) variable -> . AUTO id IGUAL valor PUNTOCOMA
    (43) variable -> . AUTO id PUNTOCOMA
    (44) variable -> . CHAR id IGUAL CHARACTER PUNTOCOMA
    (45) numerotipo -> . INT
    (46) numerotipo -> . FLOAT
    (47) numerotipo -> . LONG

    IF              shift and go to state 197
    LLAVEL          shift and go to state 145
    WHILE           shift and go to state 17
    AUTO            shift and go to state 119
    CHAR            shift and go to state 120
    INT             shift and go to state 121
    FLOAT           shift and go to state 122
    LONG            shift and go to state 123

    conllaves                      shift and go to state 195
    sinllaves                      shift and go to state 196
    while                          shift and go to state 146
    variable                       shift and go to state 147
    numerotipo                     shift and go to state 14

state 170

    (61) expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .

    $end            reduce using rule 61 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    LLAVER          reduce using rule 61 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    AUTO            reduce using rule 61 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    CHAR            reduce using rule 61 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    WHILE           reduce using rule 61 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    IF              reduce using rule 61 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    FOR             reduce using rule 61 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    PRINT           reduce using rule 61 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    COUT            reduce using rule 61 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    INT             reduce using rule 61 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    FLOAT           reduce using rule 61 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    LONG            reduce using rule 61 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    VOID            reduce using rule 61 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    RETURN          reduce using rule 61 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)


state 171

    (72) conllaves -> LLAVEL bodyblock . LLAVER
    (24) bodyblock -> bodyblock . variable
    (25) bodyblock -> bodyblock . while
    (26) bodyblock -> bodyblock . expresionif
    (27) bodyblock -> bodyblock . for
    (28) bodyblock -> bodyblock . imprimir
    (29) bodyblock -> bodyblock . arraydeclaration
    (40) variable -> . numerotipo id IGUAL numero PUNTOCOMA
    (41) variable -> . numerotipo id PUNTOCOMA
    (42) variable -> . AUTO id IGUAL valor PUNTOCOMA
    (43) variable -> . AUTO id PUNTOCOMA
    (44) variable -> . CHAR id IGUAL CHARACTER PUNTOCOMA
    (57) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (60) expresionif -> . IF LPAR condicionif RPAR conllaves expresionpos
    (61) expresionif -> . IF LPAR condicionif RPAR sinllaves expresionpos
    (99) for -> . FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER
    (22) imprimir -> . PRINT LPAR valor RPAR
    (23) imprimir -> . COUT MENOR MENOR valor
    (100) arraydeclaration -> . tipo id PUNTOCOMA
    (101) arraydeclaration -> . tipo id IGUAL LLAVEL arraydata LLAVER PUNTOCOMA
    (102) arraydeclaration -> . tipo id IGUAL LLAVEL LLAVER PUNTOCOMA
    (45) numerotipo -> . INT
    (46) numerotipo -> . FLOAT
    (47) numerotipo -> . LONG
    (16) tipo -> . INT
    (17) tipo -> . FLOAT
    (18) tipo -> . LONG
    (19) tipo -> . AUTO
    (20) tipo -> . CHAR
    (21) tipo -> . VOID

    LLAVER          shift and go to state 198
    AUTO            shift and go to state 15
    CHAR            shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 19
    FOR             shift and go to state 22
    PRINT           shift and go to state 27
    COUT            shift and go to state 28
    INT             shift and go to state 29
    FLOAT           shift and go to state 30
    LONG            shift and go to state 31
    VOID            shift and go to state 94

    variable                       shift and go to state 188
    while                          shift and go to state 189
    expresionif                    shift and go to state 190
    for                            shift and go to state 191
    imprimir                       shift and go to state 192
    arraydeclaration               shift and go to state 193
    numerotipo                     shift and go to state 14
    tipo                           shift and go to state 194

state 172

    (109) definicion -> tipo IDENTIFICADOR . PUNTOCOMA
    (111) funcionclaseimpl -> tipo IDENTIFICADOR . LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER

    PUNTOCOMA       shift and go to state 199
    LPAR            shift and go to state 97


state 173

    (116) parametrosfuncion -> IDENTIFICADOR masparametrosfuncion .

    RPAR            reduce using rule 116 (parametrosfuncion -> IDENTIFICADOR masparametrosfuncion .)


state 174

    (120) masparametrosfuncion -> COMMA . parametrosfuncion
    (116) parametrosfuncion -> . IDENTIFICADOR masparametrosfuncion
    (117) parametrosfuncion -> .

    IDENTIFICADOR   shift and go to state 153
    RPAR            reduce using rule 117 (parametrosfuncion -> .)

    parametrosfuncion              shift and go to state 200

state 175

    (127) usarfuncionobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR LPAR parametrosfuncion RPAR . PUNTOCOMA

    PUNTOCOMA       shift and go to state 201


state 176

    (99) for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA . loopfor RPAR LLAVEL bodyblock LLAVER
    (91) loopfor -> . asign
    (92) loopfor -> . unaryexp
    (93) asign -> . IDENTIFICADOR MAS valor
    (94) asign -> . IDENTIFICADOR MENOS valor
    (95) asign -> . IDENTIFICADOR ASTERISCO valor
    (96) asign -> . IDENTIFICADOR SLASH valor
    (97) unaryexp -> . IDENTIFICADOR MAS MAS
    (98) unaryexp -> . IDENTIFICADOR MENOS MENOS

    IDENTIFICADOR   shift and go to state 205

    loopfor                        shift and go to state 202
    asign                          shift and go to state 203
    unaryexp                       shift and go to state 204

state 177

    (90) condfor -> IDENTIFICADOR comparador . valor
    (50) valor -> . ENTERO
    (51) valor -> . FLOTANTE
    (52) valor -> . CHARACTER
    (53) valor -> . STRING
    (54) valor -> . TRUE
    (55) valor -> . FALSE
    (56) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 42
    FLOTANTE        shift and go to state 43
    CHARACTER       shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    IDENTIFICADOR   shift and go to state 41

    valor                          shift and go to state 206

state 178

    (89) initfor -> tipo IDENTIFICADOR IGUAL valor .

    PUNTOCOMA       reduce using rule 89 (initfor -> tipo IDENTIFICADOR IGUAL valor .)


state 179

    (101) arraydeclaration -> tipo id IGUAL LLAVEL arraydata LLAVER . PUNTOCOMA

    PUNTOCOMA       shift and go to state 207


state 180

    (103) arraydata -> arraydata COMMA . valor
    (50) valor -> . ENTERO
    (51) valor -> . FLOTANTE
    (52) valor -> . CHARACTER
    (53) valor -> . STRING
    (54) valor -> . TRUE
    (55) valor -> . FALSE
    (56) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 42
    FLOTANTE        shift and go to state 43
    CHARACTER       shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    IDENTIFICADOR   shift and go to state 41

    valor                          shift and go to state 208

state 181

    (102) arraydeclaration -> tipo id IGUAL LLAVEL LLAVER PUNTOCOMA .

    $end            reduce using rule 102 (arraydeclaration -> tipo id IGUAL LLAVEL LLAVER PUNTOCOMA .)
    LLAVER          reduce using rule 102 (arraydeclaration -> tipo id IGUAL LLAVEL LLAVER PUNTOCOMA .)
    AUTO            reduce using rule 102 (arraydeclaration -> tipo id IGUAL LLAVEL LLAVER PUNTOCOMA .)
    CHAR            reduce using rule 102 (arraydeclaration -> tipo id IGUAL LLAVEL LLAVER PUNTOCOMA .)
    WHILE           reduce using rule 102 (arraydeclaration -> tipo id IGUAL LLAVEL LLAVER PUNTOCOMA .)
    IF              reduce using rule 102 (arraydeclaration -> tipo id IGUAL LLAVEL LLAVER PUNTOCOMA .)
    FOR             reduce using rule 102 (arraydeclaration -> tipo id IGUAL LLAVEL LLAVER PUNTOCOMA .)
    PRINT           reduce using rule 102 (arraydeclaration -> tipo id IGUAL LLAVEL LLAVER PUNTOCOMA .)
    COUT            reduce using rule 102 (arraydeclaration -> tipo id IGUAL LLAVEL LLAVER PUNTOCOMA .)
    INT             reduce using rule 102 (arraydeclaration -> tipo id IGUAL LLAVEL LLAVER PUNTOCOMA .)
    FLOAT           reduce using rule 102 (arraydeclaration -> tipo id IGUAL LLAVEL LLAVER PUNTOCOMA .)
    LONG            reduce using rule 102 (arraydeclaration -> tipo id IGUAL LLAVEL LLAVER PUNTOCOMA .)
    VOID            reduce using rule 102 (arraydeclaration -> tipo id IGUAL LLAVEL LLAVER PUNTOCOMA .)
    RETURN          reduce using rule 102 (arraydeclaration -> tipo id IGUAL LLAVEL LLAVER PUNTOCOMA .)


state 182

    (114) parametrosimplementacion -> tipo IDENTIFICADOR masparametrosimplementacion .

    RPAR            reduce using rule 114 (parametrosimplementacion -> tipo IDENTIFICADOR masparametrosimplementacion .)


state 183

    (118) masparametrosimplementacion -> COMMA . parametrosimplementacion
    (114) parametrosimplementacion -> . tipo IDENTIFICADOR masparametrosimplementacion
    (115) parametrosimplementacion -> .
    (16) tipo -> . INT
    (17) tipo -> . FLOAT
    (18) tipo -> . LONG
    (19) tipo -> . AUTO
    (20) tipo -> . CHAR
    (21) tipo -> . VOID

    RPAR            reduce using rule 115 (parametrosimplementacion -> .)
    INT             shift and go to state 89
    FLOAT           shift and go to state 90
    LONG            shift and go to state 91
    AUTO            shift and go to state 92
    CHAR            shift and go to state 93
    VOID            shift and go to state 94

    parametrosimplementacion       shift and go to state 209
    tipo                           shift and go to state 130

state 184

    (111) funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL . bodyblock RETURN valor PUNTOCOMA LLAVER
    (24) bodyblock -> . bodyblock variable
    (25) bodyblock -> . bodyblock while
    (26) bodyblock -> . bodyblock expresionif
    (27) bodyblock -> . bodyblock for
    (28) bodyblock -> . bodyblock imprimir
    (29) bodyblock -> . bodyblock arraydeclaration
    (30) bodyblock -> .

    RETURN          reduce using rule 30 (bodyblock -> .)
    AUTO            reduce using rule 30 (bodyblock -> .)
    CHAR            reduce using rule 30 (bodyblock -> .)
    WHILE           reduce using rule 30 (bodyblock -> .)
    IF              reduce using rule 30 (bodyblock -> .)
    FOR             reduce using rule 30 (bodyblock -> .)
    PRINT           reduce using rule 30 (bodyblock -> .)
    COUT            reduce using rule 30 (bodyblock -> .)
    INT             reduce using rule 30 (bodyblock -> .)
    FLOAT           reduce using rule 30 (bodyblock -> .)
    LONG            reduce using rule 30 (bodyblock -> .)
    VOID            reduce using rule 30 (bodyblock -> .)

    bodyblock                      shift and go to state 210

state 185

    (112) funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL . bodyblock LLAVER
    (24) bodyblock -> . bodyblock variable
    (25) bodyblock -> . bodyblock while
    (26) bodyblock -> . bodyblock expresionif
    (27) bodyblock -> . bodyblock for
    (28) bodyblock -> . bodyblock imprimir
    (29) bodyblock -> . bodyblock arraydeclaration
    (30) bodyblock -> .

    LLAVER          reduce using rule 30 (bodyblock -> .)
    AUTO            reduce using rule 30 (bodyblock -> .)
    CHAR            reduce using rule 30 (bodyblock -> .)
    WHILE           reduce using rule 30 (bodyblock -> .)
    IF              reduce using rule 30 (bodyblock -> .)
    FOR             reduce using rule 30 (bodyblock -> .)
    PRINT           reduce using rule 30 (bodyblock -> .)
    COUT            reduce using rule 30 (bodyblock -> .)
    INT             reduce using rule 30 (bodyblock -> .)
    FLOAT           reduce using rule 30 (bodyblock -> .)
    LONG            reduce using rule 30 (bodyblock -> .)
    VOID            reduce using rule 30 (bodyblock -> .)

    bodyblock                      shift and go to state 211

state 186

    (59) struct -> STRUCT IDENTIFICADOR LLAVEL varblock LLAVER IDENTIFICADOR . PUNTOCOMA

    PUNTOCOMA       shift and go to state 212


state 187

    (57) while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .

    $end            reduce using rule 57 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    ELSE            reduce using rule 57 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    LLAVER          reduce using rule 57 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    AUTO            reduce using rule 57 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    CHAR            reduce using rule 57 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    WHILE           reduce using rule 57 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    IF              reduce using rule 57 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    FOR             reduce using rule 57 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    PRINT           reduce using rule 57 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    COUT            reduce using rule 57 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    INT             reduce using rule 57 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    FLOAT           reduce using rule 57 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    LONG            reduce using rule 57 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    VOID            reduce using rule 57 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    RETURN          reduce using rule 57 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)


state 188

    (24) bodyblock -> bodyblock variable .

    LLAVER          reduce using rule 24 (bodyblock -> bodyblock variable .)
    AUTO            reduce using rule 24 (bodyblock -> bodyblock variable .)
    CHAR            reduce using rule 24 (bodyblock -> bodyblock variable .)
    WHILE           reduce using rule 24 (bodyblock -> bodyblock variable .)
    IF              reduce using rule 24 (bodyblock -> bodyblock variable .)
    FOR             reduce using rule 24 (bodyblock -> bodyblock variable .)
    PRINT           reduce using rule 24 (bodyblock -> bodyblock variable .)
    COUT            reduce using rule 24 (bodyblock -> bodyblock variable .)
    INT             reduce using rule 24 (bodyblock -> bodyblock variable .)
    FLOAT           reduce using rule 24 (bodyblock -> bodyblock variable .)
    LONG            reduce using rule 24 (bodyblock -> bodyblock variable .)
    VOID            reduce using rule 24 (bodyblock -> bodyblock variable .)
    RETURN          reduce using rule 24 (bodyblock -> bodyblock variable .)


state 189

    (25) bodyblock -> bodyblock while .

    LLAVER          reduce using rule 25 (bodyblock -> bodyblock while .)
    AUTO            reduce using rule 25 (bodyblock -> bodyblock while .)
    CHAR            reduce using rule 25 (bodyblock -> bodyblock while .)
    WHILE           reduce using rule 25 (bodyblock -> bodyblock while .)
    IF              reduce using rule 25 (bodyblock -> bodyblock while .)
    FOR             reduce using rule 25 (bodyblock -> bodyblock while .)
    PRINT           reduce using rule 25 (bodyblock -> bodyblock while .)
    COUT            reduce using rule 25 (bodyblock -> bodyblock while .)
    INT             reduce using rule 25 (bodyblock -> bodyblock while .)
    FLOAT           reduce using rule 25 (bodyblock -> bodyblock while .)
    LONG            reduce using rule 25 (bodyblock -> bodyblock while .)
    VOID            reduce using rule 25 (bodyblock -> bodyblock while .)
    RETURN          reduce using rule 25 (bodyblock -> bodyblock while .)


state 190

    (26) bodyblock -> bodyblock expresionif .

    LLAVER          reduce using rule 26 (bodyblock -> bodyblock expresionif .)
    AUTO            reduce using rule 26 (bodyblock -> bodyblock expresionif .)
    CHAR            reduce using rule 26 (bodyblock -> bodyblock expresionif .)
    WHILE           reduce using rule 26 (bodyblock -> bodyblock expresionif .)
    IF              reduce using rule 26 (bodyblock -> bodyblock expresionif .)
    FOR             reduce using rule 26 (bodyblock -> bodyblock expresionif .)
    PRINT           reduce using rule 26 (bodyblock -> bodyblock expresionif .)
    COUT            reduce using rule 26 (bodyblock -> bodyblock expresionif .)
    INT             reduce using rule 26 (bodyblock -> bodyblock expresionif .)
    FLOAT           reduce using rule 26 (bodyblock -> bodyblock expresionif .)
    LONG            reduce using rule 26 (bodyblock -> bodyblock expresionif .)
    VOID            reduce using rule 26 (bodyblock -> bodyblock expresionif .)
    RETURN          reduce using rule 26 (bodyblock -> bodyblock expresionif .)


state 191

    (27) bodyblock -> bodyblock for .

    LLAVER          reduce using rule 27 (bodyblock -> bodyblock for .)
    AUTO            reduce using rule 27 (bodyblock -> bodyblock for .)
    CHAR            reduce using rule 27 (bodyblock -> bodyblock for .)
    WHILE           reduce using rule 27 (bodyblock -> bodyblock for .)
    IF              reduce using rule 27 (bodyblock -> bodyblock for .)
    FOR             reduce using rule 27 (bodyblock -> bodyblock for .)
    PRINT           reduce using rule 27 (bodyblock -> bodyblock for .)
    COUT            reduce using rule 27 (bodyblock -> bodyblock for .)
    INT             reduce using rule 27 (bodyblock -> bodyblock for .)
    FLOAT           reduce using rule 27 (bodyblock -> bodyblock for .)
    LONG            reduce using rule 27 (bodyblock -> bodyblock for .)
    VOID            reduce using rule 27 (bodyblock -> bodyblock for .)
    RETURN          reduce using rule 27 (bodyblock -> bodyblock for .)


state 192

    (28) bodyblock -> bodyblock imprimir .

    LLAVER          reduce using rule 28 (bodyblock -> bodyblock imprimir .)
    AUTO            reduce using rule 28 (bodyblock -> bodyblock imprimir .)
    CHAR            reduce using rule 28 (bodyblock -> bodyblock imprimir .)
    WHILE           reduce using rule 28 (bodyblock -> bodyblock imprimir .)
    IF              reduce using rule 28 (bodyblock -> bodyblock imprimir .)
    FOR             reduce using rule 28 (bodyblock -> bodyblock imprimir .)
    PRINT           reduce using rule 28 (bodyblock -> bodyblock imprimir .)
    COUT            reduce using rule 28 (bodyblock -> bodyblock imprimir .)
    INT             reduce using rule 28 (bodyblock -> bodyblock imprimir .)
    FLOAT           reduce using rule 28 (bodyblock -> bodyblock imprimir .)
    LONG            reduce using rule 28 (bodyblock -> bodyblock imprimir .)
    VOID            reduce using rule 28 (bodyblock -> bodyblock imprimir .)
    RETURN          reduce using rule 28 (bodyblock -> bodyblock imprimir .)


state 193

    (29) bodyblock -> bodyblock arraydeclaration .

    LLAVER          reduce using rule 29 (bodyblock -> bodyblock arraydeclaration .)
    AUTO            reduce using rule 29 (bodyblock -> bodyblock arraydeclaration .)
    CHAR            reduce using rule 29 (bodyblock -> bodyblock arraydeclaration .)
    WHILE           reduce using rule 29 (bodyblock -> bodyblock arraydeclaration .)
    IF              reduce using rule 29 (bodyblock -> bodyblock arraydeclaration .)
    FOR             reduce using rule 29 (bodyblock -> bodyblock arraydeclaration .)
    PRINT           reduce using rule 29 (bodyblock -> bodyblock arraydeclaration .)
    COUT            reduce using rule 29 (bodyblock -> bodyblock arraydeclaration .)
    INT             reduce using rule 29 (bodyblock -> bodyblock arraydeclaration .)
    FLOAT           reduce using rule 29 (bodyblock -> bodyblock arraydeclaration .)
    LONG            reduce using rule 29 (bodyblock -> bodyblock arraydeclaration .)
    VOID            reduce using rule 29 (bodyblock -> bodyblock arraydeclaration .)
    RETURN          reduce using rule 29 (bodyblock -> bodyblock arraydeclaration .)


state 194

    (100) arraydeclaration -> tipo . id PUNTOCOMA
    (101) arraydeclaration -> tipo . id IGUAL LLAVEL arraydata LLAVER PUNTOCOMA
    (102) arraydeclaration -> tipo . id IGUAL LLAVEL LLAVER PUNTOCOMA
    (14) id -> . IDENTIFICADOR
    (15) id -> . IDENTIFICADOR CORCHETEL ENTERO CORCHETER

    IDENTIFICADOR   shift and go to state 33

    id                             shift and go to state 53

state 195

    (68) else -> ELSE conllaves .

    $end            reduce using rule 68 (else -> ELSE conllaves .)
    LLAVER          reduce using rule 68 (else -> ELSE conllaves .)
    AUTO            reduce using rule 68 (else -> ELSE conllaves .)
    CHAR            reduce using rule 68 (else -> ELSE conllaves .)
    WHILE           reduce using rule 68 (else -> ELSE conllaves .)
    IF              reduce using rule 68 (else -> ELSE conllaves .)
    FOR             reduce using rule 68 (else -> ELSE conllaves .)
    PRINT           reduce using rule 68 (else -> ELSE conllaves .)
    COUT            reduce using rule 68 (else -> ELSE conllaves .)
    INT             reduce using rule 68 (else -> ELSE conllaves .)
    FLOAT           reduce using rule 68 (else -> ELSE conllaves .)
    LONG            reduce using rule 68 (else -> ELSE conllaves .)
    VOID            reduce using rule 68 (else -> ELSE conllaves .)
    RETURN          reduce using rule 68 (else -> ELSE conllaves .)


state 196

    (69) else -> ELSE sinllaves .

    $end            reduce using rule 69 (else -> ELSE sinllaves .)
    LLAVER          reduce using rule 69 (else -> ELSE sinllaves .)
    AUTO            reduce using rule 69 (else -> ELSE sinllaves .)
    CHAR            reduce using rule 69 (else -> ELSE sinllaves .)
    WHILE           reduce using rule 69 (else -> ELSE sinllaves .)
    IF              reduce using rule 69 (else -> ELSE sinllaves .)
    FOR             reduce using rule 69 (else -> ELSE sinllaves .)
    PRINT           reduce using rule 69 (else -> ELSE sinllaves .)
    COUT            reduce using rule 69 (else -> ELSE sinllaves .)
    INT             reduce using rule 69 (else -> ELSE sinllaves .)
    FLOAT           reduce using rule 69 (else -> ELSE sinllaves .)
    LONG            reduce using rule 69 (else -> ELSE sinllaves .)
    VOID            reduce using rule 69 (else -> ELSE sinllaves .)
    RETURN          reduce using rule 69 (else -> ELSE sinllaves .)


state 197

    (65) elseif -> ELSE IF . LPAR condicionif RPAR conllaves else
    (66) elseif -> ELSE IF . LPAR condicionif RPAR sinllaves else

    LPAR            shift and go to state 213


state 198

    (72) conllaves -> LLAVEL bodyblock LLAVER .

    ELSE            reduce using rule 72 (conllaves -> LLAVEL bodyblock LLAVER .)
    $end            reduce using rule 72 (conllaves -> LLAVEL bodyblock LLAVER .)
    LLAVER          reduce using rule 72 (conllaves -> LLAVEL bodyblock LLAVER .)
    AUTO            reduce using rule 72 (conllaves -> LLAVEL bodyblock LLAVER .)
    CHAR            reduce using rule 72 (conllaves -> LLAVEL bodyblock LLAVER .)
    WHILE           reduce using rule 72 (conllaves -> LLAVEL bodyblock LLAVER .)
    IF              reduce using rule 72 (conllaves -> LLAVEL bodyblock LLAVER .)
    FOR             reduce using rule 72 (conllaves -> LLAVEL bodyblock LLAVER .)
    PRINT           reduce using rule 72 (conllaves -> LLAVEL bodyblock LLAVER .)
    COUT            reduce using rule 72 (conllaves -> LLAVEL bodyblock LLAVER .)
    INT             reduce using rule 72 (conllaves -> LLAVEL bodyblock LLAVER .)
    FLOAT           reduce using rule 72 (conllaves -> LLAVEL bodyblock LLAVER .)
    LONG            reduce using rule 72 (conllaves -> LLAVEL bodyblock LLAVER .)
    VOID            reduce using rule 72 (conllaves -> LLAVEL bodyblock LLAVER .)
    RETURN          reduce using rule 72 (conllaves -> LLAVEL bodyblock LLAVER .)


state 199

    (109) definicion -> tipo IDENTIFICADOR PUNTOCOMA .

    LLAVER          reduce using rule 109 (definicion -> tipo IDENTIFICADOR PUNTOCOMA .)
    VOID            reduce using rule 109 (definicion -> tipo IDENTIFICADOR PUNTOCOMA .)
    INT             reduce using rule 109 (definicion -> tipo IDENTIFICADOR PUNTOCOMA .)
    FLOAT           reduce using rule 109 (definicion -> tipo IDENTIFICADOR PUNTOCOMA .)
    LONG            reduce using rule 109 (definicion -> tipo IDENTIFICADOR PUNTOCOMA .)
    AUTO            reduce using rule 109 (definicion -> tipo IDENTIFICADOR PUNTOCOMA .)
    CHAR            reduce using rule 109 (definicion -> tipo IDENTIFICADOR PUNTOCOMA .)


state 200

    (120) masparametrosfuncion -> COMMA parametrosfuncion .

    RPAR            reduce using rule 120 (masparametrosfuncion -> COMMA parametrosfuncion .)


state 201

    (127) usarfuncionobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR LPAR parametrosfuncion RPAR PUNTOCOMA .

    $end            reduce using rule 127 (usarfuncionobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR LPAR parametrosfuncion RPAR PUNTOCOMA .)


state 202

    (99) for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor . RPAR LLAVEL bodyblock LLAVER

    RPAR            shift and go to state 214


state 203

    (91) loopfor -> asign .

    RPAR            reduce using rule 91 (loopfor -> asign .)


state 204

    (92) loopfor -> unaryexp .

    RPAR            reduce using rule 92 (loopfor -> unaryexp .)


state 205

    (93) asign -> IDENTIFICADOR . MAS valor
    (94) asign -> IDENTIFICADOR . MENOS valor
    (95) asign -> IDENTIFICADOR . ASTERISCO valor
    (96) asign -> IDENTIFICADOR . SLASH valor
    (97) unaryexp -> IDENTIFICADOR . MAS MAS
    (98) unaryexp -> IDENTIFICADOR . MENOS MENOS

    MAS             shift and go to state 215
    MENOS           shift and go to state 216
    ASTERISCO       shift and go to state 217
    SLASH           shift and go to state 218


state 206

    (90) condfor -> IDENTIFICADOR comparador valor .

    PUNTOCOMA       reduce using rule 90 (condfor -> IDENTIFICADOR comparador valor .)


state 207

    (101) arraydeclaration -> tipo id IGUAL LLAVEL arraydata LLAVER PUNTOCOMA .

    $end            reduce using rule 101 (arraydeclaration -> tipo id IGUAL LLAVEL arraydata LLAVER PUNTOCOMA .)
    LLAVER          reduce using rule 101 (arraydeclaration -> tipo id IGUAL LLAVEL arraydata LLAVER PUNTOCOMA .)
    AUTO            reduce using rule 101 (arraydeclaration -> tipo id IGUAL LLAVEL arraydata LLAVER PUNTOCOMA .)
    CHAR            reduce using rule 101 (arraydeclaration -> tipo id IGUAL LLAVEL arraydata LLAVER PUNTOCOMA .)
    WHILE           reduce using rule 101 (arraydeclaration -> tipo id IGUAL LLAVEL arraydata LLAVER PUNTOCOMA .)
    IF              reduce using rule 101 (arraydeclaration -> tipo id IGUAL LLAVEL arraydata LLAVER PUNTOCOMA .)
    FOR             reduce using rule 101 (arraydeclaration -> tipo id IGUAL LLAVEL arraydata LLAVER PUNTOCOMA .)
    PRINT           reduce using rule 101 (arraydeclaration -> tipo id IGUAL LLAVEL arraydata LLAVER PUNTOCOMA .)
    COUT            reduce using rule 101 (arraydeclaration -> tipo id IGUAL LLAVEL arraydata LLAVER PUNTOCOMA .)
    INT             reduce using rule 101 (arraydeclaration -> tipo id IGUAL LLAVEL arraydata LLAVER PUNTOCOMA .)
    FLOAT           reduce using rule 101 (arraydeclaration -> tipo id IGUAL LLAVEL arraydata LLAVER PUNTOCOMA .)
    LONG            reduce using rule 101 (arraydeclaration -> tipo id IGUAL LLAVEL arraydata LLAVER PUNTOCOMA .)
    VOID            reduce using rule 101 (arraydeclaration -> tipo id IGUAL LLAVEL arraydata LLAVER PUNTOCOMA .)
    RETURN          reduce using rule 101 (arraydeclaration -> tipo id IGUAL LLAVEL arraydata LLAVER PUNTOCOMA .)


state 208

    (103) arraydata -> arraydata COMMA valor .

    LLAVER          reduce using rule 103 (arraydata -> arraydata COMMA valor .)
    COMMA           reduce using rule 103 (arraydata -> arraydata COMMA valor .)


state 209

    (118) masparametrosimplementacion -> COMMA parametrosimplementacion .

    RPAR            reduce using rule 118 (masparametrosimplementacion -> COMMA parametrosimplementacion .)


state 210

    (111) funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock . RETURN valor PUNTOCOMA LLAVER
    (24) bodyblock -> bodyblock . variable
    (25) bodyblock -> bodyblock . while
    (26) bodyblock -> bodyblock . expresionif
    (27) bodyblock -> bodyblock . for
    (28) bodyblock -> bodyblock . imprimir
    (29) bodyblock -> bodyblock . arraydeclaration
    (40) variable -> . numerotipo id IGUAL numero PUNTOCOMA
    (41) variable -> . numerotipo id PUNTOCOMA
    (42) variable -> . AUTO id IGUAL valor PUNTOCOMA
    (43) variable -> . AUTO id PUNTOCOMA
    (44) variable -> . CHAR id IGUAL CHARACTER PUNTOCOMA
    (57) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (60) expresionif -> . IF LPAR condicionif RPAR conllaves expresionpos
    (61) expresionif -> . IF LPAR condicionif RPAR sinllaves expresionpos
    (99) for -> . FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER
    (22) imprimir -> . PRINT LPAR valor RPAR
    (23) imprimir -> . COUT MENOR MENOR valor
    (100) arraydeclaration -> . tipo id PUNTOCOMA
    (101) arraydeclaration -> . tipo id IGUAL LLAVEL arraydata LLAVER PUNTOCOMA
    (102) arraydeclaration -> . tipo id IGUAL LLAVEL LLAVER PUNTOCOMA
    (45) numerotipo -> . INT
    (46) numerotipo -> . FLOAT
    (47) numerotipo -> . LONG
    (16) tipo -> . INT
    (17) tipo -> . FLOAT
    (18) tipo -> . LONG
    (19) tipo -> . AUTO
    (20) tipo -> . CHAR
    (21) tipo -> . VOID

    RETURN          shift and go to state 219
    AUTO            shift and go to state 15
    CHAR            shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 19
    FOR             shift and go to state 22
    PRINT           shift and go to state 27
    COUT            shift and go to state 28
    INT             shift and go to state 29
    FLOAT           shift and go to state 30
    LONG            shift and go to state 31
    VOID            shift and go to state 94

    tipo                           shift and go to state 194
    variable                       shift and go to state 188
    while                          shift and go to state 189
    expresionif                    shift and go to state 190
    for                            shift and go to state 191
    imprimir                       shift and go to state 192
    arraydeclaration               shift and go to state 193
    numerotipo                     shift and go to state 14

state 211

    (112) funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock . LLAVER
    (24) bodyblock -> bodyblock . variable
    (25) bodyblock -> bodyblock . while
    (26) bodyblock -> bodyblock . expresionif
    (27) bodyblock -> bodyblock . for
    (28) bodyblock -> bodyblock . imprimir
    (29) bodyblock -> bodyblock . arraydeclaration
    (40) variable -> . numerotipo id IGUAL numero PUNTOCOMA
    (41) variable -> . numerotipo id PUNTOCOMA
    (42) variable -> . AUTO id IGUAL valor PUNTOCOMA
    (43) variable -> . AUTO id PUNTOCOMA
    (44) variable -> . CHAR id IGUAL CHARACTER PUNTOCOMA
    (57) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (60) expresionif -> . IF LPAR condicionif RPAR conllaves expresionpos
    (61) expresionif -> . IF LPAR condicionif RPAR sinllaves expresionpos
    (99) for -> . FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER
    (22) imprimir -> . PRINT LPAR valor RPAR
    (23) imprimir -> . COUT MENOR MENOR valor
    (100) arraydeclaration -> . tipo id PUNTOCOMA
    (101) arraydeclaration -> . tipo id IGUAL LLAVEL arraydata LLAVER PUNTOCOMA
    (102) arraydeclaration -> . tipo id IGUAL LLAVEL LLAVER PUNTOCOMA
    (45) numerotipo -> . INT
    (46) numerotipo -> . FLOAT
    (47) numerotipo -> . LONG
    (16) tipo -> . INT
    (17) tipo -> . FLOAT
    (18) tipo -> . LONG
    (19) tipo -> . AUTO
    (20) tipo -> . CHAR
    (21) tipo -> . VOID

    LLAVER          shift and go to state 220
    AUTO            shift and go to state 15
    CHAR            shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 19
    FOR             shift and go to state 22
    PRINT           shift and go to state 27
    COUT            shift and go to state 28
    INT             shift and go to state 29
    FLOAT           shift and go to state 30
    LONG            shift and go to state 31
    VOID            shift and go to state 94

    variable                       shift and go to state 188
    while                          shift and go to state 189
    expresionif                    shift and go to state 190
    for                            shift and go to state 191
    imprimir                       shift and go to state 192
    arraydeclaration               shift and go to state 193
    numerotipo                     shift and go to state 14
    tipo                           shift and go to state 194

state 212

    (59) struct -> STRUCT IDENTIFICADOR LLAVEL varblock LLAVER IDENTIFICADOR PUNTOCOMA .

    $end            reduce using rule 59 (struct -> STRUCT IDENTIFICADOR LLAVEL varblock LLAVER IDENTIFICADOR PUNTOCOMA .)


state 213

    (65) elseif -> ELSE IF LPAR . condicionif RPAR conllaves else
    (66) elseif -> ELSE IF LPAR . condicionif RPAR sinllaves else
    (73) condicionif -> . initcondicion
    (74) condicionif -> . statement
    (75) initcondicion -> . varblock statement
    (76) statement -> . expresion
    (77) statement -> . EXCLAMACION boolean
    (78) statement -> . EXCLAMACION LPAR expresion RPAR
    (79) statement -> . EXCLAMACION IDENTIFICADOR
    (38) varblock -> . varblock variable
    (39) varblock -> .
    (58) expresion -> . expresion comparador expresion
    (82) expresion -> . valor
    (50) valor -> . ENTERO
    (51) valor -> . FLOTANTE
    (52) valor -> . CHARACTER
    (53) valor -> . STRING
    (54) valor -> . TRUE
    (55) valor -> . FALSE
    (56) valor -> . IDENTIFICADOR

  ! shift/reduce conflict for EXCLAMACION resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for FLOTANTE resolved as shift
  ! shift/reduce conflict for CHARACTER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for IDENTIFICADOR resolved as shift
    EXCLAMACION     shift and go to state 40
    AUTO            reduce using rule 39 (varblock -> .)
    CHAR            reduce using rule 39 (varblock -> .)
    INT             reduce using rule 39 (varblock -> .)
    FLOAT           reduce using rule 39 (varblock -> .)
    LONG            reduce using rule 39 (varblock -> .)
    ENTERO          shift and go to state 42
    FLOTANTE        shift and go to state 43
    CHARACTER       shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    IDENTIFICADOR   shift and go to state 41

  ! EXCLAMACION     [ reduce using rule 39 (varblock -> .) ]
  ! ENTERO          [ reduce using rule 39 (varblock -> .) ]
  ! FLOTANTE        [ reduce using rule 39 (varblock -> .) ]
  ! CHARACTER       [ reduce using rule 39 (varblock -> .) ]
  ! STRING          [ reduce using rule 39 (varblock -> .) ]
  ! TRUE            [ reduce using rule 39 (varblock -> .) ]
  ! FALSE           [ reduce using rule 39 (varblock -> .) ]
  ! IDENTIFICADOR   [ reduce using rule 39 (varblock -> .) ]

    condicionif                    shift and go to state 221
    initcondicion                  shift and go to state 81
    statement                      shift and go to state 82
    varblock                       shift and go to state 83
    expresion                      shift and go to state 67
    valor                          shift and go to state 39

state 214

    (99) for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR . LLAVEL bodyblock LLAVER

    LLAVEL          shift and go to state 222


state 215

    (93) asign -> IDENTIFICADOR MAS . valor
    (97) unaryexp -> IDENTIFICADOR MAS . MAS
    (50) valor -> . ENTERO
    (51) valor -> . FLOTANTE
    (52) valor -> . CHARACTER
    (53) valor -> . STRING
    (54) valor -> . TRUE
    (55) valor -> . FALSE
    (56) valor -> . IDENTIFICADOR

    MAS             shift and go to state 223
    ENTERO          shift and go to state 42
    FLOTANTE        shift and go to state 43
    CHARACTER       shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    IDENTIFICADOR   shift and go to state 41

    valor                          shift and go to state 224

state 216

    (94) asign -> IDENTIFICADOR MENOS . valor
    (98) unaryexp -> IDENTIFICADOR MENOS . MENOS
    (50) valor -> . ENTERO
    (51) valor -> . FLOTANTE
    (52) valor -> . CHARACTER
    (53) valor -> . STRING
    (54) valor -> . TRUE
    (55) valor -> . FALSE
    (56) valor -> . IDENTIFICADOR

    MENOS           shift and go to state 225
    ENTERO          shift and go to state 42
    FLOTANTE        shift and go to state 43
    CHARACTER       shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    IDENTIFICADOR   shift and go to state 41

    valor                          shift and go to state 226

state 217

    (95) asign -> IDENTIFICADOR ASTERISCO . valor
    (50) valor -> . ENTERO
    (51) valor -> . FLOTANTE
    (52) valor -> . CHARACTER
    (53) valor -> . STRING
    (54) valor -> . TRUE
    (55) valor -> . FALSE
    (56) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 42
    FLOTANTE        shift and go to state 43
    CHARACTER       shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    IDENTIFICADOR   shift and go to state 41

    valor                          shift and go to state 227

state 218

    (96) asign -> IDENTIFICADOR SLASH . valor
    (50) valor -> . ENTERO
    (51) valor -> . FLOTANTE
    (52) valor -> . CHARACTER
    (53) valor -> . STRING
    (54) valor -> . TRUE
    (55) valor -> . FALSE
    (56) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 42
    FLOTANTE        shift and go to state 43
    CHARACTER       shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    IDENTIFICADOR   shift and go to state 41

    valor                          shift and go to state 228

state 219

    (111) funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN . valor PUNTOCOMA LLAVER
    (50) valor -> . ENTERO
    (51) valor -> . FLOTANTE
    (52) valor -> . CHARACTER
    (53) valor -> . STRING
    (54) valor -> . TRUE
    (55) valor -> . FALSE
    (56) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 42
    FLOTANTE        shift and go to state 43
    CHARACTER       shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    IDENTIFICADOR   shift and go to state 41

    valor                          shift and go to state 229

state 220

    (112) funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER .

    $end            reduce using rule 112 (funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER .)
    LLAVER          reduce using rule 112 (funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER .)
    VOID            reduce using rule 112 (funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER .)
    INT             reduce using rule 112 (funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER .)
    FLOAT           reduce using rule 112 (funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER .)
    LONG            reduce using rule 112 (funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER .)
    AUTO            reduce using rule 112 (funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER .)
    CHAR            reduce using rule 112 (funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER .)


state 221

    (65) elseif -> ELSE IF LPAR condicionif . RPAR conllaves else
    (66) elseif -> ELSE IF LPAR condicionif . RPAR sinllaves else

    RPAR            shift and go to state 230


state 222

    (99) for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL . bodyblock LLAVER
    (24) bodyblock -> . bodyblock variable
    (25) bodyblock -> . bodyblock while
    (26) bodyblock -> . bodyblock expresionif
    (27) bodyblock -> . bodyblock for
    (28) bodyblock -> . bodyblock imprimir
    (29) bodyblock -> . bodyblock arraydeclaration
    (30) bodyblock -> .

    LLAVER          reduce using rule 30 (bodyblock -> .)
    AUTO            reduce using rule 30 (bodyblock -> .)
    CHAR            reduce using rule 30 (bodyblock -> .)
    WHILE           reduce using rule 30 (bodyblock -> .)
    IF              reduce using rule 30 (bodyblock -> .)
    FOR             reduce using rule 30 (bodyblock -> .)
    PRINT           reduce using rule 30 (bodyblock -> .)
    COUT            reduce using rule 30 (bodyblock -> .)
    INT             reduce using rule 30 (bodyblock -> .)
    FLOAT           reduce using rule 30 (bodyblock -> .)
    LONG            reduce using rule 30 (bodyblock -> .)
    VOID            reduce using rule 30 (bodyblock -> .)

    bodyblock                      shift and go to state 231

state 223

    (97) unaryexp -> IDENTIFICADOR MAS MAS .

    RPAR            reduce using rule 97 (unaryexp -> IDENTIFICADOR MAS MAS .)


state 224

    (93) asign -> IDENTIFICADOR MAS valor .

    RPAR            reduce using rule 93 (asign -> IDENTIFICADOR MAS valor .)


state 225

    (98) unaryexp -> IDENTIFICADOR MENOS MENOS .

    RPAR            reduce using rule 98 (unaryexp -> IDENTIFICADOR MENOS MENOS .)


state 226

    (94) asign -> IDENTIFICADOR MENOS valor .

    RPAR            reduce using rule 94 (asign -> IDENTIFICADOR MENOS valor .)


state 227

    (95) asign -> IDENTIFICADOR ASTERISCO valor .

    RPAR            reduce using rule 95 (asign -> IDENTIFICADOR ASTERISCO valor .)


state 228

    (96) asign -> IDENTIFICADOR SLASH valor .

    RPAR            reduce using rule 96 (asign -> IDENTIFICADOR SLASH valor .)


state 229

    (111) funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor . PUNTOCOMA LLAVER

    PUNTOCOMA       shift and go to state 232


state 230

    (65) elseif -> ELSE IF LPAR condicionif RPAR . conllaves else
    (66) elseif -> ELSE IF LPAR condicionif RPAR . sinllaves else
    (72) conllaves -> . LLAVEL bodyblock LLAVER
    (70) sinllaves -> . while
    (71) sinllaves -> . variable
    (57) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (40) variable -> . numerotipo id IGUAL numero PUNTOCOMA
    (41) variable -> . numerotipo id PUNTOCOMA
    (42) variable -> . AUTO id IGUAL valor PUNTOCOMA
    (43) variable -> . AUTO id PUNTOCOMA
    (44) variable -> . CHAR id IGUAL CHARACTER PUNTOCOMA
    (45) numerotipo -> . INT
    (46) numerotipo -> . FLOAT
    (47) numerotipo -> . LONG

    LLAVEL          shift and go to state 145
    WHILE           shift and go to state 17
    AUTO            shift and go to state 119
    CHAR            shift and go to state 120
    INT             shift and go to state 121
    FLOAT           shift and go to state 122
    LONG            shift and go to state 123

    conllaves                      shift and go to state 233
    sinllaves                      shift and go to state 234
    while                          shift and go to state 146
    variable                       shift and go to state 147
    numerotipo                     shift and go to state 14

state 231

    (99) for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock . LLAVER
    (24) bodyblock -> bodyblock . variable
    (25) bodyblock -> bodyblock . while
    (26) bodyblock -> bodyblock . expresionif
    (27) bodyblock -> bodyblock . for
    (28) bodyblock -> bodyblock . imprimir
    (29) bodyblock -> bodyblock . arraydeclaration
    (40) variable -> . numerotipo id IGUAL numero PUNTOCOMA
    (41) variable -> . numerotipo id PUNTOCOMA
    (42) variable -> . AUTO id IGUAL valor PUNTOCOMA
    (43) variable -> . AUTO id PUNTOCOMA
    (44) variable -> . CHAR id IGUAL CHARACTER PUNTOCOMA
    (57) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (60) expresionif -> . IF LPAR condicionif RPAR conllaves expresionpos
    (61) expresionif -> . IF LPAR condicionif RPAR sinllaves expresionpos
    (99) for -> . FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER
    (22) imprimir -> . PRINT LPAR valor RPAR
    (23) imprimir -> . COUT MENOR MENOR valor
    (100) arraydeclaration -> . tipo id PUNTOCOMA
    (101) arraydeclaration -> . tipo id IGUAL LLAVEL arraydata LLAVER PUNTOCOMA
    (102) arraydeclaration -> . tipo id IGUAL LLAVEL LLAVER PUNTOCOMA
    (45) numerotipo -> . INT
    (46) numerotipo -> . FLOAT
    (47) numerotipo -> . LONG
    (16) tipo -> . INT
    (17) tipo -> . FLOAT
    (18) tipo -> . LONG
    (19) tipo -> . AUTO
    (20) tipo -> . CHAR
    (21) tipo -> . VOID

    LLAVER          shift and go to state 235
    AUTO            shift and go to state 15
    CHAR            shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 19
    FOR             shift and go to state 22
    PRINT           shift and go to state 27
    COUT            shift and go to state 28
    INT             shift and go to state 29
    FLOAT           shift and go to state 30
    LONG            shift and go to state 31
    VOID            shift and go to state 94

    variable                       shift and go to state 188
    while                          shift and go to state 189
    expresionif                    shift and go to state 190
    for                            shift and go to state 191
    imprimir                       shift and go to state 192
    arraydeclaration               shift and go to state 193
    numerotipo                     shift and go to state 14
    tipo                           shift and go to state 194

state 232

    (111) funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA . LLAVER

    LLAVER          shift and go to state 236


state 233

    (65) elseif -> ELSE IF LPAR condicionif RPAR conllaves . else
    (68) else -> . ELSE conllaves
    (69) else -> . ELSE sinllaves

    ELSE            shift and go to state 237

    else                           shift and go to state 238

state 234

    (66) elseif -> ELSE IF LPAR condicionif RPAR sinllaves . else
    (68) else -> . ELSE conllaves
    (69) else -> . ELSE sinllaves

    ELSE            shift and go to state 237

    else                           shift and go to state 239

state 235

    (99) for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .

    $end            reduce using rule 99 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)
    LLAVER          reduce using rule 99 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)
    AUTO            reduce using rule 99 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)
    CHAR            reduce using rule 99 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)
    WHILE           reduce using rule 99 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)
    IF              reduce using rule 99 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)
    FOR             reduce using rule 99 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)
    PRINT           reduce using rule 99 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)
    COUT            reduce using rule 99 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)
    INT             reduce using rule 99 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)
    FLOAT           reduce using rule 99 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)
    LONG            reduce using rule 99 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)
    VOID            reduce using rule 99 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)
    RETURN          reduce using rule 99 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)


state 236

    (111) funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER .

    $end            reduce using rule 111 (funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER .)
    LLAVER          reduce using rule 111 (funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER .)
    VOID            reduce using rule 111 (funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER .)
    INT             reduce using rule 111 (funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER .)
    FLOAT           reduce using rule 111 (funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER .)
    LONG            reduce using rule 111 (funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER .)
    AUTO            reduce using rule 111 (funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER .)
    CHAR            reduce using rule 111 (funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER .)


state 237

    (68) else -> ELSE . conllaves
    (69) else -> ELSE . sinllaves
    (72) conllaves -> . LLAVEL bodyblock LLAVER
    (70) sinllaves -> . while
    (71) sinllaves -> . variable
    (57) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (40) variable -> . numerotipo id IGUAL numero PUNTOCOMA
    (41) variable -> . numerotipo id PUNTOCOMA
    (42) variable -> . AUTO id IGUAL valor PUNTOCOMA
    (43) variable -> . AUTO id PUNTOCOMA
    (44) variable -> . CHAR id IGUAL CHARACTER PUNTOCOMA
    (45) numerotipo -> . INT
    (46) numerotipo -> . FLOAT
    (47) numerotipo -> . LONG

    LLAVEL          shift and go to state 145
    WHILE           shift and go to state 17
    AUTO            shift and go to state 119
    CHAR            shift and go to state 120
    INT             shift and go to state 121
    FLOAT           shift and go to state 122
    LONG            shift and go to state 123

    conllaves                      shift and go to state 195
    sinllaves                      shift and go to state 196
    while                          shift and go to state 146
    variable                       shift and go to state 147
    numerotipo                     shift and go to state 14

state 238

    (65) elseif -> ELSE IF LPAR condicionif RPAR conllaves else .

    $end            reduce using rule 65 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    LLAVER          reduce using rule 65 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    AUTO            reduce using rule 65 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    CHAR            reduce using rule 65 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    WHILE           reduce using rule 65 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    IF              reduce using rule 65 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    FOR             reduce using rule 65 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    PRINT           reduce using rule 65 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    COUT            reduce using rule 65 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    INT             reduce using rule 65 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    FLOAT           reduce using rule 65 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    LONG            reduce using rule 65 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    VOID            reduce using rule 65 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    RETURN          reduce using rule 65 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)


state 239

    (66) elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .

    $end            reduce using rule 66 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    LLAVER          reduce using rule 66 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    AUTO            reduce using rule 66 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    CHAR            reduce using rule 66 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    WHILE           reduce using rule 66 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    IF              reduce using rule 66 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    FOR             reduce using rule 66 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    PRINT           reduce using rule 66 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    COUT            reduce using rule 66 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    INT             reduce using rule 66 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    FLOAT           reduce using rule 66 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    LONG            reduce using rule 66 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    VOID            reduce using rule 66 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    RETURN          reduce using rule 66 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IDENTIFICADOR in state 15 resolved as shift
WARNING: shift/reduce conflict for IDENTIFICADOR in state 16 resolved as shift
WARNING: shift/reduce conflict for IDENTIFICADOR in state 24 resolved as shift
WARNING: shift/reduce conflict for RPAR in state 37 resolved as shift
WARNING: shift/reduce conflict for EXCLAMACION in state 48 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 48 resolved as shift
WARNING: shift/reduce conflict for FLOTANTE in state 48 resolved as shift
WARNING: shift/reduce conflict for CHARACTER in state 48 resolved as shift
WARNING: shift/reduce conflict for STRING in state 48 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 48 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 48 resolved as shift
WARNING: shift/reduce conflict for IDENTIFICADOR in state 48 resolved as shift
WARNING: shift/reduce conflict for IGUAL in state 110 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 110 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 110 resolved as shift
WARNING: shift/reduce conflict for EXCLAMACION in state 110 resolved as shift
WARNING: shift/reduce conflict for LLAVER in state 124 resolved as shift
WARNING: shift/reduce conflict for VOID in state 124 resolved as shift
WARNING: shift/reduce conflict for LLAVER in state 124 resolved as shift
WARNING: shift/reduce conflict for VOID in state 124 resolved as shift
WARNING: shift/reduce conflict for INT in state 124 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 124 resolved as shift
WARNING: shift/reduce conflict for LONG in state 124 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 124 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 124 resolved as shift
WARNING: shift/reduce conflict for EXCLAMACION in state 213 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 213 resolved as shift
WARNING: shift/reduce conflict for FLOTANTE in state 213 resolved as shift
WARNING: shift/reduce conflict for CHARACTER in state 213 resolved as shift
WARNING: shift/reduce conflict for STRING in state 213 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 213 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 213 resolved as shift
WARNING: shift/reduce conflict for IDENTIFICADOR in state 213 resolved as shift
WARNING: reduce/reduce conflict in state 0 resolved using rule (body -> <empty>)
WARNING: rejected rule (funcionclaseimpl -> <empty>) in state 0
WARNING: reduce/reduce conflict in state 29 resolved using rule (tipo -> INT)
WARNING: rejected rule (numerotipo -> INT) in state 29
WARNING: reduce/reduce conflict in state 30 resolved using rule (tipo -> FLOAT)
WARNING: rejected rule (numerotipo -> FLOAT) in state 30
WARNING: reduce/reduce conflict in state 31 resolved using rule (tipo -> LONG)
WARNING: rejected rule (numerotipo -> LONG) in state 31
WARNING: reduce/reduce conflict in state 124 resolved using rule (definicion -> <empty>)
WARNING: rejected rule (funcionclaseimpl -> <empty>) in state 124
WARNING: reduce/reduce conflict in state 143 resolved using rule (expresionpos -> <empty>)
WARNING: rejected rule (elseif -> <empty>) in state 143
WARNING: reduce/reduce conflict in state 144 resolved using rule (expresionpos -> <empty>)
WARNING: rejected rule (elseif -> <empty>) in state 144
WARNING: Rule (funcionclaseimpl -> <empty>) is never reduced
WARNING: Rule (elseif -> <empty>) is never reduced
