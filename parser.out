Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    BACKSLASH
    BOOL
    CIRCUNFLEJO
    COMADOBLE
    COMASIMPLE
    COMENTARIO
    DOBLEPUNTO
    INTERROGACION
    NEW
    NULLPOINTER
    NUMERAL
    PIPE
    PORCENTAJE
    PRIVATE
    PROTECTED
    PUBLIC
    PUNTERO
    STATIC
    THEN
    VIRGUILA

Grammar

Rule 0     S' -> body
Rule 1     body -> variable
Rule 2     body -> while
Rule 3     body -> expresionif
Rule 4     body -> claseimplementacion
Rule 5     body -> for
Rule 6     body -> arraydeclaration
Rule 7     body -> funcionclaseimpl
Rule 8     body -> creacionobjeto
Rule 9     body -> asignarvalorobjeto
Rule 10    body -> usarfuncionobjeto
Rule 11    body -> struct
Rule 12    body -> imprimir
Rule 13    body -> <empty>
Rule 14    tipo -> INT
Rule 15    tipo -> FLOAT
Rule 16    tipo -> LONG
Rule 17    tipo -> AUTO
Rule 18    tipo -> CHAR
Rule 19    tipo -> VOID
Rule 20    imprimir -> PRINT LPAR valor RPAR
Rule 21    bodyblock -> bodyblock variable
Rule 22    bodyblock -> bodyblock while
Rule 23    bodyblock -> bodyblock expresionif
Rule 24    bodyblock -> bodyblock for
Rule 25    bodyblock -> bodyblock imprimir
Rule 26    bodyblock -> <empty>
Rule 27    funcionblock -> bodyblock variable
Rule 28    funcionblock -> bodyblock while
Rule 29    funcionblock -> bodyblock expresionif
Rule 30    funcionblock -> bodyblock for
Rule 31    funcionblock -> bodyblock imprimir
Rule 32    funcionblock -> RETURN statement
Rule 33    funcionblock -> <empty>
Rule 34    varblock -> varblock variable
Rule 35    varblock -> <empty>
Rule 36    variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA
Rule 37    variable -> AUTO IDENTIFICADOR PUNTOCOMA
Rule 38    variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA
Rule 39    variable -> numerotipo IDENTIFICADOR PUNTOCOMA
Rule 40    variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA
Rule 41    numerotipo -> INT
Rule 42    numerotipo -> FLOAT
Rule 43    numerotipo -> LONG
Rule 44    numero -> ENTERO
Rule 45    numero -> FLOTANTE
Rule 46    valor -> ENTERO
Rule 47    valor -> FLOTANTE
Rule 48    valor -> CHARACTER
Rule 49    valor -> STRING
Rule 50    valor -> TRUE
Rule 51    valor -> FALSE
Rule 52    valor -> IDENTIFICADOR
Rule 53    while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
Rule 54    expresion -> expresion comparador expresion
Rule 55    struct -> STRUCT IDENTIFICADOR LLAVEL varblock LLAVER IDENTIFICADOR PUNTOCOMA
Rule 56    expresionif -> IF LPAR condicionif RPAR conllaves expresionpos
Rule 57    expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos
Rule 58    expresionpos -> else
Rule 59    expresionpos -> elseif
Rule 60    expresionpos -> <empty>
Rule 61    elseif -> ELSE IF LPAR condicionif RPAR conllaves else
Rule 62    elseif -> ELSE IF LPAR condicionif RPAR sinllaves else
Rule 63    elseif -> <empty>
Rule 64    else -> ELSE conllaves
Rule 65    else -> ELSE sinllaves
Rule 66    sinllaves -> while
Rule 67    sinllaves -> variable
Rule 68    conllaves -> LLAVEL bodyblock LLAVER
Rule 69    condicionif -> initcondicion
Rule 70    condicionif -> statement
Rule 71    initcondicion -> varblock statement
Rule 72    statement -> expresion
Rule 73    statement -> EXCLAMACION boolean
Rule 74    statement -> EXCLAMACION LPAR expresion RPAR
Rule 75    statement -> EXCLAMACION IDENTIFICADOR
Rule 76    boolean -> TRUE
Rule 77    boolean -> FALSE
Rule 78    expresion -> valor
Rule 79    comparador -> IGUAL IGUAL
Rule 80    comparador -> MENOR
Rule 81    comparador -> MAYOR
Rule 82    comparador -> MENOR IGUAL
Rule 83    comparador -> MAYOR IGUAL
Rule 84    comparador -> EXCLAMACION IGUAL
Rule 85    initfor -> tipo IDENTIFICADOR IGUAL valor
Rule 86    condfor -> IDENTIFICADOR comparador valor
Rule 87    loopfor -> asign
Rule 88    loopfor -> unaryexp
Rule 89    asign -> IDENTIFICADOR MAS valor
Rule 90    asign -> IDENTIFICADOR MENOS valor
Rule 91    asign -> IDENTIFICADOR ASTERISCO valor
Rule 92    asign -> IDENTIFICADOR SLASH valor
Rule 93    unaryexp -> IDENTIFICADOR MAS MAS
Rule 94    unaryexp -> IDENTIFICADOR MENOS MENOS
Rule 95    for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER
Rule 96    arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER PUNTOCOMA
Rule 97    arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL LLAVEL arraydata LLAVER PUNTOCOMA
Rule 98    arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL LLAVEL LLAVER PUNTOCOMA
Rule 99    arraydata -> arraydata COMMA valor
Rule 100   arraydata -> valor
Rule 101   claseimplementacion -> CLASS IDENTIFICADOR LLAVEL bloqueclase LLAVER
Rule 102   bloqueclase -> bloqueclase definicion
Rule 103   bloqueclase -> bloqueclase funcionclaseimpl
Rule 104   bloqueclase -> <empty>
Rule 105   definicion -> tipo IDENTIFICADOR PUNTOCOMA
Rule 106   definicion -> <empty>
Rule 107   funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER
Rule 108   funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER
Rule 109   funcionclaseimpl -> <empty>
Rule 110   parametrosimplementacion -> tipo IDENTIFICADOR masparametrosimplementacion
Rule 111   parametrosimplementacion -> <empty>
Rule 112   parametrosfuncion -> IDENTIFICADOR masparametrosfuncion
Rule 113   parametrosfuncion -> <empty>
Rule 114   masparametrosimplementacion -> COMMA parametrosimplementacion
Rule 115   masparametrosimplementacion -> <empty>
Rule 116   masparametrosfuncion -> COMMA parametrosfuncion
Rule 117   masparametrosfuncion -> <empty>
Rule 118   creacionobjeto -> IDENTIFICADOR IDENTIFICADOR PUNTOCOMA
Rule 119   asignarvalorobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR IGUAL valor
Rule 120   asignarvalorobjeto -> LPAR expresion RPAR
Rule 121   asignarvalorobjeto -> LPAR statement RPAR
Rule 122   asignarvalorobjeto -> EXCLAMACION LPAR statement RPAR
Rule 123   usarfuncionobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR LPAR parametrosfuncion RPAR PUNTOCOMA

Terminals, with rules where they appear

AND                  : 
ASTERISCO            : 91
AUTO                 : 17 36 37
BACKSLASH            : 
BOOL                 : 
CHAR                 : 18 40
CHARACTER            : 40 48
CIRCUNFLEJO          : 
CLASS                : 101
COMADOBLE            : 
COMASIMPLE           : 
COMENTARIO           : 
COMMA                : 99 114 116
CORCHETEL            : 96 97 98
CORCHETER            : 96 97 98
DOBLEPUNTO           : 
ELSE                 : 61 62 64 65
ENTERO               : 44 46 96 97 98
EXCLAMACION          : 73 74 75 84 122
FALSE                : 51 77
FLOAT                : 15 42
FLOTANTE             : 45 47
FOR                  : 95
IDENTIFICADOR        : 36 37 38 39 40 52 55 55 75 85 86 89 90 91 92 93 94 96 97 98 101 105 107 108 110 112 118 118 119 119 123 123
IF                   : 56 57 61 62
IGUAL                : 36 38 40 79 79 82 83 84 85 97 98 119
INT                  : 14 41
INTERROGACION        : 
LLAVEL               : 53 55 68 95 97 98 101 107 108
LLAVER               : 53 55 68 95 97 98 101 107 108
LONG                 : 16 43
LPAR                 : 20 53 56 57 61 62 74 95 107 108 120 121 122 123
MAS                  : 89 93 93
MAYOR                : 81 83
MENOR                : 80 82
MENOS                : 90 94 94
NEW                  : 
NULLPOINTER          : 
NUMERAL              : 
PIPE                 : 
PORCENTAJE           : 
PRINT                : 20
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
PUNTERO              : 
PUNTO                : 119 123
PUNTOCOMA            : 36 37 38 39 40 55 95 95 96 97 98 105 107 118 123
RETURN               : 32 107
RPAR                 : 20 53 56 57 61 62 74 95 107 108 120 121 122 123
SLASH                : 92
STATIC               : 
STRING               : 49
STRUCT               : 55
THEN                 : 
TRUE                 : 50 76
VIRGUILA             : 
VOID                 : 19 108
WHILE                : 53
error                : 

Nonterminals, with rules where they appear

arraydata            : 97 99
arraydeclaration     : 6
asign                : 87
asignarvalorobjeto   : 9
bloqueclase          : 101 102 103
body                 : 0
bodyblock            : 21 22 23 24 25 27 28 29 30 31 53 68 95 107 108
boolean              : 73
claseimplementacion  : 4
comparador           : 54 86
condfor              : 95
condicionif          : 56 57 61 62
conllaves            : 56 61 64
creacionobjeto       : 8
definicion           : 102
else                 : 58 61 62
elseif               : 59
expresion            : 54 54 72 74 120
expresionif          : 3 23 29
expresionpos         : 56 57
for                  : 5 24 30
funcionblock         : 
funcionclaseimpl     : 7 103
imprimir             : 12 25 31
initcondicion        : 69
initfor              : 95
loopfor              : 95
masparametrosfuncion : 112
masparametrosimplementacion : 110
numero               : 38
numerotipo           : 38 39
parametrosfuncion    : 116 123
parametrosimplementacion : 107 108 114
sinllaves            : 57 62 65
statement            : 32 53 70 71 121 122
struct               : 11
tipo                 : 85 96 97 98 105 107 110
unaryexp             : 88
usarfuncionobjeto    : 10
valor                : 20 36 78 85 86 89 90 91 92 99 100 107 119
varblock             : 34 55 71
variable             : 1 21 27 34 67
while                : 2 22 28 66

Parsing method: LALR

state 0

    (0) S' -> . body
    (1) body -> . variable
    (2) body -> . while
    (3) body -> . expresionif
    (4) body -> . claseimplementacion
    (5) body -> . for
    (6) body -> . arraydeclaration
    (7) body -> . funcionclaseimpl
    (8) body -> . creacionobjeto
    (9) body -> . asignarvalorobjeto
    (10) body -> . usarfuncionobjeto
    (11) body -> . struct
    (12) body -> . imprimir
    (13) body -> .
    (36) variable -> . AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA
    (37) variable -> . AUTO IDENTIFICADOR PUNTOCOMA
    (38) variable -> . numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA
    (39) variable -> . numerotipo IDENTIFICADOR PUNTOCOMA
    (40) variable -> . CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA
    (53) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (56) expresionif -> . IF LPAR condicionif RPAR conllaves expresionpos
    (57) expresionif -> . IF LPAR condicionif RPAR sinllaves expresionpos
    (101) claseimplementacion -> . CLASS IDENTIFICADOR LLAVEL bloqueclase LLAVER
    (95) for -> . FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER
    (96) arraydeclaration -> . tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER PUNTOCOMA
    (97) arraydeclaration -> . tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL LLAVEL arraydata LLAVER PUNTOCOMA
    (98) arraydeclaration -> . tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL LLAVEL LLAVER PUNTOCOMA
    (107) funcionclaseimpl -> . tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER
    (108) funcionclaseimpl -> . VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER
    (109) funcionclaseimpl -> .
    (118) creacionobjeto -> . IDENTIFICADOR IDENTIFICADOR PUNTOCOMA
    (119) asignarvalorobjeto -> . IDENTIFICADOR PUNTO IDENTIFICADOR IGUAL valor
    (120) asignarvalorobjeto -> . LPAR expresion RPAR
    (121) asignarvalorobjeto -> . LPAR statement RPAR
    (122) asignarvalorobjeto -> . EXCLAMACION LPAR statement RPAR
    (123) usarfuncionobjeto -> . IDENTIFICADOR PUNTO IDENTIFICADOR LPAR parametrosfuncion RPAR PUNTOCOMA
    (55) struct -> . STRUCT IDENTIFICADOR LLAVEL varblock LLAVER IDENTIFICADOR PUNTOCOMA
    (20) imprimir -> . PRINT LPAR valor RPAR
    (41) numerotipo -> . INT
    (42) numerotipo -> . FLOAT
    (43) numerotipo -> . LONG
    (14) tipo -> . INT
    (15) tipo -> . FLOAT
    (16) tipo -> . LONG
    (17) tipo -> . AUTO
    (18) tipo -> . CHAR
    (19) tipo -> . VOID

  ! reduce/reduce conflict for $end resolved using rule 13 (body -> .)
    $end            reduce using rule 13 (body -> .)
    AUTO            shift and go to state 14
    CHAR            shift and go to state 17
    WHILE           shift and go to state 18
    IF              shift and go to state 20
    CLASS           shift and go to state 21
    FOR             shift and go to state 22
    VOID            shift and go to state 24
    IDENTIFICADOR   shift and go to state 15
    LPAR            shift and go to state 19
    EXCLAMACION     shift and go to state 25
    STRUCT          shift and go to state 26
    PRINT           shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    LONG            shift and go to state 30

  ! $end            [ reduce using rule 109 (funcionclaseimpl -> .) ]

    body                           shift and go to state 1
    variable                       shift and go to state 2
    while                          shift and go to state 3
    expresionif                    shift and go to state 4
    claseimplementacion            shift and go to state 5
    for                            shift and go to state 6
    arraydeclaration               shift and go to state 7
    funcionclaseimpl               shift and go to state 8
    creacionobjeto                 shift and go to state 9
    asignarvalorobjeto             shift and go to state 10
    usarfuncionobjeto              shift and go to state 11
    struct                         shift and go to state 12
    imprimir                       shift and go to state 13
    numerotipo                     shift and go to state 16
    tipo                           shift and go to state 23

state 1

    (0) S' -> body .



state 2

    (1) body -> variable .

    $end            reduce using rule 1 (body -> variable .)


state 3

    (2) body -> while .

    $end            reduce using rule 2 (body -> while .)


state 4

    (3) body -> expresionif .

    $end            reduce using rule 3 (body -> expresionif .)


state 5

    (4) body -> claseimplementacion .

    $end            reduce using rule 4 (body -> claseimplementacion .)


state 6

    (5) body -> for .

    $end            reduce using rule 5 (body -> for .)


state 7

    (6) body -> arraydeclaration .

    $end            reduce using rule 6 (body -> arraydeclaration .)


state 8

    (7) body -> funcionclaseimpl .

    $end            reduce using rule 7 (body -> funcionclaseimpl .)


state 9

    (8) body -> creacionobjeto .

    $end            reduce using rule 8 (body -> creacionobjeto .)


state 10

    (9) body -> asignarvalorobjeto .

    $end            reduce using rule 9 (body -> asignarvalorobjeto .)


state 11

    (10) body -> usarfuncionobjeto .

    $end            reduce using rule 10 (body -> usarfuncionobjeto .)


state 12

    (11) body -> struct .

    $end            reduce using rule 11 (body -> struct .)


state 13

    (12) body -> imprimir .

    $end            reduce using rule 12 (body -> imprimir .)


state 14

    (36) variable -> AUTO . IDENTIFICADOR IGUAL valor PUNTOCOMA
    (37) variable -> AUTO . IDENTIFICADOR PUNTOCOMA
    (17) tipo -> AUTO .

  ! shift/reduce conflict for IDENTIFICADOR resolved as shift
    IDENTIFICADOR   shift and go to state 31

  ! IDENTIFICADOR   [ reduce using rule 17 (tipo -> AUTO .) ]


state 15

    (118) creacionobjeto -> IDENTIFICADOR . IDENTIFICADOR PUNTOCOMA
    (119) asignarvalorobjeto -> IDENTIFICADOR . PUNTO IDENTIFICADOR IGUAL valor
    (123) usarfuncionobjeto -> IDENTIFICADOR . PUNTO IDENTIFICADOR LPAR parametrosfuncion RPAR PUNTOCOMA

    IDENTIFICADOR   shift and go to state 32
    PUNTO           shift and go to state 33


state 16

    (38) variable -> numerotipo . IDENTIFICADOR IGUAL numero PUNTOCOMA
    (39) variable -> numerotipo . IDENTIFICADOR PUNTOCOMA

    IDENTIFICADOR   shift and go to state 34


state 17

    (40) variable -> CHAR . IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA
    (18) tipo -> CHAR .

  ! shift/reduce conflict for IDENTIFICADOR resolved as shift
    IDENTIFICADOR   shift and go to state 35

  ! IDENTIFICADOR   [ reduce using rule 18 (tipo -> CHAR .) ]


state 18

    (53) while -> WHILE . LPAR statement RPAR LLAVEL bodyblock LLAVER

    LPAR            shift and go to state 36


state 19

    (120) asignarvalorobjeto -> LPAR . expresion RPAR
    (121) asignarvalorobjeto -> LPAR . statement RPAR
    (54) expresion -> . expresion comparador expresion
    (78) expresion -> . valor
    (72) statement -> . expresion
    (73) statement -> . EXCLAMACION boolean
    (74) statement -> . EXCLAMACION LPAR expresion RPAR
    (75) statement -> . EXCLAMACION IDENTIFICADOR
    (46) valor -> . ENTERO
    (47) valor -> . FLOTANTE
    (48) valor -> . CHARACTER
    (49) valor -> . STRING
    (50) valor -> . TRUE
    (51) valor -> . FALSE
    (52) valor -> . IDENTIFICADOR

    EXCLAMACION     shift and go to state 40
    ENTERO          shift and go to state 42
    FLOTANTE        shift and go to state 43
    CHARACTER       shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    IDENTIFICADOR   shift and go to state 41

    expresion                      shift and go to state 37
    statement                      shift and go to state 38
    valor                          shift and go to state 39

state 20

    (56) expresionif -> IF . LPAR condicionif RPAR conllaves expresionpos
    (57) expresionif -> IF . LPAR condicionif RPAR sinllaves expresionpos

    LPAR            shift and go to state 48


state 21

    (101) claseimplementacion -> CLASS . IDENTIFICADOR LLAVEL bloqueclase LLAVER

    IDENTIFICADOR   shift and go to state 49


state 22

    (95) for -> FOR . LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER

    LPAR            shift and go to state 50


state 23

    (96) arraydeclaration -> tipo . IDENTIFICADOR CORCHETEL ENTERO CORCHETER PUNTOCOMA
    (97) arraydeclaration -> tipo . IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL LLAVEL arraydata LLAVER PUNTOCOMA
    (98) arraydeclaration -> tipo . IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL LLAVEL LLAVER PUNTOCOMA
    (107) funcionclaseimpl -> tipo . IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER

    IDENTIFICADOR   shift and go to state 51


state 24

    (108) funcionclaseimpl -> VOID . IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER
    (19) tipo -> VOID .

  ! shift/reduce conflict for IDENTIFICADOR resolved as shift
    IDENTIFICADOR   shift and go to state 52

  ! IDENTIFICADOR   [ reduce using rule 19 (tipo -> VOID .) ]


state 25

    (122) asignarvalorobjeto -> EXCLAMACION . LPAR statement RPAR

    LPAR            shift and go to state 53


state 26

    (55) struct -> STRUCT . IDENTIFICADOR LLAVEL varblock LLAVER IDENTIFICADOR PUNTOCOMA

    IDENTIFICADOR   shift and go to state 54


state 27

    (20) imprimir -> PRINT . LPAR valor RPAR

    LPAR            shift and go to state 55


state 28

    (41) numerotipo -> INT .
    (14) tipo -> INT .

  ! reduce/reduce conflict for IDENTIFICADOR resolved using rule 14 (tipo -> INT .)
    IDENTIFICADOR   reduce using rule 14 (tipo -> INT .)

  ! IDENTIFICADOR   [ reduce using rule 41 (numerotipo -> INT .) ]


state 29

    (42) numerotipo -> FLOAT .
    (15) tipo -> FLOAT .

  ! reduce/reduce conflict for IDENTIFICADOR resolved using rule 15 (tipo -> FLOAT .)
    IDENTIFICADOR   reduce using rule 15 (tipo -> FLOAT .)

  ! IDENTIFICADOR   [ reduce using rule 42 (numerotipo -> FLOAT .) ]


state 30

    (43) numerotipo -> LONG .
    (16) tipo -> LONG .

  ! reduce/reduce conflict for IDENTIFICADOR resolved using rule 16 (tipo -> LONG .)
    IDENTIFICADOR   reduce using rule 16 (tipo -> LONG .)

  ! IDENTIFICADOR   [ reduce using rule 43 (numerotipo -> LONG .) ]


state 31

    (36) variable -> AUTO IDENTIFICADOR . IGUAL valor PUNTOCOMA
    (37) variable -> AUTO IDENTIFICADOR . PUNTOCOMA

    IGUAL           shift and go to state 56
    PUNTOCOMA       shift and go to state 57


state 32

    (118) creacionobjeto -> IDENTIFICADOR IDENTIFICADOR . PUNTOCOMA

    PUNTOCOMA       shift and go to state 58


state 33

    (119) asignarvalorobjeto -> IDENTIFICADOR PUNTO . IDENTIFICADOR IGUAL valor
    (123) usarfuncionobjeto -> IDENTIFICADOR PUNTO . IDENTIFICADOR LPAR parametrosfuncion RPAR PUNTOCOMA

    IDENTIFICADOR   shift and go to state 59


state 34

    (38) variable -> numerotipo IDENTIFICADOR . IGUAL numero PUNTOCOMA
    (39) variable -> numerotipo IDENTIFICADOR . PUNTOCOMA

    IGUAL           shift and go to state 60
    PUNTOCOMA       shift and go to state 61


state 35

    (40) variable -> CHAR IDENTIFICADOR . IGUAL CHARACTER PUNTOCOMA

    IGUAL           shift and go to state 62


state 36

    (53) while -> WHILE LPAR . statement RPAR LLAVEL bodyblock LLAVER
    (72) statement -> . expresion
    (73) statement -> . EXCLAMACION boolean
    (74) statement -> . EXCLAMACION LPAR expresion RPAR
    (75) statement -> . EXCLAMACION IDENTIFICADOR
    (54) expresion -> . expresion comparador expresion
    (78) expresion -> . valor
    (46) valor -> . ENTERO
    (47) valor -> . FLOTANTE
    (48) valor -> . CHARACTER
    (49) valor -> . STRING
    (50) valor -> . TRUE
    (51) valor -> . FALSE
    (52) valor -> . IDENTIFICADOR

    EXCLAMACION     shift and go to state 40
    ENTERO          shift and go to state 42
    FLOTANTE        shift and go to state 43
    CHARACTER       shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    IDENTIFICADOR   shift and go to state 41

    statement                      shift and go to state 63
    expresion                      shift and go to state 64
    valor                          shift and go to state 39

state 37

    (120) asignarvalorobjeto -> LPAR expresion . RPAR
    (54) expresion -> expresion . comparador expresion
    (72) statement -> expresion .
    (79) comparador -> . IGUAL IGUAL
    (80) comparador -> . MENOR
    (81) comparador -> . MAYOR
    (82) comparador -> . MENOR IGUAL
    (83) comparador -> . MAYOR IGUAL
    (84) comparador -> . EXCLAMACION IGUAL

  ! shift/reduce conflict for RPAR resolved as shift
    RPAR            shift and go to state 65
    IGUAL           shift and go to state 67
    MENOR           shift and go to state 68
    MAYOR           shift and go to state 69
    EXCLAMACION     shift and go to state 70

  ! RPAR            [ reduce using rule 72 (statement -> expresion .) ]

    comparador                     shift and go to state 66

state 38

    (121) asignarvalorobjeto -> LPAR statement . RPAR

    RPAR            shift and go to state 71


state 39

    (78) expresion -> valor .

    RPAR            reduce using rule 78 (expresion -> valor .)
    IGUAL           reduce using rule 78 (expresion -> valor .)
    MENOR           reduce using rule 78 (expresion -> valor .)
    MAYOR           reduce using rule 78 (expresion -> valor .)
    EXCLAMACION     reduce using rule 78 (expresion -> valor .)


state 40

    (73) statement -> EXCLAMACION . boolean
    (74) statement -> EXCLAMACION . LPAR expresion RPAR
    (75) statement -> EXCLAMACION . IDENTIFICADOR
    (76) boolean -> . TRUE
    (77) boolean -> . FALSE

    LPAR            shift and go to state 73
    IDENTIFICADOR   shift and go to state 74
    TRUE            shift and go to state 75
    FALSE           shift and go to state 76

    boolean                        shift and go to state 72

state 41

    (52) valor -> IDENTIFICADOR .

    RPAR            reduce using rule 52 (valor -> IDENTIFICADOR .)
    IGUAL           reduce using rule 52 (valor -> IDENTIFICADOR .)
    MENOR           reduce using rule 52 (valor -> IDENTIFICADOR .)
    MAYOR           reduce using rule 52 (valor -> IDENTIFICADOR .)
    EXCLAMACION     reduce using rule 52 (valor -> IDENTIFICADOR .)
    PUNTOCOMA       reduce using rule 52 (valor -> IDENTIFICADOR .)
    $end            reduce using rule 52 (valor -> IDENTIFICADOR .)
    LLAVER          reduce using rule 52 (valor -> IDENTIFICADOR .)
    COMMA           reduce using rule 52 (valor -> IDENTIFICADOR .)


state 42

    (46) valor -> ENTERO .

    RPAR            reduce using rule 46 (valor -> ENTERO .)
    IGUAL           reduce using rule 46 (valor -> ENTERO .)
    MENOR           reduce using rule 46 (valor -> ENTERO .)
    MAYOR           reduce using rule 46 (valor -> ENTERO .)
    EXCLAMACION     reduce using rule 46 (valor -> ENTERO .)
    PUNTOCOMA       reduce using rule 46 (valor -> ENTERO .)
    $end            reduce using rule 46 (valor -> ENTERO .)
    LLAVER          reduce using rule 46 (valor -> ENTERO .)
    COMMA           reduce using rule 46 (valor -> ENTERO .)


state 43

    (47) valor -> FLOTANTE .

    RPAR            reduce using rule 47 (valor -> FLOTANTE .)
    IGUAL           reduce using rule 47 (valor -> FLOTANTE .)
    MENOR           reduce using rule 47 (valor -> FLOTANTE .)
    MAYOR           reduce using rule 47 (valor -> FLOTANTE .)
    EXCLAMACION     reduce using rule 47 (valor -> FLOTANTE .)
    PUNTOCOMA       reduce using rule 47 (valor -> FLOTANTE .)
    $end            reduce using rule 47 (valor -> FLOTANTE .)
    LLAVER          reduce using rule 47 (valor -> FLOTANTE .)
    COMMA           reduce using rule 47 (valor -> FLOTANTE .)


state 44

    (48) valor -> CHARACTER .

    RPAR            reduce using rule 48 (valor -> CHARACTER .)
    IGUAL           reduce using rule 48 (valor -> CHARACTER .)
    MENOR           reduce using rule 48 (valor -> CHARACTER .)
    MAYOR           reduce using rule 48 (valor -> CHARACTER .)
    EXCLAMACION     reduce using rule 48 (valor -> CHARACTER .)
    PUNTOCOMA       reduce using rule 48 (valor -> CHARACTER .)
    $end            reduce using rule 48 (valor -> CHARACTER .)
    LLAVER          reduce using rule 48 (valor -> CHARACTER .)
    COMMA           reduce using rule 48 (valor -> CHARACTER .)


state 45

    (49) valor -> STRING .

    RPAR            reduce using rule 49 (valor -> STRING .)
    IGUAL           reduce using rule 49 (valor -> STRING .)
    MENOR           reduce using rule 49 (valor -> STRING .)
    MAYOR           reduce using rule 49 (valor -> STRING .)
    EXCLAMACION     reduce using rule 49 (valor -> STRING .)
    PUNTOCOMA       reduce using rule 49 (valor -> STRING .)
    $end            reduce using rule 49 (valor -> STRING .)
    LLAVER          reduce using rule 49 (valor -> STRING .)
    COMMA           reduce using rule 49 (valor -> STRING .)


state 46

    (50) valor -> TRUE .

    RPAR            reduce using rule 50 (valor -> TRUE .)
    IGUAL           reduce using rule 50 (valor -> TRUE .)
    MENOR           reduce using rule 50 (valor -> TRUE .)
    MAYOR           reduce using rule 50 (valor -> TRUE .)
    EXCLAMACION     reduce using rule 50 (valor -> TRUE .)
    PUNTOCOMA       reduce using rule 50 (valor -> TRUE .)
    $end            reduce using rule 50 (valor -> TRUE .)
    LLAVER          reduce using rule 50 (valor -> TRUE .)
    COMMA           reduce using rule 50 (valor -> TRUE .)


state 47

    (51) valor -> FALSE .

    RPAR            reduce using rule 51 (valor -> FALSE .)
    IGUAL           reduce using rule 51 (valor -> FALSE .)
    MENOR           reduce using rule 51 (valor -> FALSE .)
    MAYOR           reduce using rule 51 (valor -> FALSE .)
    EXCLAMACION     reduce using rule 51 (valor -> FALSE .)
    PUNTOCOMA       reduce using rule 51 (valor -> FALSE .)
    $end            reduce using rule 51 (valor -> FALSE .)
    LLAVER          reduce using rule 51 (valor -> FALSE .)
    COMMA           reduce using rule 51 (valor -> FALSE .)


state 48

    (56) expresionif -> IF LPAR . condicionif RPAR conllaves expresionpos
    (57) expresionif -> IF LPAR . condicionif RPAR sinllaves expresionpos
    (69) condicionif -> . initcondicion
    (70) condicionif -> . statement
    (71) initcondicion -> . varblock statement
    (72) statement -> . expresion
    (73) statement -> . EXCLAMACION boolean
    (74) statement -> . EXCLAMACION LPAR expresion RPAR
    (75) statement -> . EXCLAMACION IDENTIFICADOR
    (34) varblock -> . varblock variable
    (35) varblock -> .
    (54) expresion -> . expresion comparador expresion
    (78) expresion -> . valor
    (46) valor -> . ENTERO
    (47) valor -> . FLOTANTE
    (48) valor -> . CHARACTER
    (49) valor -> . STRING
    (50) valor -> . TRUE
    (51) valor -> . FALSE
    (52) valor -> . IDENTIFICADOR

  ! shift/reduce conflict for EXCLAMACION resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for FLOTANTE resolved as shift
  ! shift/reduce conflict for CHARACTER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for IDENTIFICADOR resolved as shift
    EXCLAMACION     shift and go to state 40
    AUTO            reduce using rule 35 (varblock -> .)
    CHAR            reduce using rule 35 (varblock -> .)
    INT             reduce using rule 35 (varblock -> .)
    FLOAT           reduce using rule 35 (varblock -> .)
    LONG            reduce using rule 35 (varblock -> .)
    ENTERO          shift and go to state 42
    FLOTANTE        shift and go to state 43
    CHARACTER       shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    IDENTIFICADOR   shift and go to state 41

  ! EXCLAMACION     [ reduce using rule 35 (varblock -> .) ]
  ! ENTERO          [ reduce using rule 35 (varblock -> .) ]
  ! FLOTANTE        [ reduce using rule 35 (varblock -> .) ]
  ! CHARACTER       [ reduce using rule 35 (varblock -> .) ]
  ! STRING          [ reduce using rule 35 (varblock -> .) ]
  ! TRUE            [ reduce using rule 35 (varblock -> .) ]
  ! FALSE           [ reduce using rule 35 (varblock -> .) ]
  ! IDENTIFICADOR   [ reduce using rule 35 (varblock -> .) ]

    condicionif                    shift and go to state 77
    initcondicion                  shift and go to state 78
    statement                      shift and go to state 79
    varblock                       shift and go to state 80
    expresion                      shift and go to state 64
    valor                          shift and go to state 39

state 49

    (101) claseimplementacion -> CLASS IDENTIFICADOR . LLAVEL bloqueclase LLAVER

    LLAVEL          shift and go to state 81


state 50

    (95) for -> FOR LPAR . initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER
    (85) initfor -> . tipo IDENTIFICADOR IGUAL valor
    (14) tipo -> . INT
    (15) tipo -> . FLOAT
    (16) tipo -> . LONG
    (17) tipo -> . AUTO
    (18) tipo -> . CHAR
    (19) tipo -> . VOID

    INT             shift and go to state 84
    FLOAT           shift and go to state 85
    LONG            shift and go to state 86
    AUTO            shift and go to state 87
    CHAR            shift and go to state 88
    VOID            shift and go to state 89

    initfor                        shift and go to state 82
    tipo                           shift and go to state 83

state 51

    (96) arraydeclaration -> tipo IDENTIFICADOR . CORCHETEL ENTERO CORCHETER PUNTOCOMA
    (97) arraydeclaration -> tipo IDENTIFICADOR . CORCHETEL ENTERO CORCHETER IGUAL LLAVEL arraydata LLAVER PUNTOCOMA
    (98) arraydeclaration -> tipo IDENTIFICADOR . CORCHETEL ENTERO CORCHETER IGUAL LLAVEL LLAVER PUNTOCOMA
    (107) funcionclaseimpl -> tipo IDENTIFICADOR . LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER

    CORCHETEL       shift and go to state 90
    LPAR            shift and go to state 91


state 52

    (108) funcionclaseimpl -> VOID IDENTIFICADOR . LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER

    LPAR            shift and go to state 92


state 53

    (122) asignarvalorobjeto -> EXCLAMACION LPAR . statement RPAR
    (72) statement -> . expresion
    (73) statement -> . EXCLAMACION boolean
    (74) statement -> . EXCLAMACION LPAR expresion RPAR
    (75) statement -> . EXCLAMACION IDENTIFICADOR
    (54) expresion -> . expresion comparador expresion
    (78) expresion -> . valor
    (46) valor -> . ENTERO
    (47) valor -> . FLOTANTE
    (48) valor -> . CHARACTER
    (49) valor -> . STRING
    (50) valor -> . TRUE
    (51) valor -> . FALSE
    (52) valor -> . IDENTIFICADOR

    EXCLAMACION     shift and go to state 40
    ENTERO          shift and go to state 42
    FLOTANTE        shift and go to state 43
    CHARACTER       shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    IDENTIFICADOR   shift and go to state 41

    statement                      shift and go to state 93
    expresion                      shift and go to state 64
    valor                          shift and go to state 39

state 54

    (55) struct -> STRUCT IDENTIFICADOR . LLAVEL varblock LLAVER IDENTIFICADOR PUNTOCOMA

    LLAVEL          shift and go to state 94


state 55

    (20) imprimir -> PRINT LPAR . valor RPAR
    (46) valor -> . ENTERO
    (47) valor -> . FLOTANTE
    (48) valor -> . CHARACTER
    (49) valor -> . STRING
    (50) valor -> . TRUE
    (51) valor -> . FALSE
    (52) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 42
    FLOTANTE        shift and go to state 43
    CHARACTER       shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    IDENTIFICADOR   shift and go to state 41

    valor                          shift and go to state 95

state 56

    (36) variable -> AUTO IDENTIFICADOR IGUAL . valor PUNTOCOMA
    (46) valor -> . ENTERO
    (47) valor -> . FLOTANTE
    (48) valor -> . CHARACTER
    (49) valor -> . STRING
    (50) valor -> . TRUE
    (51) valor -> . FALSE
    (52) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 42
    FLOTANTE        shift and go to state 43
    CHARACTER       shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    IDENTIFICADOR   shift and go to state 41

    valor                          shift and go to state 96

state 57

    (37) variable -> AUTO IDENTIFICADOR PUNTOCOMA .

    $end            reduce using rule 37 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    EXCLAMACION     reduce using rule 37 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    AUTO            reduce using rule 37 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    CHAR            reduce using rule 37 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    INT             reduce using rule 37 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    FLOAT           reduce using rule 37 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    LONG            reduce using rule 37 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    ENTERO          reduce using rule 37 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    FLOTANTE        reduce using rule 37 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    CHARACTER       reduce using rule 37 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    STRING          reduce using rule 37 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    TRUE            reduce using rule 37 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    FALSE           reduce using rule 37 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    IDENTIFICADOR   reduce using rule 37 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    ELSE            reduce using rule 37 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    LLAVER          reduce using rule 37 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    WHILE           reduce using rule 37 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    IF              reduce using rule 37 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    FOR             reduce using rule 37 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    PRINT           reduce using rule 37 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    RETURN          reduce using rule 37 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)


state 58

    (118) creacionobjeto -> IDENTIFICADOR IDENTIFICADOR PUNTOCOMA .

    $end            reduce using rule 118 (creacionobjeto -> IDENTIFICADOR IDENTIFICADOR PUNTOCOMA .)


state 59

    (119) asignarvalorobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR . IGUAL valor
    (123) usarfuncionobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR . LPAR parametrosfuncion RPAR PUNTOCOMA

    IGUAL           shift and go to state 97
    LPAR            shift and go to state 98


state 60

    (38) variable -> numerotipo IDENTIFICADOR IGUAL . numero PUNTOCOMA
    (44) numero -> . ENTERO
    (45) numero -> . FLOTANTE

    ENTERO          shift and go to state 100
    FLOTANTE        shift and go to state 101

    numero                         shift and go to state 99

state 61

    (39) variable -> numerotipo IDENTIFICADOR PUNTOCOMA .

    $end            reduce using rule 39 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    EXCLAMACION     reduce using rule 39 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    AUTO            reduce using rule 39 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    CHAR            reduce using rule 39 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    INT             reduce using rule 39 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    FLOAT           reduce using rule 39 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    LONG            reduce using rule 39 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    ENTERO          reduce using rule 39 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    FLOTANTE        reduce using rule 39 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    CHARACTER       reduce using rule 39 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    STRING          reduce using rule 39 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    TRUE            reduce using rule 39 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    FALSE           reduce using rule 39 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    IDENTIFICADOR   reduce using rule 39 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    ELSE            reduce using rule 39 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    LLAVER          reduce using rule 39 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    WHILE           reduce using rule 39 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    IF              reduce using rule 39 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    FOR             reduce using rule 39 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    PRINT           reduce using rule 39 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    RETURN          reduce using rule 39 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)


state 62

    (40) variable -> CHAR IDENTIFICADOR IGUAL . CHARACTER PUNTOCOMA

    CHARACTER       shift and go to state 102


state 63

    (53) while -> WHILE LPAR statement . RPAR LLAVEL bodyblock LLAVER

    RPAR            shift and go to state 103


state 64

    (72) statement -> expresion .
    (54) expresion -> expresion . comparador expresion
    (79) comparador -> . IGUAL IGUAL
    (80) comparador -> . MENOR
    (81) comparador -> . MAYOR
    (82) comparador -> . MENOR IGUAL
    (83) comparador -> . MAYOR IGUAL
    (84) comparador -> . EXCLAMACION IGUAL

    RPAR            reduce using rule 72 (statement -> expresion .)
    IGUAL           shift and go to state 67
    MENOR           shift and go to state 68
    MAYOR           shift and go to state 69
    EXCLAMACION     shift and go to state 70

    comparador                     shift and go to state 66

state 65

    (120) asignarvalorobjeto -> LPAR expresion RPAR .

    $end            reduce using rule 120 (asignarvalorobjeto -> LPAR expresion RPAR .)


state 66

    (54) expresion -> expresion comparador . expresion
    (54) expresion -> . expresion comparador expresion
    (78) expresion -> . valor
    (46) valor -> . ENTERO
    (47) valor -> . FLOTANTE
    (48) valor -> . CHARACTER
    (49) valor -> . STRING
    (50) valor -> . TRUE
    (51) valor -> . FALSE
    (52) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 42
    FLOTANTE        shift and go to state 43
    CHARACTER       shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    IDENTIFICADOR   shift and go to state 41

    expresion                      shift and go to state 104
    valor                          shift and go to state 39

state 67

    (79) comparador -> IGUAL . IGUAL

    IGUAL           shift and go to state 105


state 68

    (80) comparador -> MENOR .
    (82) comparador -> MENOR . IGUAL

    ENTERO          reduce using rule 80 (comparador -> MENOR .)
    FLOTANTE        reduce using rule 80 (comparador -> MENOR .)
    CHARACTER       reduce using rule 80 (comparador -> MENOR .)
    STRING          reduce using rule 80 (comparador -> MENOR .)
    TRUE            reduce using rule 80 (comparador -> MENOR .)
    FALSE           reduce using rule 80 (comparador -> MENOR .)
    IDENTIFICADOR   reduce using rule 80 (comparador -> MENOR .)
    IGUAL           shift and go to state 106


state 69

    (81) comparador -> MAYOR .
    (83) comparador -> MAYOR . IGUAL

    ENTERO          reduce using rule 81 (comparador -> MAYOR .)
    FLOTANTE        reduce using rule 81 (comparador -> MAYOR .)
    CHARACTER       reduce using rule 81 (comparador -> MAYOR .)
    STRING          reduce using rule 81 (comparador -> MAYOR .)
    TRUE            reduce using rule 81 (comparador -> MAYOR .)
    FALSE           reduce using rule 81 (comparador -> MAYOR .)
    IDENTIFICADOR   reduce using rule 81 (comparador -> MAYOR .)
    IGUAL           shift and go to state 107


state 70

    (84) comparador -> EXCLAMACION . IGUAL

    IGUAL           shift and go to state 108


state 71

    (121) asignarvalorobjeto -> LPAR statement RPAR .

    $end            reduce using rule 121 (asignarvalorobjeto -> LPAR statement RPAR .)


state 72

    (73) statement -> EXCLAMACION boolean .

    RPAR            reduce using rule 73 (statement -> EXCLAMACION boolean .)


state 73

    (74) statement -> EXCLAMACION LPAR . expresion RPAR
    (54) expresion -> . expresion comparador expresion
    (78) expresion -> . valor
    (46) valor -> . ENTERO
    (47) valor -> . FLOTANTE
    (48) valor -> . CHARACTER
    (49) valor -> . STRING
    (50) valor -> . TRUE
    (51) valor -> . FALSE
    (52) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 42
    FLOTANTE        shift and go to state 43
    CHARACTER       shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    IDENTIFICADOR   shift and go to state 41

    expresion                      shift and go to state 109
    valor                          shift and go to state 39

state 74

    (75) statement -> EXCLAMACION IDENTIFICADOR .

    RPAR            reduce using rule 75 (statement -> EXCLAMACION IDENTIFICADOR .)


state 75

    (76) boolean -> TRUE .

    RPAR            reduce using rule 76 (boolean -> TRUE .)


state 76

    (77) boolean -> FALSE .

    RPAR            reduce using rule 77 (boolean -> FALSE .)


state 77

    (56) expresionif -> IF LPAR condicionif . RPAR conllaves expresionpos
    (57) expresionif -> IF LPAR condicionif . RPAR sinllaves expresionpos

    RPAR            shift and go to state 110


state 78

    (69) condicionif -> initcondicion .

    RPAR            reduce using rule 69 (condicionif -> initcondicion .)


state 79

    (70) condicionif -> statement .

    RPAR            reduce using rule 70 (condicionif -> statement .)


state 80

    (71) initcondicion -> varblock . statement
    (34) varblock -> varblock . variable
    (72) statement -> . expresion
    (73) statement -> . EXCLAMACION boolean
    (74) statement -> . EXCLAMACION LPAR expresion RPAR
    (75) statement -> . EXCLAMACION IDENTIFICADOR
    (36) variable -> . AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA
    (37) variable -> . AUTO IDENTIFICADOR PUNTOCOMA
    (38) variable -> . numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA
    (39) variable -> . numerotipo IDENTIFICADOR PUNTOCOMA
    (40) variable -> . CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA
    (54) expresion -> . expresion comparador expresion
    (78) expresion -> . valor
    (41) numerotipo -> . INT
    (42) numerotipo -> . FLOAT
    (43) numerotipo -> . LONG
    (46) valor -> . ENTERO
    (47) valor -> . FLOTANTE
    (48) valor -> . CHARACTER
    (49) valor -> . STRING
    (50) valor -> . TRUE
    (51) valor -> . FALSE
    (52) valor -> . IDENTIFICADOR

    EXCLAMACION     shift and go to state 40
    AUTO            shift and go to state 113
    CHAR            shift and go to state 114
    INT             shift and go to state 115
    FLOAT           shift and go to state 116
    LONG            shift and go to state 117
    ENTERO          shift and go to state 42
    FLOTANTE        shift and go to state 43
    CHARACTER       shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    IDENTIFICADOR   shift and go to state 41

    statement                      shift and go to state 111
    variable                       shift and go to state 112
    expresion                      shift and go to state 64
    valor                          shift and go to state 39
    numerotipo                     shift and go to state 16

state 81

    (101) claseimplementacion -> CLASS IDENTIFICADOR LLAVEL . bloqueclase LLAVER
    (102) bloqueclase -> . bloqueclase definicion
    (103) bloqueclase -> . bloqueclase funcionclaseimpl
    (104) bloqueclase -> .

    LLAVER          reduce using rule 104 (bloqueclase -> .)
    VOID            reduce using rule 104 (bloqueclase -> .)
    INT             reduce using rule 104 (bloqueclase -> .)
    FLOAT           reduce using rule 104 (bloqueclase -> .)
    LONG            reduce using rule 104 (bloqueclase -> .)
    AUTO            reduce using rule 104 (bloqueclase -> .)
    CHAR            reduce using rule 104 (bloqueclase -> .)

    bloqueclase                    shift and go to state 118

state 82

    (95) for -> FOR LPAR initfor . PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER

    PUNTOCOMA       shift and go to state 119


state 83

    (85) initfor -> tipo . IDENTIFICADOR IGUAL valor

    IDENTIFICADOR   shift and go to state 120


state 84

    (14) tipo -> INT .

    IDENTIFICADOR   reduce using rule 14 (tipo -> INT .)


state 85

    (15) tipo -> FLOAT .

    IDENTIFICADOR   reduce using rule 15 (tipo -> FLOAT .)


state 86

    (16) tipo -> LONG .

    IDENTIFICADOR   reduce using rule 16 (tipo -> LONG .)


state 87

    (17) tipo -> AUTO .

    IDENTIFICADOR   reduce using rule 17 (tipo -> AUTO .)


state 88

    (18) tipo -> CHAR .

    IDENTIFICADOR   reduce using rule 18 (tipo -> CHAR .)


state 89

    (19) tipo -> VOID .

    IDENTIFICADOR   reduce using rule 19 (tipo -> VOID .)


state 90

    (96) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL . ENTERO CORCHETER PUNTOCOMA
    (97) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL . ENTERO CORCHETER IGUAL LLAVEL arraydata LLAVER PUNTOCOMA
    (98) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL . ENTERO CORCHETER IGUAL LLAVEL LLAVER PUNTOCOMA

    ENTERO          shift and go to state 121


state 91

    (107) funcionclaseimpl -> tipo IDENTIFICADOR LPAR . parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER
    (110) parametrosimplementacion -> . tipo IDENTIFICADOR masparametrosimplementacion
    (111) parametrosimplementacion -> .
    (14) tipo -> . INT
    (15) tipo -> . FLOAT
    (16) tipo -> . LONG
    (17) tipo -> . AUTO
    (18) tipo -> . CHAR
    (19) tipo -> . VOID

    RPAR            reduce using rule 111 (parametrosimplementacion -> .)
    INT             shift and go to state 84
    FLOAT           shift and go to state 85
    LONG            shift and go to state 86
    AUTO            shift and go to state 87
    CHAR            shift and go to state 88
    VOID            shift and go to state 89

    tipo                           shift and go to state 122
    parametrosimplementacion       shift and go to state 123

state 92

    (108) funcionclaseimpl -> VOID IDENTIFICADOR LPAR . parametrosimplementacion RPAR LLAVEL bodyblock LLAVER
    (110) parametrosimplementacion -> . tipo IDENTIFICADOR masparametrosimplementacion
    (111) parametrosimplementacion -> .
    (14) tipo -> . INT
    (15) tipo -> . FLOAT
    (16) tipo -> . LONG
    (17) tipo -> . AUTO
    (18) tipo -> . CHAR
    (19) tipo -> . VOID

    RPAR            reduce using rule 111 (parametrosimplementacion -> .)
    INT             shift and go to state 84
    FLOAT           shift and go to state 85
    LONG            shift and go to state 86
    AUTO            shift and go to state 87
    CHAR            shift and go to state 88
    VOID            shift and go to state 89

    parametrosimplementacion       shift and go to state 124
    tipo                           shift and go to state 122

state 93

    (122) asignarvalorobjeto -> EXCLAMACION LPAR statement . RPAR

    RPAR            shift and go to state 125


state 94

    (55) struct -> STRUCT IDENTIFICADOR LLAVEL . varblock LLAVER IDENTIFICADOR PUNTOCOMA
    (34) varblock -> . varblock variable
    (35) varblock -> .

    LLAVER          reduce using rule 35 (varblock -> .)
    AUTO            reduce using rule 35 (varblock -> .)
    CHAR            reduce using rule 35 (varblock -> .)
    INT             reduce using rule 35 (varblock -> .)
    FLOAT           reduce using rule 35 (varblock -> .)
    LONG            reduce using rule 35 (varblock -> .)

    varblock                       shift and go to state 126

state 95

    (20) imprimir -> PRINT LPAR valor . RPAR

    RPAR            shift and go to state 127


state 96

    (36) variable -> AUTO IDENTIFICADOR IGUAL valor . PUNTOCOMA

    PUNTOCOMA       shift and go to state 128


state 97

    (119) asignarvalorobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR IGUAL . valor
    (46) valor -> . ENTERO
    (47) valor -> . FLOTANTE
    (48) valor -> . CHARACTER
    (49) valor -> . STRING
    (50) valor -> . TRUE
    (51) valor -> . FALSE
    (52) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 42
    FLOTANTE        shift and go to state 43
    CHARACTER       shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    IDENTIFICADOR   shift and go to state 41

    valor                          shift and go to state 129

state 98

    (123) usarfuncionobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR LPAR . parametrosfuncion RPAR PUNTOCOMA
    (112) parametrosfuncion -> . IDENTIFICADOR masparametrosfuncion
    (113) parametrosfuncion -> .

    IDENTIFICADOR   shift and go to state 130
    RPAR            reduce using rule 113 (parametrosfuncion -> .)

    parametrosfuncion              shift and go to state 131

state 99

    (38) variable -> numerotipo IDENTIFICADOR IGUAL numero . PUNTOCOMA

    PUNTOCOMA       shift and go to state 132


state 100

    (44) numero -> ENTERO .

    PUNTOCOMA       reduce using rule 44 (numero -> ENTERO .)


state 101

    (45) numero -> FLOTANTE .

    PUNTOCOMA       reduce using rule 45 (numero -> FLOTANTE .)


state 102

    (40) variable -> CHAR IDENTIFICADOR IGUAL CHARACTER . PUNTOCOMA

    PUNTOCOMA       shift and go to state 133


state 103

    (53) while -> WHILE LPAR statement RPAR . LLAVEL bodyblock LLAVER

    LLAVEL          shift and go to state 134


state 104

    (54) expresion -> expresion comparador expresion .
    (54) expresion -> expresion . comparador expresion
    (79) comparador -> . IGUAL IGUAL
    (80) comparador -> . MENOR
    (81) comparador -> . MAYOR
    (82) comparador -> . MENOR IGUAL
    (83) comparador -> . MAYOR IGUAL
    (84) comparador -> . EXCLAMACION IGUAL

  ! shift/reduce conflict for IGUAL resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for EXCLAMACION resolved as shift
    RPAR            reduce using rule 54 (expresion -> expresion comparador expresion .)
    IGUAL           shift and go to state 67
    MENOR           shift and go to state 68
    MAYOR           shift and go to state 69
    EXCLAMACION     shift and go to state 70

  ! IGUAL           [ reduce using rule 54 (expresion -> expresion comparador expresion .) ]
  ! MENOR           [ reduce using rule 54 (expresion -> expresion comparador expresion .) ]
  ! MAYOR           [ reduce using rule 54 (expresion -> expresion comparador expresion .) ]
  ! EXCLAMACION     [ reduce using rule 54 (expresion -> expresion comparador expresion .) ]

    comparador                     shift and go to state 66

state 105

    (79) comparador -> IGUAL IGUAL .

    ENTERO          reduce using rule 79 (comparador -> IGUAL IGUAL .)
    FLOTANTE        reduce using rule 79 (comparador -> IGUAL IGUAL .)
    CHARACTER       reduce using rule 79 (comparador -> IGUAL IGUAL .)
    STRING          reduce using rule 79 (comparador -> IGUAL IGUAL .)
    TRUE            reduce using rule 79 (comparador -> IGUAL IGUAL .)
    FALSE           reduce using rule 79 (comparador -> IGUAL IGUAL .)
    IDENTIFICADOR   reduce using rule 79 (comparador -> IGUAL IGUAL .)


state 106

    (82) comparador -> MENOR IGUAL .

    ENTERO          reduce using rule 82 (comparador -> MENOR IGUAL .)
    FLOTANTE        reduce using rule 82 (comparador -> MENOR IGUAL .)
    CHARACTER       reduce using rule 82 (comparador -> MENOR IGUAL .)
    STRING          reduce using rule 82 (comparador -> MENOR IGUAL .)
    TRUE            reduce using rule 82 (comparador -> MENOR IGUAL .)
    FALSE           reduce using rule 82 (comparador -> MENOR IGUAL .)
    IDENTIFICADOR   reduce using rule 82 (comparador -> MENOR IGUAL .)


state 107

    (83) comparador -> MAYOR IGUAL .

    ENTERO          reduce using rule 83 (comparador -> MAYOR IGUAL .)
    FLOTANTE        reduce using rule 83 (comparador -> MAYOR IGUAL .)
    CHARACTER       reduce using rule 83 (comparador -> MAYOR IGUAL .)
    STRING          reduce using rule 83 (comparador -> MAYOR IGUAL .)
    TRUE            reduce using rule 83 (comparador -> MAYOR IGUAL .)
    FALSE           reduce using rule 83 (comparador -> MAYOR IGUAL .)
    IDENTIFICADOR   reduce using rule 83 (comparador -> MAYOR IGUAL .)


state 108

    (84) comparador -> EXCLAMACION IGUAL .

    ENTERO          reduce using rule 84 (comparador -> EXCLAMACION IGUAL .)
    FLOTANTE        reduce using rule 84 (comparador -> EXCLAMACION IGUAL .)
    CHARACTER       reduce using rule 84 (comparador -> EXCLAMACION IGUAL .)
    STRING          reduce using rule 84 (comparador -> EXCLAMACION IGUAL .)
    TRUE            reduce using rule 84 (comparador -> EXCLAMACION IGUAL .)
    FALSE           reduce using rule 84 (comparador -> EXCLAMACION IGUAL .)
    IDENTIFICADOR   reduce using rule 84 (comparador -> EXCLAMACION IGUAL .)


state 109

    (74) statement -> EXCLAMACION LPAR expresion . RPAR
    (54) expresion -> expresion . comparador expresion
    (79) comparador -> . IGUAL IGUAL
    (80) comparador -> . MENOR
    (81) comparador -> . MAYOR
    (82) comparador -> . MENOR IGUAL
    (83) comparador -> . MAYOR IGUAL
    (84) comparador -> . EXCLAMACION IGUAL

    RPAR            shift and go to state 135
    IGUAL           shift and go to state 67
    MENOR           shift and go to state 68
    MAYOR           shift and go to state 69
    EXCLAMACION     shift and go to state 70

    comparador                     shift and go to state 66

state 110

    (56) expresionif -> IF LPAR condicionif RPAR . conllaves expresionpos
    (57) expresionif -> IF LPAR condicionif RPAR . sinllaves expresionpos
    (68) conllaves -> . LLAVEL bodyblock LLAVER
    (66) sinllaves -> . while
    (67) sinllaves -> . variable
    (53) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (36) variable -> . AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA
    (37) variable -> . AUTO IDENTIFICADOR PUNTOCOMA
    (38) variable -> . numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA
    (39) variable -> . numerotipo IDENTIFICADOR PUNTOCOMA
    (40) variable -> . CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA
    (41) numerotipo -> . INT
    (42) numerotipo -> . FLOAT
    (43) numerotipo -> . LONG

    LLAVEL          shift and go to state 138
    WHILE           shift and go to state 18
    AUTO            shift and go to state 113
    CHAR            shift and go to state 114
    INT             shift and go to state 115
    FLOAT           shift and go to state 116
    LONG            shift and go to state 117

    conllaves                      shift and go to state 136
    sinllaves                      shift and go to state 137
    while                          shift and go to state 139
    variable                       shift and go to state 140
    numerotipo                     shift and go to state 16

state 111

    (71) initcondicion -> varblock statement .

    RPAR            reduce using rule 71 (initcondicion -> varblock statement .)


state 112

    (34) varblock -> varblock variable .

    EXCLAMACION     reduce using rule 34 (varblock -> varblock variable .)
    AUTO            reduce using rule 34 (varblock -> varblock variable .)
    CHAR            reduce using rule 34 (varblock -> varblock variable .)
    INT             reduce using rule 34 (varblock -> varblock variable .)
    FLOAT           reduce using rule 34 (varblock -> varblock variable .)
    LONG            reduce using rule 34 (varblock -> varblock variable .)
    ENTERO          reduce using rule 34 (varblock -> varblock variable .)
    FLOTANTE        reduce using rule 34 (varblock -> varblock variable .)
    CHARACTER       reduce using rule 34 (varblock -> varblock variable .)
    STRING          reduce using rule 34 (varblock -> varblock variable .)
    TRUE            reduce using rule 34 (varblock -> varblock variable .)
    FALSE           reduce using rule 34 (varblock -> varblock variable .)
    IDENTIFICADOR   reduce using rule 34 (varblock -> varblock variable .)
    LLAVER          reduce using rule 34 (varblock -> varblock variable .)


state 113

    (36) variable -> AUTO . IDENTIFICADOR IGUAL valor PUNTOCOMA
    (37) variable -> AUTO . IDENTIFICADOR PUNTOCOMA

    IDENTIFICADOR   shift and go to state 31


state 114

    (40) variable -> CHAR . IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA

    IDENTIFICADOR   shift and go to state 35


state 115

    (41) numerotipo -> INT .

    IDENTIFICADOR   reduce using rule 41 (numerotipo -> INT .)


state 116

    (42) numerotipo -> FLOAT .

    IDENTIFICADOR   reduce using rule 42 (numerotipo -> FLOAT .)


state 117

    (43) numerotipo -> LONG .

    IDENTIFICADOR   reduce using rule 43 (numerotipo -> LONG .)


state 118

    (101) claseimplementacion -> CLASS IDENTIFICADOR LLAVEL bloqueclase . LLAVER
    (102) bloqueclase -> bloqueclase . definicion
    (103) bloqueclase -> bloqueclase . funcionclaseimpl
    (105) definicion -> . tipo IDENTIFICADOR PUNTOCOMA
    (106) definicion -> .
    (107) funcionclaseimpl -> . tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER
    (108) funcionclaseimpl -> . VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER
    (109) funcionclaseimpl -> .
    (14) tipo -> . INT
    (15) tipo -> . FLOAT
    (16) tipo -> . LONG
    (17) tipo -> . AUTO
    (18) tipo -> . CHAR
    (19) tipo -> . VOID

  ! shift/reduce conflict for LLAVER resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LLAVER resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! reduce/reduce conflict for INT resolved using rule 106 (definicion -> .)
  ! reduce/reduce conflict for FLOAT resolved using rule 106 (definicion -> .)
  ! reduce/reduce conflict for LONG resolved using rule 106 (definicion -> .)
  ! reduce/reduce conflict for AUTO resolved using rule 106 (definicion -> .)
  ! reduce/reduce conflict for CHAR resolved using rule 106 (definicion -> .)
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    LLAVER          shift and go to state 141
    VOID            shift and go to state 24
    INT             shift and go to state 84
    FLOAT           shift and go to state 85
    LONG            shift and go to state 86
    AUTO            shift and go to state 87
    CHAR            shift and go to state 88

  ! LLAVER          [ reduce using rule 106 (definicion -> .) ]
  ! VOID            [ reduce using rule 106 (definicion -> .) ]
  ! INT             [ reduce using rule 106 (definicion -> .) ]
  ! FLOAT           [ reduce using rule 106 (definicion -> .) ]
  ! LONG            [ reduce using rule 106 (definicion -> .) ]
  ! AUTO            [ reduce using rule 106 (definicion -> .) ]
  ! CHAR            [ reduce using rule 106 (definicion -> .) ]
  ! LLAVER          [ reduce using rule 109 (funcionclaseimpl -> .) ]
  ! VOID            [ reduce using rule 109 (funcionclaseimpl -> .) ]
  ! INT             [ reduce using rule 109 (funcionclaseimpl -> .) ]
  ! FLOAT           [ reduce using rule 109 (funcionclaseimpl -> .) ]
  ! LONG            [ reduce using rule 109 (funcionclaseimpl -> .) ]
  ! AUTO            [ reduce using rule 109 (funcionclaseimpl -> .) ]
  ! CHAR            [ reduce using rule 109 (funcionclaseimpl -> .) ]

    definicion                     shift and go to state 142
    funcionclaseimpl               shift and go to state 143
    tipo                           shift and go to state 144

state 119

    (95) for -> FOR LPAR initfor PUNTOCOMA . condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER
    (86) condfor -> . IDENTIFICADOR comparador valor

    IDENTIFICADOR   shift and go to state 146

    condfor                        shift and go to state 145

state 120

    (85) initfor -> tipo IDENTIFICADOR . IGUAL valor

    IGUAL           shift and go to state 147


state 121

    (96) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO . CORCHETER PUNTOCOMA
    (97) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO . CORCHETER IGUAL LLAVEL arraydata LLAVER PUNTOCOMA
    (98) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO . CORCHETER IGUAL LLAVEL LLAVER PUNTOCOMA

    CORCHETER       shift and go to state 148


state 122

    (110) parametrosimplementacion -> tipo . IDENTIFICADOR masparametrosimplementacion

    IDENTIFICADOR   shift and go to state 149


state 123

    (107) funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion . RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER

    RPAR            shift and go to state 150


state 124

    (108) funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion . RPAR LLAVEL bodyblock LLAVER

    RPAR            shift and go to state 151


state 125

    (122) asignarvalorobjeto -> EXCLAMACION LPAR statement RPAR .

    $end            reduce using rule 122 (asignarvalorobjeto -> EXCLAMACION LPAR statement RPAR .)


state 126

    (55) struct -> STRUCT IDENTIFICADOR LLAVEL varblock . LLAVER IDENTIFICADOR PUNTOCOMA
    (34) varblock -> varblock . variable
    (36) variable -> . AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA
    (37) variable -> . AUTO IDENTIFICADOR PUNTOCOMA
    (38) variable -> . numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA
    (39) variable -> . numerotipo IDENTIFICADOR PUNTOCOMA
    (40) variable -> . CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA
    (41) numerotipo -> . INT
    (42) numerotipo -> . FLOAT
    (43) numerotipo -> . LONG

    LLAVER          shift and go to state 152
    AUTO            shift and go to state 113
    CHAR            shift and go to state 114
    INT             shift and go to state 115
    FLOAT           shift and go to state 116
    LONG            shift and go to state 117

    variable                       shift and go to state 112
    numerotipo                     shift and go to state 16

state 127

    (20) imprimir -> PRINT LPAR valor RPAR .

    $end            reduce using rule 20 (imprimir -> PRINT LPAR valor RPAR .)
    LLAVER          reduce using rule 20 (imprimir -> PRINT LPAR valor RPAR .)
    AUTO            reduce using rule 20 (imprimir -> PRINT LPAR valor RPAR .)
    CHAR            reduce using rule 20 (imprimir -> PRINT LPAR valor RPAR .)
    WHILE           reduce using rule 20 (imprimir -> PRINT LPAR valor RPAR .)
    IF              reduce using rule 20 (imprimir -> PRINT LPAR valor RPAR .)
    FOR             reduce using rule 20 (imprimir -> PRINT LPAR valor RPAR .)
    PRINT           reduce using rule 20 (imprimir -> PRINT LPAR valor RPAR .)
    INT             reduce using rule 20 (imprimir -> PRINT LPAR valor RPAR .)
    FLOAT           reduce using rule 20 (imprimir -> PRINT LPAR valor RPAR .)
    LONG            reduce using rule 20 (imprimir -> PRINT LPAR valor RPAR .)
    RETURN          reduce using rule 20 (imprimir -> PRINT LPAR valor RPAR .)


state 128

    (36) variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .

    $end            reduce using rule 36 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    EXCLAMACION     reduce using rule 36 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    AUTO            reduce using rule 36 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    CHAR            reduce using rule 36 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    INT             reduce using rule 36 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    FLOAT           reduce using rule 36 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    LONG            reduce using rule 36 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    ENTERO          reduce using rule 36 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    FLOTANTE        reduce using rule 36 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    CHARACTER       reduce using rule 36 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    STRING          reduce using rule 36 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    TRUE            reduce using rule 36 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    FALSE           reduce using rule 36 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    IDENTIFICADOR   reduce using rule 36 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    ELSE            reduce using rule 36 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    LLAVER          reduce using rule 36 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    WHILE           reduce using rule 36 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    IF              reduce using rule 36 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    FOR             reduce using rule 36 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    PRINT           reduce using rule 36 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    RETURN          reduce using rule 36 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)


state 129

    (119) asignarvalorobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR IGUAL valor .

    $end            reduce using rule 119 (asignarvalorobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR IGUAL valor .)


state 130

    (112) parametrosfuncion -> IDENTIFICADOR . masparametrosfuncion
    (116) masparametrosfuncion -> . COMMA parametrosfuncion
    (117) masparametrosfuncion -> .

    COMMA           shift and go to state 154
    RPAR            reduce using rule 117 (masparametrosfuncion -> .)

    masparametrosfuncion           shift and go to state 153

state 131

    (123) usarfuncionobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR LPAR parametrosfuncion . RPAR PUNTOCOMA

    RPAR            shift and go to state 155


state 132

    (38) variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .

    $end            reduce using rule 38 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    EXCLAMACION     reduce using rule 38 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    AUTO            reduce using rule 38 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    CHAR            reduce using rule 38 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    INT             reduce using rule 38 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    FLOAT           reduce using rule 38 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    LONG            reduce using rule 38 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    ENTERO          reduce using rule 38 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    FLOTANTE        reduce using rule 38 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    CHARACTER       reduce using rule 38 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    STRING          reduce using rule 38 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    TRUE            reduce using rule 38 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    FALSE           reduce using rule 38 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    IDENTIFICADOR   reduce using rule 38 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    ELSE            reduce using rule 38 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    LLAVER          reduce using rule 38 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    WHILE           reduce using rule 38 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    IF              reduce using rule 38 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    FOR             reduce using rule 38 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    PRINT           reduce using rule 38 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    RETURN          reduce using rule 38 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)


state 133

    (40) variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .

    $end            reduce using rule 40 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    EXCLAMACION     reduce using rule 40 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    AUTO            reduce using rule 40 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    CHAR            reduce using rule 40 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    INT             reduce using rule 40 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    FLOAT           reduce using rule 40 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    LONG            reduce using rule 40 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    ENTERO          reduce using rule 40 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    FLOTANTE        reduce using rule 40 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    CHARACTER       reduce using rule 40 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    STRING          reduce using rule 40 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    TRUE            reduce using rule 40 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    FALSE           reduce using rule 40 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    IDENTIFICADOR   reduce using rule 40 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    ELSE            reduce using rule 40 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    LLAVER          reduce using rule 40 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    WHILE           reduce using rule 40 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    IF              reduce using rule 40 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    FOR             reduce using rule 40 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    PRINT           reduce using rule 40 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    RETURN          reduce using rule 40 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)


state 134

    (53) while -> WHILE LPAR statement RPAR LLAVEL . bodyblock LLAVER
    (21) bodyblock -> . bodyblock variable
    (22) bodyblock -> . bodyblock while
    (23) bodyblock -> . bodyblock expresionif
    (24) bodyblock -> . bodyblock for
    (25) bodyblock -> . bodyblock imprimir
    (26) bodyblock -> .

    LLAVER          reduce using rule 26 (bodyblock -> .)
    AUTO            reduce using rule 26 (bodyblock -> .)
    CHAR            reduce using rule 26 (bodyblock -> .)
    WHILE           reduce using rule 26 (bodyblock -> .)
    IF              reduce using rule 26 (bodyblock -> .)
    FOR             reduce using rule 26 (bodyblock -> .)
    PRINT           reduce using rule 26 (bodyblock -> .)
    INT             reduce using rule 26 (bodyblock -> .)
    FLOAT           reduce using rule 26 (bodyblock -> .)
    LONG            reduce using rule 26 (bodyblock -> .)

    bodyblock                      shift and go to state 156

state 135

    (74) statement -> EXCLAMACION LPAR expresion RPAR .

    RPAR            reduce using rule 74 (statement -> EXCLAMACION LPAR expresion RPAR .)


state 136

    (56) expresionif -> IF LPAR condicionif RPAR conllaves . expresionpos
    (58) expresionpos -> . else
    (59) expresionpos -> . elseif
    (60) expresionpos -> .
    (64) else -> . ELSE conllaves
    (65) else -> . ELSE sinllaves
    (61) elseif -> . ELSE IF LPAR condicionif RPAR conllaves else
    (62) elseif -> . ELSE IF LPAR condicionif RPAR sinllaves else
    (63) elseif -> .

  ! reduce/reduce conflict for $end resolved using rule 60 (expresionpos -> .)
  ! reduce/reduce conflict for LLAVER resolved using rule 60 (expresionpos -> .)
  ! reduce/reduce conflict for AUTO resolved using rule 60 (expresionpos -> .)
  ! reduce/reduce conflict for CHAR resolved using rule 60 (expresionpos -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 60 (expresionpos -> .)
  ! reduce/reduce conflict for IF resolved using rule 60 (expresionpos -> .)
  ! reduce/reduce conflict for FOR resolved using rule 60 (expresionpos -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 60 (expresionpos -> .)
  ! reduce/reduce conflict for INT resolved using rule 60 (expresionpos -> .)
  ! reduce/reduce conflict for FLOAT resolved using rule 60 (expresionpos -> .)
  ! reduce/reduce conflict for LONG resolved using rule 60 (expresionpos -> .)
  ! reduce/reduce conflict for RETURN resolved using rule 60 (expresionpos -> .)
    $end            reduce using rule 60 (expresionpos -> .)
    LLAVER          reduce using rule 60 (expresionpos -> .)
    AUTO            reduce using rule 60 (expresionpos -> .)
    CHAR            reduce using rule 60 (expresionpos -> .)
    WHILE           reduce using rule 60 (expresionpos -> .)
    IF              reduce using rule 60 (expresionpos -> .)
    FOR             reduce using rule 60 (expresionpos -> .)
    PRINT           reduce using rule 60 (expresionpos -> .)
    INT             reduce using rule 60 (expresionpos -> .)
    FLOAT           reduce using rule 60 (expresionpos -> .)
    LONG            reduce using rule 60 (expresionpos -> .)
    RETURN          reduce using rule 60 (expresionpos -> .)
    ELSE            shift and go to state 160

  ! $end            [ reduce using rule 63 (elseif -> .) ]
  ! LLAVER          [ reduce using rule 63 (elseif -> .) ]
  ! AUTO            [ reduce using rule 63 (elseif -> .) ]
  ! CHAR            [ reduce using rule 63 (elseif -> .) ]
  ! WHILE           [ reduce using rule 63 (elseif -> .) ]
  ! IF              [ reduce using rule 63 (elseif -> .) ]
  ! FOR             [ reduce using rule 63 (elseif -> .) ]
  ! PRINT           [ reduce using rule 63 (elseif -> .) ]
  ! INT             [ reduce using rule 63 (elseif -> .) ]
  ! FLOAT           [ reduce using rule 63 (elseif -> .) ]
  ! LONG            [ reduce using rule 63 (elseif -> .) ]
  ! RETURN          [ reduce using rule 63 (elseif -> .) ]

    expresionpos                   shift and go to state 157
    else                           shift and go to state 158
    elseif                         shift and go to state 159

state 137

    (57) expresionif -> IF LPAR condicionif RPAR sinllaves . expresionpos
    (58) expresionpos -> . else
    (59) expresionpos -> . elseif
    (60) expresionpos -> .
    (64) else -> . ELSE conllaves
    (65) else -> . ELSE sinllaves
    (61) elseif -> . ELSE IF LPAR condicionif RPAR conllaves else
    (62) elseif -> . ELSE IF LPAR condicionif RPAR sinllaves else
    (63) elseif -> .

  ! reduce/reduce conflict for $end resolved using rule 60 (expresionpos -> .)
  ! reduce/reduce conflict for LLAVER resolved using rule 60 (expresionpos -> .)
  ! reduce/reduce conflict for AUTO resolved using rule 60 (expresionpos -> .)
  ! reduce/reduce conflict for CHAR resolved using rule 60 (expresionpos -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 60 (expresionpos -> .)
  ! reduce/reduce conflict for IF resolved using rule 60 (expresionpos -> .)
  ! reduce/reduce conflict for FOR resolved using rule 60 (expresionpos -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 60 (expresionpos -> .)
  ! reduce/reduce conflict for INT resolved using rule 60 (expresionpos -> .)
  ! reduce/reduce conflict for FLOAT resolved using rule 60 (expresionpos -> .)
  ! reduce/reduce conflict for LONG resolved using rule 60 (expresionpos -> .)
  ! reduce/reduce conflict for RETURN resolved using rule 60 (expresionpos -> .)
    $end            reduce using rule 60 (expresionpos -> .)
    LLAVER          reduce using rule 60 (expresionpos -> .)
    AUTO            reduce using rule 60 (expresionpos -> .)
    CHAR            reduce using rule 60 (expresionpos -> .)
    WHILE           reduce using rule 60 (expresionpos -> .)
    IF              reduce using rule 60 (expresionpos -> .)
    FOR             reduce using rule 60 (expresionpos -> .)
    PRINT           reduce using rule 60 (expresionpos -> .)
    INT             reduce using rule 60 (expresionpos -> .)
    FLOAT           reduce using rule 60 (expresionpos -> .)
    LONG            reduce using rule 60 (expresionpos -> .)
    RETURN          reduce using rule 60 (expresionpos -> .)
    ELSE            shift and go to state 160

  ! $end            [ reduce using rule 63 (elseif -> .) ]
  ! LLAVER          [ reduce using rule 63 (elseif -> .) ]
  ! AUTO            [ reduce using rule 63 (elseif -> .) ]
  ! CHAR            [ reduce using rule 63 (elseif -> .) ]
  ! WHILE           [ reduce using rule 63 (elseif -> .) ]
  ! IF              [ reduce using rule 63 (elseif -> .) ]
  ! FOR             [ reduce using rule 63 (elseif -> .) ]
  ! PRINT           [ reduce using rule 63 (elseif -> .) ]
  ! INT             [ reduce using rule 63 (elseif -> .) ]
  ! FLOAT           [ reduce using rule 63 (elseif -> .) ]
  ! LONG            [ reduce using rule 63 (elseif -> .) ]
  ! RETURN          [ reduce using rule 63 (elseif -> .) ]

    expresionpos                   shift and go to state 161
    else                           shift and go to state 158
    elseif                         shift and go to state 159

state 138

    (68) conllaves -> LLAVEL . bodyblock LLAVER
    (21) bodyblock -> . bodyblock variable
    (22) bodyblock -> . bodyblock while
    (23) bodyblock -> . bodyblock expresionif
    (24) bodyblock -> . bodyblock for
    (25) bodyblock -> . bodyblock imprimir
    (26) bodyblock -> .

    LLAVER          reduce using rule 26 (bodyblock -> .)
    AUTO            reduce using rule 26 (bodyblock -> .)
    CHAR            reduce using rule 26 (bodyblock -> .)
    WHILE           reduce using rule 26 (bodyblock -> .)
    IF              reduce using rule 26 (bodyblock -> .)
    FOR             reduce using rule 26 (bodyblock -> .)
    PRINT           reduce using rule 26 (bodyblock -> .)
    INT             reduce using rule 26 (bodyblock -> .)
    FLOAT           reduce using rule 26 (bodyblock -> .)
    LONG            reduce using rule 26 (bodyblock -> .)

    bodyblock                      shift and go to state 162

state 139

    (66) sinllaves -> while .

    ELSE            reduce using rule 66 (sinllaves -> while .)
    $end            reduce using rule 66 (sinllaves -> while .)
    LLAVER          reduce using rule 66 (sinllaves -> while .)
    AUTO            reduce using rule 66 (sinllaves -> while .)
    CHAR            reduce using rule 66 (sinllaves -> while .)
    WHILE           reduce using rule 66 (sinllaves -> while .)
    IF              reduce using rule 66 (sinllaves -> while .)
    FOR             reduce using rule 66 (sinllaves -> while .)
    PRINT           reduce using rule 66 (sinllaves -> while .)
    INT             reduce using rule 66 (sinllaves -> while .)
    FLOAT           reduce using rule 66 (sinllaves -> while .)
    LONG            reduce using rule 66 (sinllaves -> while .)
    RETURN          reduce using rule 66 (sinllaves -> while .)


state 140

    (67) sinllaves -> variable .

    ELSE            reduce using rule 67 (sinllaves -> variable .)
    $end            reduce using rule 67 (sinllaves -> variable .)
    LLAVER          reduce using rule 67 (sinllaves -> variable .)
    AUTO            reduce using rule 67 (sinllaves -> variable .)
    CHAR            reduce using rule 67 (sinllaves -> variable .)
    WHILE           reduce using rule 67 (sinllaves -> variable .)
    IF              reduce using rule 67 (sinllaves -> variable .)
    FOR             reduce using rule 67 (sinllaves -> variable .)
    PRINT           reduce using rule 67 (sinllaves -> variable .)
    INT             reduce using rule 67 (sinllaves -> variable .)
    FLOAT           reduce using rule 67 (sinllaves -> variable .)
    LONG            reduce using rule 67 (sinllaves -> variable .)
    RETURN          reduce using rule 67 (sinllaves -> variable .)


state 141

    (101) claseimplementacion -> CLASS IDENTIFICADOR LLAVEL bloqueclase LLAVER .

    $end            reduce using rule 101 (claseimplementacion -> CLASS IDENTIFICADOR LLAVEL bloqueclase LLAVER .)


state 142

    (102) bloqueclase -> bloqueclase definicion .

    LLAVER          reduce using rule 102 (bloqueclase -> bloqueclase definicion .)
    VOID            reduce using rule 102 (bloqueclase -> bloqueclase definicion .)
    INT             reduce using rule 102 (bloqueclase -> bloqueclase definicion .)
    FLOAT           reduce using rule 102 (bloqueclase -> bloqueclase definicion .)
    LONG            reduce using rule 102 (bloqueclase -> bloqueclase definicion .)
    AUTO            reduce using rule 102 (bloqueclase -> bloqueclase definicion .)
    CHAR            reduce using rule 102 (bloqueclase -> bloqueclase definicion .)


state 143

    (103) bloqueclase -> bloqueclase funcionclaseimpl .

    LLAVER          reduce using rule 103 (bloqueclase -> bloqueclase funcionclaseimpl .)
    VOID            reduce using rule 103 (bloqueclase -> bloqueclase funcionclaseimpl .)
    INT             reduce using rule 103 (bloqueclase -> bloqueclase funcionclaseimpl .)
    FLOAT           reduce using rule 103 (bloqueclase -> bloqueclase funcionclaseimpl .)
    LONG            reduce using rule 103 (bloqueclase -> bloqueclase funcionclaseimpl .)
    AUTO            reduce using rule 103 (bloqueclase -> bloqueclase funcionclaseimpl .)
    CHAR            reduce using rule 103 (bloqueclase -> bloqueclase funcionclaseimpl .)


state 144

    (105) definicion -> tipo . IDENTIFICADOR PUNTOCOMA
    (107) funcionclaseimpl -> tipo . IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER

    IDENTIFICADOR   shift and go to state 163


state 145

    (95) for -> FOR LPAR initfor PUNTOCOMA condfor . PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER

    PUNTOCOMA       shift and go to state 164


state 146

    (86) condfor -> IDENTIFICADOR . comparador valor
    (79) comparador -> . IGUAL IGUAL
    (80) comparador -> . MENOR
    (81) comparador -> . MAYOR
    (82) comparador -> . MENOR IGUAL
    (83) comparador -> . MAYOR IGUAL
    (84) comparador -> . EXCLAMACION IGUAL

    IGUAL           shift and go to state 67
    MENOR           shift and go to state 68
    MAYOR           shift and go to state 69
    EXCLAMACION     shift and go to state 70

    comparador                     shift and go to state 165

state 147

    (85) initfor -> tipo IDENTIFICADOR IGUAL . valor
    (46) valor -> . ENTERO
    (47) valor -> . FLOTANTE
    (48) valor -> . CHARACTER
    (49) valor -> . STRING
    (50) valor -> . TRUE
    (51) valor -> . FALSE
    (52) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 42
    FLOTANTE        shift and go to state 43
    CHARACTER       shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    IDENTIFICADOR   shift and go to state 41

    valor                          shift and go to state 166

state 148

    (96) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER . PUNTOCOMA
    (97) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER . IGUAL LLAVEL arraydata LLAVER PUNTOCOMA
    (98) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER . IGUAL LLAVEL LLAVER PUNTOCOMA

    PUNTOCOMA       shift and go to state 167
    IGUAL           shift and go to state 168


state 149

    (110) parametrosimplementacion -> tipo IDENTIFICADOR . masparametrosimplementacion
    (114) masparametrosimplementacion -> . COMMA parametrosimplementacion
    (115) masparametrosimplementacion -> .

    COMMA           shift and go to state 170
    RPAR            reduce using rule 115 (masparametrosimplementacion -> .)

    masparametrosimplementacion    shift and go to state 169

state 150

    (107) funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR . LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER

    LLAVEL          shift and go to state 171


state 151

    (108) funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR . LLAVEL bodyblock LLAVER

    LLAVEL          shift and go to state 172


state 152

    (55) struct -> STRUCT IDENTIFICADOR LLAVEL varblock LLAVER . IDENTIFICADOR PUNTOCOMA

    IDENTIFICADOR   shift and go to state 173


state 153

    (112) parametrosfuncion -> IDENTIFICADOR masparametrosfuncion .

    RPAR            reduce using rule 112 (parametrosfuncion -> IDENTIFICADOR masparametrosfuncion .)


state 154

    (116) masparametrosfuncion -> COMMA . parametrosfuncion
    (112) parametrosfuncion -> . IDENTIFICADOR masparametrosfuncion
    (113) parametrosfuncion -> .

    IDENTIFICADOR   shift and go to state 130
    RPAR            reduce using rule 113 (parametrosfuncion -> .)

    parametrosfuncion              shift and go to state 174

state 155

    (123) usarfuncionobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR LPAR parametrosfuncion RPAR . PUNTOCOMA

    PUNTOCOMA       shift and go to state 175


state 156

    (53) while -> WHILE LPAR statement RPAR LLAVEL bodyblock . LLAVER
    (21) bodyblock -> bodyblock . variable
    (22) bodyblock -> bodyblock . while
    (23) bodyblock -> bodyblock . expresionif
    (24) bodyblock -> bodyblock . for
    (25) bodyblock -> bodyblock . imprimir
    (36) variable -> . AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA
    (37) variable -> . AUTO IDENTIFICADOR PUNTOCOMA
    (38) variable -> . numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA
    (39) variable -> . numerotipo IDENTIFICADOR PUNTOCOMA
    (40) variable -> . CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA
    (53) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (56) expresionif -> . IF LPAR condicionif RPAR conllaves expresionpos
    (57) expresionif -> . IF LPAR condicionif RPAR sinllaves expresionpos
    (95) for -> . FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER
    (20) imprimir -> . PRINT LPAR valor RPAR
    (41) numerotipo -> . INT
    (42) numerotipo -> . FLOAT
    (43) numerotipo -> . LONG

    LLAVER          shift and go to state 176
    AUTO            shift and go to state 113
    CHAR            shift and go to state 114
    WHILE           shift and go to state 18
    IF              shift and go to state 20
    FOR             shift and go to state 22
    PRINT           shift and go to state 27
    INT             shift and go to state 115
    FLOAT           shift and go to state 116
    LONG            shift and go to state 117

    variable                       shift and go to state 177
    while                          shift and go to state 178
    expresionif                    shift and go to state 179
    for                            shift and go to state 180
    imprimir                       shift and go to state 181
    numerotipo                     shift and go to state 16

state 157

    (56) expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .

    $end            reduce using rule 56 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    LLAVER          reduce using rule 56 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    AUTO            reduce using rule 56 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    CHAR            reduce using rule 56 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    WHILE           reduce using rule 56 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    IF              reduce using rule 56 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    FOR             reduce using rule 56 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    PRINT           reduce using rule 56 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    INT             reduce using rule 56 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    FLOAT           reduce using rule 56 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    LONG            reduce using rule 56 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    RETURN          reduce using rule 56 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)


state 158

    (58) expresionpos -> else .

    $end            reduce using rule 58 (expresionpos -> else .)
    LLAVER          reduce using rule 58 (expresionpos -> else .)
    AUTO            reduce using rule 58 (expresionpos -> else .)
    CHAR            reduce using rule 58 (expresionpos -> else .)
    WHILE           reduce using rule 58 (expresionpos -> else .)
    IF              reduce using rule 58 (expresionpos -> else .)
    FOR             reduce using rule 58 (expresionpos -> else .)
    PRINT           reduce using rule 58 (expresionpos -> else .)
    INT             reduce using rule 58 (expresionpos -> else .)
    FLOAT           reduce using rule 58 (expresionpos -> else .)
    LONG            reduce using rule 58 (expresionpos -> else .)
    RETURN          reduce using rule 58 (expresionpos -> else .)


state 159

    (59) expresionpos -> elseif .

    $end            reduce using rule 59 (expresionpos -> elseif .)
    LLAVER          reduce using rule 59 (expresionpos -> elseif .)
    AUTO            reduce using rule 59 (expresionpos -> elseif .)
    CHAR            reduce using rule 59 (expresionpos -> elseif .)
    WHILE           reduce using rule 59 (expresionpos -> elseif .)
    IF              reduce using rule 59 (expresionpos -> elseif .)
    FOR             reduce using rule 59 (expresionpos -> elseif .)
    PRINT           reduce using rule 59 (expresionpos -> elseif .)
    INT             reduce using rule 59 (expresionpos -> elseif .)
    FLOAT           reduce using rule 59 (expresionpos -> elseif .)
    LONG            reduce using rule 59 (expresionpos -> elseif .)
    RETURN          reduce using rule 59 (expresionpos -> elseif .)


state 160

    (64) else -> ELSE . conllaves
    (65) else -> ELSE . sinllaves
    (61) elseif -> ELSE . IF LPAR condicionif RPAR conllaves else
    (62) elseif -> ELSE . IF LPAR condicionif RPAR sinllaves else
    (68) conllaves -> . LLAVEL bodyblock LLAVER
    (66) sinllaves -> . while
    (67) sinllaves -> . variable
    (53) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (36) variable -> . AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA
    (37) variable -> . AUTO IDENTIFICADOR PUNTOCOMA
    (38) variable -> . numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA
    (39) variable -> . numerotipo IDENTIFICADOR PUNTOCOMA
    (40) variable -> . CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA
    (41) numerotipo -> . INT
    (42) numerotipo -> . FLOAT
    (43) numerotipo -> . LONG

    IF              shift and go to state 184
    LLAVEL          shift and go to state 138
    WHILE           shift and go to state 18
    AUTO            shift and go to state 113
    CHAR            shift and go to state 114
    INT             shift and go to state 115
    FLOAT           shift and go to state 116
    LONG            shift and go to state 117

    conllaves                      shift and go to state 182
    sinllaves                      shift and go to state 183
    while                          shift and go to state 139
    variable                       shift and go to state 140
    numerotipo                     shift and go to state 16

state 161

    (57) expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .

    $end            reduce using rule 57 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    LLAVER          reduce using rule 57 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    AUTO            reduce using rule 57 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    CHAR            reduce using rule 57 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    WHILE           reduce using rule 57 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    IF              reduce using rule 57 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    FOR             reduce using rule 57 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    PRINT           reduce using rule 57 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    INT             reduce using rule 57 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    FLOAT           reduce using rule 57 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    LONG            reduce using rule 57 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    RETURN          reduce using rule 57 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)


state 162

    (68) conllaves -> LLAVEL bodyblock . LLAVER
    (21) bodyblock -> bodyblock . variable
    (22) bodyblock -> bodyblock . while
    (23) bodyblock -> bodyblock . expresionif
    (24) bodyblock -> bodyblock . for
    (25) bodyblock -> bodyblock . imprimir
    (36) variable -> . AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA
    (37) variable -> . AUTO IDENTIFICADOR PUNTOCOMA
    (38) variable -> . numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA
    (39) variable -> . numerotipo IDENTIFICADOR PUNTOCOMA
    (40) variable -> . CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA
    (53) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (56) expresionif -> . IF LPAR condicionif RPAR conllaves expresionpos
    (57) expresionif -> . IF LPAR condicionif RPAR sinllaves expresionpos
    (95) for -> . FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER
    (20) imprimir -> . PRINT LPAR valor RPAR
    (41) numerotipo -> . INT
    (42) numerotipo -> . FLOAT
    (43) numerotipo -> . LONG

    LLAVER          shift and go to state 185
    AUTO            shift and go to state 113
    CHAR            shift and go to state 114
    WHILE           shift and go to state 18
    IF              shift and go to state 20
    FOR             shift and go to state 22
    PRINT           shift and go to state 27
    INT             shift and go to state 115
    FLOAT           shift and go to state 116
    LONG            shift and go to state 117

    variable                       shift and go to state 177
    while                          shift and go to state 178
    expresionif                    shift and go to state 179
    for                            shift and go to state 180
    imprimir                       shift and go to state 181
    numerotipo                     shift and go to state 16

state 163

    (105) definicion -> tipo IDENTIFICADOR . PUNTOCOMA
    (107) funcionclaseimpl -> tipo IDENTIFICADOR . LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER

    PUNTOCOMA       shift and go to state 186
    LPAR            shift and go to state 91


state 164

    (95) for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA . loopfor RPAR LLAVEL bodyblock LLAVER
    (87) loopfor -> . asign
    (88) loopfor -> . unaryexp
    (89) asign -> . IDENTIFICADOR MAS valor
    (90) asign -> . IDENTIFICADOR MENOS valor
    (91) asign -> . IDENTIFICADOR ASTERISCO valor
    (92) asign -> . IDENTIFICADOR SLASH valor
    (93) unaryexp -> . IDENTIFICADOR MAS MAS
    (94) unaryexp -> . IDENTIFICADOR MENOS MENOS

    IDENTIFICADOR   shift and go to state 190

    loopfor                        shift and go to state 187
    asign                          shift and go to state 188
    unaryexp                       shift and go to state 189

state 165

    (86) condfor -> IDENTIFICADOR comparador . valor
    (46) valor -> . ENTERO
    (47) valor -> . FLOTANTE
    (48) valor -> . CHARACTER
    (49) valor -> . STRING
    (50) valor -> . TRUE
    (51) valor -> . FALSE
    (52) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 42
    FLOTANTE        shift and go to state 43
    CHARACTER       shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    IDENTIFICADOR   shift and go to state 41

    valor                          shift and go to state 191

state 166

    (85) initfor -> tipo IDENTIFICADOR IGUAL valor .

    PUNTOCOMA       reduce using rule 85 (initfor -> tipo IDENTIFICADOR IGUAL valor .)


state 167

    (96) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER PUNTOCOMA .

    $end            reduce using rule 96 (arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER PUNTOCOMA .)


state 168

    (97) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL . LLAVEL arraydata LLAVER PUNTOCOMA
    (98) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL . LLAVEL LLAVER PUNTOCOMA

    LLAVEL          shift and go to state 192


state 169

    (110) parametrosimplementacion -> tipo IDENTIFICADOR masparametrosimplementacion .

    RPAR            reduce using rule 110 (parametrosimplementacion -> tipo IDENTIFICADOR masparametrosimplementacion .)


state 170

    (114) masparametrosimplementacion -> COMMA . parametrosimplementacion
    (110) parametrosimplementacion -> . tipo IDENTIFICADOR masparametrosimplementacion
    (111) parametrosimplementacion -> .
    (14) tipo -> . INT
    (15) tipo -> . FLOAT
    (16) tipo -> . LONG
    (17) tipo -> . AUTO
    (18) tipo -> . CHAR
    (19) tipo -> . VOID

    RPAR            reduce using rule 111 (parametrosimplementacion -> .)
    INT             shift and go to state 84
    FLOAT           shift and go to state 85
    LONG            shift and go to state 86
    AUTO            shift and go to state 87
    CHAR            shift and go to state 88
    VOID            shift and go to state 89

    parametrosimplementacion       shift and go to state 193
    tipo                           shift and go to state 122

state 171

    (107) funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL . bodyblock RETURN valor PUNTOCOMA LLAVER
    (21) bodyblock -> . bodyblock variable
    (22) bodyblock -> . bodyblock while
    (23) bodyblock -> . bodyblock expresionif
    (24) bodyblock -> . bodyblock for
    (25) bodyblock -> . bodyblock imprimir
    (26) bodyblock -> .

    RETURN          reduce using rule 26 (bodyblock -> .)
    AUTO            reduce using rule 26 (bodyblock -> .)
    CHAR            reduce using rule 26 (bodyblock -> .)
    WHILE           reduce using rule 26 (bodyblock -> .)
    IF              reduce using rule 26 (bodyblock -> .)
    FOR             reduce using rule 26 (bodyblock -> .)
    PRINT           reduce using rule 26 (bodyblock -> .)
    INT             reduce using rule 26 (bodyblock -> .)
    FLOAT           reduce using rule 26 (bodyblock -> .)
    LONG            reduce using rule 26 (bodyblock -> .)

    bodyblock                      shift and go to state 194

state 172

    (108) funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL . bodyblock LLAVER
    (21) bodyblock -> . bodyblock variable
    (22) bodyblock -> . bodyblock while
    (23) bodyblock -> . bodyblock expresionif
    (24) bodyblock -> . bodyblock for
    (25) bodyblock -> . bodyblock imprimir
    (26) bodyblock -> .

    LLAVER          reduce using rule 26 (bodyblock -> .)
    AUTO            reduce using rule 26 (bodyblock -> .)
    CHAR            reduce using rule 26 (bodyblock -> .)
    WHILE           reduce using rule 26 (bodyblock -> .)
    IF              reduce using rule 26 (bodyblock -> .)
    FOR             reduce using rule 26 (bodyblock -> .)
    PRINT           reduce using rule 26 (bodyblock -> .)
    INT             reduce using rule 26 (bodyblock -> .)
    FLOAT           reduce using rule 26 (bodyblock -> .)
    LONG            reduce using rule 26 (bodyblock -> .)

    bodyblock                      shift and go to state 195

state 173

    (55) struct -> STRUCT IDENTIFICADOR LLAVEL varblock LLAVER IDENTIFICADOR . PUNTOCOMA

    PUNTOCOMA       shift and go to state 196


state 174

    (116) masparametrosfuncion -> COMMA parametrosfuncion .

    RPAR            reduce using rule 116 (masparametrosfuncion -> COMMA parametrosfuncion .)


state 175

    (123) usarfuncionobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR LPAR parametrosfuncion RPAR PUNTOCOMA .

    $end            reduce using rule 123 (usarfuncionobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR LPAR parametrosfuncion RPAR PUNTOCOMA .)


state 176

    (53) while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .

    $end            reduce using rule 53 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    ELSE            reduce using rule 53 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    LLAVER          reduce using rule 53 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    AUTO            reduce using rule 53 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    CHAR            reduce using rule 53 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    WHILE           reduce using rule 53 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    IF              reduce using rule 53 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    FOR             reduce using rule 53 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    PRINT           reduce using rule 53 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    INT             reduce using rule 53 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    FLOAT           reduce using rule 53 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    LONG            reduce using rule 53 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    RETURN          reduce using rule 53 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)


state 177

    (21) bodyblock -> bodyblock variable .

    LLAVER          reduce using rule 21 (bodyblock -> bodyblock variable .)
    AUTO            reduce using rule 21 (bodyblock -> bodyblock variable .)
    CHAR            reduce using rule 21 (bodyblock -> bodyblock variable .)
    WHILE           reduce using rule 21 (bodyblock -> bodyblock variable .)
    IF              reduce using rule 21 (bodyblock -> bodyblock variable .)
    FOR             reduce using rule 21 (bodyblock -> bodyblock variable .)
    PRINT           reduce using rule 21 (bodyblock -> bodyblock variable .)
    INT             reduce using rule 21 (bodyblock -> bodyblock variable .)
    FLOAT           reduce using rule 21 (bodyblock -> bodyblock variable .)
    LONG            reduce using rule 21 (bodyblock -> bodyblock variable .)
    RETURN          reduce using rule 21 (bodyblock -> bodyblock variable .)


state 178

    (22) bodyblock -> bodyblock while .

    LLAVER          reduce using rule 22 (bodyblock -> bodyblock while .)
    AUTO            reduce using rule 22 (bodyblock -> bodyblock while .)
    CHAR            reduce using rule 22 (bodyblock -> bodyblock while .)
    WHILE           reduce using rule 22 (bodyblock -> bodyblock while .)
    IF              reduce using rule 22 (bodyblock -> bodyblock while .)
    FOR             reduce using rule 22 (bodyblock -> bodyblock while .)
    PRINT           reduce using rule 22 (bodyblock -> bodyblock while .)
    INT             reduce using rule 22 (bodyblock -> bodyblock while .)
    FLOAT           reduce using rule 22 (bodyblock -> bodyblock while .)
    LONG            reduce using rule 22 (bodyblock -> bodyblock while .)
    RETURN          reduce using rule 22 (bodyblock -> bodyblock while .)


state 179

    (23) bodyblock -> bodyblock expresionif .

    LLAVER          reduce using rule 23 (bodyblock -> bodyblock expresionif .)
    AUTO            reduce using rule 23 (bodyblock -> bodyblock expresionif .)
    CHAR            reduce using rule 23 (bodyblock -> bodyblock expresionif .)
    WHILE           reduce using rule 23 (bodyblock -> bodyblock expresionif .)
    IF              reduce using rule 23 (bodyblock -> bodyblock expresionif .)
    FOR             reduce using rule 23 (bodyblock -> bodyblock expresionif .)
    PRINT           reduce using rule 23 (bodyblock -> bodyblock expresionif .)
    INT             reduce using rule 23 (bodyblock -> bodyblock expresionif .)
    FLOAT           reduce using rule 23 (bodyblock -> bodyblock expresionif .)
    LONG            reduce using rule 23 (bodyblock -> bodyblock expresionif .)
    RETURN          reduce using rule 23 (bodyblock -> bodyblock expresionif .)


state 180

    (24) bodyblock -> bodyblock for .

    LLAVER          reduce using rule 24 (bodyblock -> bodyblock for .)
    AUTO            reduce using rule 24 (bodyblock -> bodyblock for .)
    CHAR            reduce using rule 24 (bodyblock -> bodyblock for .)
    WHILE           reduce using rule 24 (bodyblock -> bodyblock for .)
    IF              reduce using rule 24 (bodyblock -> bodyblock for .)
    FOR             reduce using rule 24 (bodyblock -> bodyblock for .)
    PRINT           reduce using rule 24 (bodyblock -> bodyblock for .)
    INT             reduce using rule 24 (bodyblock -> bodyblock for .)
    FLOAT           reduce using rule 24 (bodyblock -> bodyblock for .)
    LONG            reduce using rule 24 (bodyblock -> bodyblock for .)
    RETURN          reduce using rule 24 (bodyblock -> bodyblock for .)


state 181

    (25) bodyblock -> bodyblock imprimir .

    LLAVER          reduce using rule 25 (bodyblock -> bodyblock imprimir .)
    AUTO            reduce using rule 25 (bodyblock -> bodyblock imprimir .)
    CHAR            reduce using rule 25 (bodyblock -> bodyblock imprimir .)
    WHILE           reduce using rule 25 (bodyblock -> bodyblock imprimir .)
    IF              reduce using rule 25 (bodyblock -> bodyblock imprimir .)
    FOR             reduce using rule 25 (bodyblock -> bodyblock imprimir .)
    PRINT           reduce using rule 25 (bodyblock -> bodyblock imprimir .)
    INT             reduce using rule 25 (bodyblock -> bodyblock imprimir .)
    FLOAT           reduce using rule 25 (bodyblock -> bodyblock imprimir .)
    LONG            reduce using rule 25 (bodyblock -> bodyblock imprimir .)
    RETURN          reduce using rule 25 (bodyblock -> bodyblock imprimir .)


state 182

    (64) else -> ELSE conllaves .

    $end            reduce using rule 64 (else -> ELSE conllaves .)
    LLAVER          reduce using rule 64 (else -> ELSE conllaves .)
    AUTO            reduce using rule 64 (else -> ELSE conllaves .)
    CHAR            reduce using rule 64 (else -> ELSE conllaves .)
    WHILE           reduce using rule 64 (else -> ELSE conllaves .)
    IF              reduce using rule 64 (else -> ELSE conllaves .)
    FOR             reduce using rule 64 (else -> ELSE conllaves .)
    PRINT           reduce using rule 64 (else -> ELSE conllaves .)
    INT             reduce using rule 64 (else -> ELSE conllaves .)
    FLOAT           reduce using rule 64 (else -> ELSE conllaves .)
    LONG            reduce using rule 64 (else -> ELSE conllaves .)
    RETURN          reduce using rule 64 (else -> ELSE conllaves .)


state 183

    (65) else -> ELSE sinllaves .

    $end            reduce using rule 65 (else -> ELSE sinllaves .)
    LLAVER          reduce using rule 65 (else -> ELSE sinllaves .)
    AUTO            reduce using rule 65 (else -> ELSE sinllaves .)
    CHAR            reduce using rule 65 (else -> ELSE sinllaves .)
    WHILE           reduce using rule 65 (else -> ELSE sinllaves .)
    IF              reduce using rule 65 (else -> ELSE sinllaves .)
    FOR             reduce using rule 65 (else -> ELSE sinllaves .)
    PRINT           reduce using rule 65 (else -> ELSE sinllaves .)
    INT             reduce using rule 65 (else -> ELSE sinllaves .)
    FLOAT           reduce using rule 65 (else -> ELSE sinllaves .)
    LONG            reduce using rule 65 (else -> ELSE sinllaves .)
    RETURN          reduce using rule 65 (else -> ELSE sinllaves .)


state 184

    (61) elseif -> ELSE IF . LPAR condicionif RPAR conllaves else
    (62) elseif -> ELSE IF . LPAR condicionif RPAR sinllaves else

    LPAR            shift and go to state 197


state 185

    (68) conllaves -> LLAVEL bodyblock LLAVER .

    ELSE            reduce using rule 68 (conllaves -> LLAVEL bodyblock LLAVER .)
    $end            reduce using rule 68 (conllaves -> LLAVEL bodyblock LLAVER .)
    LLAVER          reduce using rule 68 (conllaves -> LLAVEL bodyblock LLAVER .)
    AUTO            reduce using rule 68 (conllaves -> LLAVEL bodyblock LLAVER .)
    CHAR            reduce using rule 68 (conllaves -> LLAVEL bodyblock LLAVER .)
    WHILE           reduce using rule 68 (conllaves -> LLAVEL bodyblock LLAVER .)
    IF              reduce using rule 68 (conllaves -> LLAVEL bodyblock LLAVER .)
    FOR             reduce using rule 68 (conllaves -> LLAVEL bodyblock LLAVER .)
    PRINT           reduce using rule 68 (conllaves -> LLAVEL bodyblock LLAVER .)
    INT             reduce using rule 68 (conllaves -> LLAVEL bodyblock LLAVER .)
    FLOAT           reduce using rule 68 (conllaves -> LLAVEL bodyblock LLAVER .)
    LONG            reduce using rule 68 (conllaves -> LLAVEL bodyblock LLAVER .)
    RETURN          reduce using rule 68 (conllaves -> LLAVEL bodyblock LLAVER .)


state 186

    (105) definicion -> tipo IDENTIFICADOR PUNTOCOMA .

    LLAVER          reduce using rule 105 (definicion -> tipo IDENTIFICADOR PUNTOCOMA .)
    VOID            reduce using rule 105 (definicion -> tipo IDENTIFICADOR PUNTOCOMA .)
    INT             reduce using rule 105 (definicion -> tipo IDENTIFICADOR PUNTOCOMA .)
    FLOAT           reduce using rule 105 (definicion -> tipo IDENTIFICADOR PUNTOCOMA .)
    LONG            reduce using rule 105 (definicion -> tipo IDENTIFICADOR PUNTOCOMA .)
    AUTO            reduce using rule 105 (definicion -> tipo IDENTIFICADOR PUNTOCOMA .)
    CHAR            reduce using rule 105 (definicion -> tipo IDENTIFICADOR PUNTOCOMA .)


state 187

    (95) for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor . RPAR LLAVEL bodyblock LLAVER

    RPAR            shift and go to state 198


state 188

    (87) loopfor -> asign .

    RPAR            reduce using rule 87 (loopfor -> asign .)


state 189

    (88) loopfor -> unaryexp .

    RPAR            reduce using rule 88 (loopfor -> unaryexp .)


state 190

    (89) asign -> IDENTIFICADOR . MAS valor
    (90) asign -> IDENTIFICADOR . MENOS valor
    (91) asign -> IDENTIFICADOR . ASTERISCO valor
    (92) asign -> IDENTIFICADOR . SLASH valor
    (93) unaryexp -> IDENTIFICADOR . MAS MAS
    (94) unaryexp -> IDENTIFICADOR . MENOS MENOS

    MAS             shift and go to state 199
    MENOS           shift and go to state 200
    ASTERISCO       shift and go to state 201
    SLASH           shift and go to state 202


state 191

    (86) condfor -> IDENTIFICADOR comparador valor .

    PUNTOCOMA       reduce using rule 86 (condfor -> IDENTIFICADOR comparador valor .)


state 192

    (97) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL LLAVEL . arraydata LLAVER PUNTOCOMA
    (98) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL LLAVEL . LLAVER PUNTOCOMA
    (99) arraydata -> . arraydata COMMA valor
    (100) arraydata -> . valor
    (46) valor -> . ENTERO
    (47) valor -> . FLOTANTE
    (48) valor -> . CHARACTER
    (49) valor -> . STRING
    (50) valor -> . TRUE
    (51) valor -> . FALSE
    (52) valor -> . IDENTIFICADOR

    LLAVER          shift and go to state 204
    ENTERO          shift and go to state 42
    FLOTANTE        shift and go to state 43
    CHARACTER       shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    IDENTIFICADOR   shift and go to state 41

    arraydata                      shift and go to state 203
    valor                          shift and go to state 205

state 193

    (114) masparametrosimplementacion -> COMMA parametrosimplementacion .

    RPAR            reduce using rule 114 (masparametrosimplementacion -> COMMA parametrosimplementacion .)


state 194

    (107) funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock . RETURN valor PUNTOCOMA LLAVER
    (21) bodyblock -> bodyblock . variable
    (22) bodyblock -> bodyblock . while
    (23) bodyblock -> bodyblock . expresionif
    (24) bodyblock -> bodyblock . for
    (25) bodyblock -> bodyblock . imprimir
    (36) variable -> . AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA
    (37) variable -> . AUTO IDENTIFICADOR PUNTOCOMA
    (38) variable -> . numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA
    (39) variable -> . numerotipo IDENTIFICADOR PUNTOCOMA
    (40) variable -> . CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA
    (53) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (56) expresionif -> . IF LPAR condicionif RPAR conllaves expresionpos
    (57) expresionif -> . IF LPAR condicionif RPAR sinllaves expresionpos
    (95) for -> . FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER
    (20) imprimir -> . PRINT LPAR valor RPAR
    (41) numerotipo -> . INT
    (42) numerotipo -> . FLOAT
    (43) numerotipo -> . LONG

    RETURN          shift and go to state 206
    AUTO            shift and go to state 113
    CHAR            shift and go to state 114
    WHILE           shift and go to state 18
    IF              shift and go to state 20
    FOR             shift and go to state 22
    PRINT           shift and go to state 27
    INT             shift and go to state 115
    FLOAT           shift and go to state 116
    LONG            shift and go to state 117

    variable                       shift and go to state 177
    while                          shift and go to state 178
    expresionif                    shift and go to state 179
    for                            shift and go to state 180
    imprimir                       shift and go to state 181
    numerotipo                     shift and go to state 16

state 195

    (108) funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock . LLAVER
    (21) bodyblock -> bodyblock . variable
    (22) bodyblock -> bodyblock . while
    (23) bodyblock -> bodyblock . expresionif
    (24) bodyblock -> bodyblock . for
    (25) bodyblock -> bodyblock . imprimir
    (36) variable -> . AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA
    (37) variable -> . AUTO IDENTIFICADOR PUNTOCOMA
    (38) variable -> . numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA
    (39) variable -> . numerotipo IDENTIFICADOR PUNTOCOMA
    (40) variable -> . CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA
    (53) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (56) expresionif -> . IF LPAR condicionif RPAR conllaves expresionpos
    (57) expresionif -> . IF LPAR condicionif RPAR sinllaves expresionpos
    (95) for -> . FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER
    (20) imprimir -> . PRINT LPAR valor RPAR
    (41) numerotipo -> . INT
    (42) numerotipo -> . FLOAT
    (43) numerotipo -> . LONG

    LLAVER          shift and go to state 207
    AUTO            shift and go to state 113
    CHAR            shift and go to state 114
    WHILE           shift and go to state 18
    IF              shift and go to state 20
    FOR             shift and go to state 22
    PRINT           shift and go to state 27
    INT             shift and go to state 115
    FLOAT           shift and go to state 116
    LONG            shift and go to state 117

    variable                       shift and go to state 177
    while                          shift and go to state 178
    expresionif                    shift and go to state 179
    for                            shift and go to state 180
    imprimir                       shift and go to state 181
    numerotipo                     shift and go to state 16

state 196

    (55) struct -> STRUCT IDENTIFICADOR LLAVEL varblock LLAVER IDENTIFICADOR PUNTOCOMA .

    $end            reduce using rule 55 (struct -> STRUCT IDENTIFICADOR LLAVEL varblock LLAVER IDENTIFICADOR PUNTOCOMA .)


state 197

    (61) elseif -> ELSE IF LPAR . condicionif RPAR conllaves else
    (62) elseif -> ELSE IF LPAR . condicionif RPAR sinllaves else
    (69) condicionif -> . initcondicion
    (70) condicionif -> . statement
    (71) initcondicion -> . varblock statement
    (72) statement -> . expresion
    (73) statement -> . EXCLAMACION boolean
    (74) statement -> . EXCLAMACION LPAR expresion RPAR
    (75) statement -> . EXCLAMACION IDENTIFICADOR
    (34) varblock -> . varblock variable
    (35) varblock -> .
    (54) expresion -> . expresion comparador expresion
    (78) expresion -> . valor
    (46) valor -> . ENTERO
    (47) valor -> . FLOTANTE
    (48) valor -> . CHARACTER
    (49) valor -> . STRING
    (50) valor -> . TRUE
    (51) valor -> . FALSE
    (52) valor -> . IDENTIFICADOR

  ! shift/reduce conflict for EXCLAMACION resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for FLOTANTE resolved as shift
  ! shift/reduce conflict for CHARACTER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for IDENTIFICADOR resolved as shift
    EXCLAMACION     shift and go to state 40
    AUTO            reduce using rule 35 (varblock -> .)
    CHAR            reduce using rule 35 (varblock -> .)
    INT             reduce using rule 35 (varblock -> .)
    FLOAT           reduce using rule 35 (varblock -> .)
    LONG            reduce using rule 35 (varblock -> .)
    ENTERO          shift and go to state 42
    FLOTANTE        shift and go to state 43
    CHARACTER       shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    IDENTIFICADOR   shift and go to state 41

  ! EXCLAMACION     [ reduce using rule 35 (varblock -> .) ]
  ! ENTERO          [ reduce using rule 35 (varblock -> .) ]
  ! FLOTANTE        [ reduce using rule 35 (varblock -> .) ]
  ! CHARACTER       [ reduce using rule 35 (varblock -> .) ]
  ! STRING          [ reduce using rule 35 (varblock -> .) ]
  ! TRUE            [ reduce using rule 35 (varblock -> .) ]
  ! FALSE           [ reduce using rule 35 (varblock -> .) ]
  ! IDENTIFICADOR   [ reduce using rule 35 (varblock -> .) ]

    condicionif                    shift and go to state 208
    initcondicion                  shift and go to state 78
    statement                      shift and go to state 79
    varblock                       shift and go to state 80
    expresion                      shift and go to state 64
    valor                          shift and go to state 39

state 198

    (95) for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR . LLAVEL bodyblock LLAVER

    LLAVEL          shift and go to state 209


state 199

    (89) asign -> IDENTIFICADOR MAS . valor
    (93) unaryexp -> IDENTIFICADOR MAS . MAS
    (46) valor -> . ENTERO
    (47) valor -> . FLOTANTE
    (48) valor -> . CHARACTER
    (49) valor -> . STRING
    (50) valor -> . TRUE
    (51) valor -> . FALSE
    (52) valor -> . IDENTIFICADOR

    MAS             shift and go to state 210
    ENTERO          shift and go to state 42
    FLOTANTE        shift and go to state 43
    CHARACTER       shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    IDENTIFICADOR   shift and go to state 41

    valor                          shift and go to state 211

state 200

    (90) asign -> IDENTIFICADOR MENOS . valor
    (94) unaryexp -> IDENTIFICADOR MENOS . MENOS
    (46) valor -> . ENTERO
    (47) valor -> . FLOTANTE
    (48) valor -> . CHARACTER
    (49) valor -> . STRING
    (50) valor -> . TRUE
    (51) valor -> . FALSE
    (52) valor -> . IDENTIFICADOR

    MENOS           shift and go to state 212
    ENTERO          shift and go to state 42
    FLOTANTE        shift and go to state 43
    CHARACTER       shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    IDENTIFICADOR   shift and go to state 41

    valor                          shift and go to state 213

state 201

    (91) asign -> IDENTIFICADOR ASTERISCO . valor
    (46) valor -> . ENTERO
    (47) valor -> . FLOTANTE
    (48) valor -> . CHARACTER
    (49) valor -> . STRING
    (50) valor -> . TRUE
    (51) valor -> . FALSE
    (52) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 42
    FLOTANTE        shift and go to state 43
    CHARACTER       shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    IDENTIFICADOR   shift and go to state 41

    valor                          shift and go to state 214

state 202

    (92) asign -> IDENTIFICADOR SLASH . valor
    (46) valor -> . ENTERO
    (47) valor -> . FLOTANTE
    (48) valor -> . CHARACTER
    (49) valor -> . STRING
    (50) valor -> . TRUE
    (51) valor -> . FALSE
    (52) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 42
    FLOTANTE        shift and go to state 43
    CHARACTER       shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    IDENTIFICADOR   shift and go to state 41

    valor                          shift and go to state 215

state 203

    (97) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL LLAVEL arraydata . LLAVER PUNTOCOMA
    (99) arraydata -> arraydata . COMMA valor

    LLAVER          shift and go to state 216
    COMMA           shift and go to state 217


state 204

    (98) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL LLAVEL LLAVER . PUNTOCOMA

    PUNTOCOMA       shift and go to state 218


state 205

    (100) arraydata -> valor .

    LLAVER          reduce using rule 100 (arraydata -> valor .)
    COMMA           reduce using rule 100 (arraydata -> valor .)


state 206

    (107) funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN . valor PUNTOCOMA LLAVER
    (46) valor -> . ENTERO
    (47) valor -> . FLOTANTE
    (48) valor -> . CHARACTER
    (49) valor -> . STRING
    (50) valor -> . TRUE
    (51) valor -> . FALSE
    (52) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 42
    FLOTANTE        shift and go to state 43
    CHARACTER       shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    IDENTIFICADOR   shift and go to state 41

    valor                          shift and go to state 219

state 207

    (108) funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER .

    $end            reduce using rule 108 (funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER .)
    LLAVER          reduce using rule 108 (funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER .)
    VOID            reduce using rule 108 (funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER .)
    INT             reduce using rule 108 (funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER .)
    FLOAT           reduce using rule 108 (funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER .)
    LONG            reduce using rule 108 (funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER .)
    AUTO            reduce using rule 108 (funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER .)
    CHAR            reduce using rule 108 (funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER .)


state 208

    (61) elseif -> ELSE IF LPAR condicionif . RPAR conllaves else
    (62) elseif -> ELSE IF LPAR condicionif . RPAR sinllaves else

    RPAR            shift and go to state 220


state 209

    (95) for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL . bodyblock LLAVER
    (21) bodyblock -> . bodyblock variable
    (22) bodyblock -> . bodyblock while
    (23) bodyblock -> . bodyblock expresionif
    (24) bodyblock -> . bodyblock for
    (25) bodyblock -> . bodyblock imprimir
    (26) bodyblock -> .

    LLAVER          reduce using rule 26 (bodyblock -> .)
    AUTO            reduce using rule 26 (bodyblock -> .)
    CHAR            reduce using rule 26 (bodyblock -> .)
    WHILE           reduce using rule 26 (bodyblock -> .)
    IF              reduce using rule 26 (bodyblock -> .)
    FOR             reduce using rule 26 (bodyblock -> .)
    PRINT           reduce using rule 26 (bodyblock -> .)
    INT             reduce using rule 26 (bodyblock -> .)
    FLOAT           reduce using rule 26 (bodyblock -> .)
    LONG            reduce using rule 26 (bodyblock -> .)

    bodyblock                      shift and go to state 221

state 210

    (93) unaryexp -> IDENTIFICADOR MAS MAS .

    RPAR            reduce using rule 93 (unaryexp -> IDENTIFICADOR MAS MAS .)


state 211

    (89) asign -> IDENTIFICADOR MAS valor .

    RPAR            reduce using rule 89 (asign -> IDENTIFICADOR MAS valor .)


state 212

    (94) unaryexp -> IDENTIFICADOR MENOS MENOS .

    RPAR            reduce using rule 94 (unaryexp -> IDENTIFICADOR MENOS MENOS .)


state 213

    (90) asign -> IDENTIFICADOR MENOS valor .

    RPAR            reduce using rule 90 (asign -> IDENTIFICADOR MENOS valor .)


state 214

    (91) asign -> IDENTIFICADOR ASTERISCO valor .

    RPAR            reduce using rule 91 (asign -> IDENTIFICADOR ASTERISCO valor .)


state 215

    (92) asign -> IDENTIFICADOR SLASH valor .

    RPAR            reduce using rule 92 (asign -> IDENTIFICADOR SLASH valor .)


state 216

    (97) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL LLAVEL arraydata LLAVER . PUNTOCOMA

    PUNTOCOMA       shift and go to state 222


state 217

    (99) arraydata -> arraydata COMMA . valor
    (46) valor -> . ENTERO
    (47) valor -> . FLOTANTE
    (48) valor -> . CHARACTER
    (49) valor -> . STRING
    (50) valor -> . TRUE
    (51) valor -> . FALSE
    (52) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 42
    FLOTANTE        shift and go to state 43
    CHARACTER       shift and go to state 44
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    IDENTIFICADOR   shift and go to state 41

    valor                          shift and go to state 223

state 218

    (98) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL LLAVEL LLAVER PUNTOCOMA .

    $end            reduce using rule 98 (arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL LLAVEL LLAVER PUNTOCOMA .)


state 219

    (107) funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor . PUNTOCOMA LLAVER

    PUNTOCOMA       shift and go to state 224


state 220

    (61) elseif -> ELSE IF LPAR condicionif RPAR . conllaves else
    (62) elseif -> ELSE IF LPAR condicionif RPAR . sinllaves else
    (68) conllaves -> . LLAVEL bodyblock LLAVER
    (66) sinllaves -> . while
    (67) sinllaves -> . variable
    (53) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (36) variable -> . AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA
    (37) variable -> . AUTO IDENTIFICADOR PUNTOCOMA
    (38) variable -> . numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA
    (39) variable -> . numerotipo IDENTIFICADOR PUNTOCOMA
    (40) variable -> . CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA
    (41) numerotipo -> . INT
    (42) numerotipo -> . FLOAT
    (43) numerotipo -> . LONG

    LLAVEL          shift and go to state 138
    WHILE           shift and go to state 18
    AUTO            shift and go to state 113
    CHAR            shift and go to state 114
    INT             shift and go to state 115
    FLOAT           shift and go to state 116
    LONG            shift and go to state 117

    conllaves                      shift and go to state 225
    sinllaves                      shift and go to state 226
    while                          shift and go to state 139
    variable                       shift and go to state 140
    numerotipo                     shift and go to state 16

state 221

    (95) for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock . LLAVER
    (21) bodyblock -> bodyblock . variable
    (22) bodyblock -> bodyblock . while
    (23) bodyblock -> bodyblock . expresionif
    (24) bodyblock -> bodyblock . for
    (25) bodyblock -> bodyblock . imprimir
    (36) variable -> . AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA
    (37) variable -> . AUTO IDENTIFICADOR PUNTOCOMA
    (38) variable -> . numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA
    (39) variable -> . numerotipo IDENTIFICADOR PUNTOCOMA
    (40) variable -> . CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA
    (53) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (56) expresionif -> . IF LPAR condicionif RPAR conllaves expresionpos
    (57) expresionif -> . IF LPAR condicionif RPAR sinllaves expresionpos
    (95) for -> . FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER
    (20) imprimir -> . PRINT LPAR valor RPAR
    (41) numerotipo -> . INT
    (42) numerotipo -> . FLOAT
    (43) numerotipo -> . LONG

    LLAVER          shift and go to state 227
    AUTO            shift and go to state 113
    CHAR            shift and go to state 114
    WHILE           shift and go to state 18
    IF              shift and go to state 20
    FOR             shift and go to state 22
    PRINT           shift and go to state 27
    INT             shift and go to state 115
    FLOAT           shift and go to state 116
    LONG            shift and go to state 117

    variable                       shift and go to state 177
    while                          shift and go to state 178
    expresionif                    shift and go to state 179
    for                            shift and go to state 180
    imprimir                       shift and go to state 181
    numerotipo                     shift and go to state 16

state 222

    (97) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL LLAVEL arraydata LLAVER PUNTOCOMA .

    $end            reduce using rule 97 (arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL LLAVEL arraydata LLAVER PUNTOCOMA .)


state 223

    (99) arraydata -> arraydata COMMA valor .

    LLAVER          reduce using rule 99 (arraydata -> arraydata COMMA valor .)
    COMMA           reduce using rule 99 (arraydata -> arraydata COMMA valor .)


state 224

    (107) funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA . LLAVER

    LLAVER          shift and go to state 228


state 225

    (61) elseif -> ELSE IF LPAR condicionif RPAR conllaves . else
    (64) else -> . ELSE conllaves
    (65) else -> . ELSE sinllaves

    ELSE            shift and go to state 229

    else                           shift and go to state 230

state 226

    (62) elseif -> ELSE IF LPAR condicionif RPAR sinllaves . else
    (64) else -> . ELSE conllaves
    (65) else -> . ELSE sinllaves

    ELSE            shift and go to state 229

    else                           shift and go to state 231

state 227

    (95) for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .

    $end            reduce using rule 95 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)
    LLAVER          reduce using rule 95 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)
    AUTO            reduce using rule 95 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)
    CHAR            reduce using rule 95 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)
    WHILE           reduce using rule 95 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)
    IF              reduce using rule 95 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)
    FOR             reduce using rule 95 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)
    PRINT           reduce using rule 95 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)
    INT             reduce using rule 95 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)
    FLOAT           reduce using rule 95 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)
    LONG            reduce using rule 95 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)
    RETURN          reduce using rule 95 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)


state 228

    (107) funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER .

    $end            reduce using rule 107 (funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER .)
    LLAVER          reduce using rule 107 (funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER .)
    VOID            reduce using rule 107 (funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER .)
    INT             reduce using rule 107 (funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER .)
    FLOAT           reduce using rule 107 (funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER .)
    LONG            reduce using rule 107 (funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER .)
    AUTO            reduce using rule 107 (funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER .)
    CHAR            reduce using rule 107 (funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock RETURN valor PUNTOCOMA LLAVER .)


state 229

    (64) else -> ELSE . conllaves
    (65) else -> ELSE . sinllaves
    (68) conllaves -> . LLAVEL bodyblock LLAVER
    (66) sinllaves -> . while
    (67) sinllaves -> . variable
    (53) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (36) variable -> . AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA
    (37) variable -> . AUTO IDENTIFICADOR PUNTOCOMA
    (38) variable -> . numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA
    (39) variable -> . numerotipo IDENTIFICADOR PUNTOCOMA
    (40) variable -> . CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA
    (41) numerotipo -> . INT
    (42) numerotipo -> . FLOAT
    (43) numerotipo -> . LONG

    LLAVEL          shift and go to state 138
    WHILE           shift and go to state 18
    AUTO            shift and go to state 113
    CHAR            shift and go to state 114
    INT             shift and go to state 115
    FLOAT           shift and go to state 116
    LONG            shift and go to state 117

    conllaves                      shift and go to state 182
    sinllaves                      shift and go to state 183
    while                          shift and go to state 139
    variable                       shift and go to state 140
    numerotipo                     shift and go to state 16

state 230

    (61) elseif -> ELSE IF LPAR condicionif RPAR conllaves else .

    $end            reduce using rule 61 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    LLAVER          reduce using rule 61 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    AUTO            reduce using rule 61 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    CHAR            reduce using rule 61 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    WHILE           reduce using rule 61 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    IF              reduce using rule 61 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    FOR             reduce using rule 61 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    PRINT           reduce using rule 61 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    INT             reduce using rule 61 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    FLOAT           reduce using rule 61 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    LONG            reduce using rule 61 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    RETURN          reduce using rule 61 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)


state 231

    (62) elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .

    $end            reduce using rule 62 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    LLAVER          reduce using rule 62 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    AUTO            reduce using rule 62 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    CHAR            reduce using rule 62 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    WHILE           reduce using rule 62 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    IF              reduce using rule 62 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    FOR             reduce using rule 62 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    PRINT           reduce using rule 62 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    INT             reduce using rule 62 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    FLOAT           reduce using rule 62 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    LONG            reduce using rule 62 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    RETURN          reduce using rule 62 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IDENTIFICADOR in state 14 resolved as shift
WARNING: shift/reduce conflict for IDENTIFICADOR in state 17 resolved as shift
WARNING: shift/reduce conflict for IDENTIFICADOR in state 24 resolved as shift
WARNING: shift/reduce conflict for RPAR in state 37 resolved as shift
WARNING: shift/reduce conflict for EXCLAMACION in state 48 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 48 resolved as shift
WARNING: shift/reduce conflict for FLOTANTE in state 48 resolved as shift
WARNING: shift/reduce conflict for CHARACTER in state 48 resolved as shift
WARNING: shift/reduce conflict for STRING in state 48 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 48 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 48 resolved as shift
WARNING: shift/reduce conflict for IDENTIFICADOR in state 48 resolved as shift
WARNING: shift/reduce conflict for IGUAL in state 104 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 104 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 104 resolved as shift
WARNING: shift/reduce conflict for EXCLAMACION in state 104 resolved as shift
WARNING: shift/reduce conflict for LLAVER in state 118 resolved as shift
WARNING: shift/reduce conflict for VOID in state 118 resolved as shift
WARNING: shift/reduce conflict for LLAVER in state 118 resolved as shift
WARNING: shift/reduce conflict for VOID in state 118 resolved as shift
WARNING: shift/reduce conflict for INT in state 118 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 118 resolved as shift
WARNING: shift/reduce conflict for LONG in state 118 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 118 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 118 resolved as shift
WARNING: shift/reduce conflict for EXCLAMACION in state 197 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 197 resolved as shift
WARNING: shift/reduce conflict for FLOTANTE in state 197 resolved as shift
WARNING: shift/reduce conflict for CHARACTER in state 197 resolved as shift
WARNING: shift/reduce conflict for STRING in state 197 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 197 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 197 resolved as shift
WARNING: shift/reduce conflict for IDENTIFICADOR in state 197 resolved as shift
WARNING: reduce/reduce conflict in state 0 resolved using rule (body -> <empty>)
WARNING: rejected rule (funcionclaseimpl -> <empty>) in state 0
WARNING: reduce/reduce conflict in state 28 resolved using rule (tipo -> INT)
WARNING: rejected rule (numerotipo -> INT) in state 28
WARNING: reduce/reduce conflict in state 29 resolved using rule (tipo -> FLOAT)
WARNING: rejected rule (numerotipo -> FLOAT) in state 29
WARNING: reduce/reduce conflict in state 30 resolved using rule (tipo -> LONG)
WARNING: rejected rule (numerotipo -> LONG) in state 30
WARNING: reduce/reduce conflict in state 118 resolved using rule (definicion -> <empty>)
WARNING: rejected rule (funcionclaseimpl -> <empty>) in state 118
WARNING: reduce/reduce conflict in state 136 resolved using rule (expresionpos -> <empty>)
WARNING: rejected rule (elseif -> <empty>) in state 136
WARNING: reduce/reduce conflict in state 137 resolved using rule (expresionpos -> <empty>)
WARNING: rejected rule (elseif -> <empty>) in state 137
WARNING: Rule (funcionclaseimpl -> <empty>) is never reduced
WARNING: Rule (elseif -> <empty>) is never reduced
