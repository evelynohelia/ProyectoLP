Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    ASTERISCO
    BACKSLASH
    BOOL
    CIRCUNFLEJO
    COMADOBLE
    COMASIMPLE
    COMENTARIO
    CORCHETEL
    CORCHETER
    DOBLEPUNTO
    FOR
    INTERROGACION
    MAS
    MENOS
    NEW
    NULLPOINTER
    NUMERAL
    PIPE
    PORCENTAJE
    PRIVATE
    PROTECTED
    PUBLIC
    PUNTERO
    SLASH
    STATIC
    STRUCT
    THEN
    VIRGUILA

Grammar

Rule 0     S' -> body
Rule 1     body -> variable
Rule 2     body -> while
Rule 3     body -> expresionif
Rule 4     body -> claseimplementacion
Rule 5     body -> funcionclaseimpl
Rule 6     body -> creacionobjeto
Rule 7     body -> asignarvalorobjeto
Rule 8     body -> usarfuncionobjeto
Rule 9     body -> <empty>
Rule 10    bodyblock -> bodyblock variable
Rule 11    bodyblock -> bodyblock while
Rule 12    bodyblock -> bodyblock expresionif
Rule 13    bodyblock -> <empty>
Rule 14    funcionblock -> bodyblock variable
Rule 15    funcionblock -> bodyblock while
Rule 16    funcionblock -> bodyblock expresionif
Rule 17    funcionblock -> RETURN statement
Rule 18    funcionblock -> <empty>
Rule 19    varblock -> varblock variable
Rule 20    varblock -> <empty>
Rule 21    variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA
Rule 22    variable -> tipo IDENTIFICADOR PUNTOCOMA
Rule 23    tipo -> INT
Rule 24    tipo -> FLOAT
Rule 25    tipo -> LONG
Rule 26    tipo -> AUTO
Rule 27    tipo -> CHAR
Rule 28    tipo -> VOID
Rule 29    valor -> ENTERO
Rule 30    valor -> FLOTANTE
Rule 31    valor -> CHARACTER
Rule 32    valor -> STRING
Rule 33    valor -> TRUE
Rule 34    valor -> FALSE
Rule 35    valor -> IDENTIFICADOR
Rule 36    while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
Rule 37    expresion -> expresion comparador expresion
Rule 38    expresionif -> IF LPAR condicionif RPAR conllaves expresionpos
Rule 39    expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos
Rule 40    expresionpos -> else
Rule 41    expresionpos -> elseif
Rule 42    expresionpos -> <empty>
Rule 43    elseif -> ELSE IF LPAR condicionif RPAR conllaves else
Rule 44    elseif -> ELSE IF LPAR condicionif RPAR sinllaves else
Rule 45    elseif -> <empty>
Rule 46    else -> ELSE conllaves
Rule 47    else -> ELSE sinllaves
Rule 48    sinllaves -> while
Rule 49    sinllaves -> variable
Rule 50    conllaves -> LLAVEL bodyblock LLAVER
Rule 51    condicionif -> initcondicion
Rule 52    condicionif -> statement
Rule 53    initcondicion -> varblock statement
Rule 54    statement -> expresion
Rule 55    statement -> EXCLAMACION boolean
Rule 56    statement -> EXCLAMACION LPAR expresion RPAR
Rule 57    statement -> EXCLAMACION IDENTIFICADOR
Rule 58    boolean -> TRUE
Rule 59    boolean -> FALSE
Rule 60    expresion -> valor
Rule 61    comparador -> IGUAL IGUAL
Rule 62    comparador -> MENOR
Rule 63    comparador -> MAYOR
Rule 64    comparador -> MENOR IGUAL
Rule 65    comparador -> MAYOR IGUAL
Rule 66    comparador -> EXCLAMACION IGUAL
Rule 67    claseimplementacion -> CLASS IDENTIFICADOR LLAVEL bloqueclase LLAVER
Rule 68    bloqueclase -> bloqueclase definicion
Rule 69    bloqueclase -> bloqueclase funcionclaseimpl
Rule 70    bloqueclase -> <empty>
Rule 71    definicion -> tipo IDENTIFICADOR PUNTOCOMA
Rule 72    definicion -> <empty>
Rule 73    funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL funcionblock LLAVER
Rule 74    funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER
Rule 75    funcionclaseimpl -> <empty>
Rule 76    parametrosimplementacion -> tipo IDENTIFICADOR masparametrosimplementacion
Rule 77    parametrosimplementacion -> <empty>
Rule 78    parametrosfuncion -> IDENTIFICADOR masparametrosfuncion
Rule 79    parametrosfuncion -> <empty>
Rule 80    masparametrosimplementacion -> COMMA parametrosimplementacion
Rule 81    masparametrosimplementacion -> <empty>
Rule 82    masparametrosfuncion -> COMMA parametrosfuncion
Rule 83    masparametrosfuncion -> <empty>
Rule 84    creacionobjeto -> IDENTIFICADOR IDENTIFICADOR PUNTOCOMA
Rule 85    asignarvalorobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR IGUAL valor
Rule 86    asignarvalorobjeto -> LPAR expresion RPAR
Rule 87    asignarvalorobjeto -> LPAR statement RPAR
Rule 88    asignarvalorobjeto -> EXCLAMACION LPAR statement RPAR
Rule 89    usarfuncionobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR LPAR parametrosfuncion RPAR PUNTOCOMA

Terminals, with rules where they appear

AND                  : 
ASTERISCO            : 
AUTO                 : 26
BACKSLASH            : 
BOOL                 : 
CHAR                 : 27
CHARACTER            : 31
CIRCUNFLEJO          : 
CLASS                : 67
COMADOBLE            : 
COMASIMPLE           : 
COMENTARIO           : 
COMMA                : 80 82
CORCHETEL            : 
CORCHETER            : 
DOBLEPUNTO           : 
ELSE                 : 43 44 46 47
ENTERO               : 29
EXCLAMACION          : 55 56 57 66 88
FALSE                : 34 59
FLOAT                : 24
FLOTANTE             : 30
FOR                  : 
IDENTIFICADOR        : 21 22 35 57 67 71 73 74 76 78 84 84 85 85 89 89
IF                   : 38 39 43 44
IGUAL                : 21 61 61 64 65 66 85
INT                  : 23
INTERROGACION        : 
LLAVEL               : 36 50 67 73 74
LLAVER               : 36 50 67 73 74
LONG                 : 25
LPAR                 : 36 38 39 43 44 56 73 74 86 87 88 89
MAS                  : 
MAYOR                : 63 65
MENOR                : 62 64
MENOS                : 
NEW                  : 
NULLPOINTER          : 
NUMERAL              : 
PIPE                 : 
PORCENTAJE           : 
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
PUNTERO              : 
PUNTO                : 85 89
PUNTOCOMA            : 21 22 71 84 89
RETURN               : 17
RPAR                 : 36 38 39 43 44 56 73 74 86 87 88 89
SLASH                : 
STATIC               : 
STRING               : 32
STRUCT               : 
THEN                 : 
TRUE                 : 33 58
VIRGUILA             : 
VOID                 : 28 74
WHILE                : 36
error                : 

Nonterminals, with rules where they appear

asignarvalorobjeto   : 7
bloqueclase          : 67 68 69
body                 : 0
bodyblock            : 10 11 12 14 15 16 36 50 74
boolean              : 55
claseimplementacion  : 4
comparador           : 37
condicionif          : 38 39 43 44
conllaves            : 38 43 46
creacionobjeto       : 6
definicion           : 68
else                 : 40 43 44
elseif               : 41
expresion            : 37 37 54 56 86
expresionif          : 3 12 16
expresionpos         : 38 39
funcionblock         : 73
funcionclaseimpl     : 5 69
initcondicion        : 51
masparametrosfuncion : 78
masparametrosimplementacion : 76
parametrosfuncion    : 82 89
parametrosimplementacion : 73 74 80
sinllaves            : 39 44 47
statement            : 17 36 52 53 87 88
tipo                 : 21 22 71 73 76
usarfuncionobjeto    : 8
valor                : 21 60 85
varblock             : 19 53
variable             : 1 10 14 19 49
while                : 2 11 15 48

Parsing method: LALR

state 0

    (0) S' -> . body
    (1) body -> . variable
    (2) body -> . while
    (3) body -> . expresionif
    (4) body -> . claseimplementacion
    (5) body -> . funcionclaseimpl
    (6) body -> . creacionobjeto
    (7) body -> . asignarvalorobjeto
    (8) body -> . usarfuncionobjeto
    (9) body -> .
    (21) variable -> . tipo IDENTIFICADOR IGUAL valor PUNTOCOMA
    (22) variable -> . tipo IDENTIFICADOR PUNTOCOMA
    (36) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (38) expresionif -> . IF LPAR condicionif RPAR conllaves expresionpos
    (39) expresionif -> . IF LPAR condicionif RPAR sinllaves expresionpos
    (67) claseimplementacion -> . CLASS IDENTIFICADOR LLAVEL bloqueclase LLAVER
    (73) funcionclaseimpl -> . tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL funcionblock LLAVER
    (74) funcionclaseimpl -> . VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER
    (75) funcionclaseimpl -> .
    (84) creacionobjeto -> . IDENTIFICADOR IDENTIFICADOR PUNTOCOMA
    (85) asignarvalorobjeto -> . IDENTIFICADOR PUNTO IDENTIFICADOR IGUAL valor
    (86) asignarvalorobjeto -> . LPAR expresion RPAR
    (87) asignarvalorobjeto -> . LPAR statement RPAR
    (88) asignarvalorobjeto -> . EXCLAMACION LPAR statement RPAR
    (89) usarfuncionobjeto -> . IDENTIFICADOR PUNTO IDENTIFICADOR LPAR parametrosfuncion RPAR PUNTOCOMA
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . LONG
    (26) tipo -> . AUTO
    (27) tipo -> . CHAR
    (28) tipo -> . VOID

  ! reduce/reduce conflict for $end resolved using rule 9 (body -> .)
    $end            reduce using rule 9 (body -> .)
    WHILE           shift and go to state 12
    IF              shift and go to state 14
    CLASS           shift and go to state 15
    VOID            shift and go to state 16
    IDENTIFICADOR   shift and go to state 11
    LPAR            shift and go to state 13
    EXCLAMACION     shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    LONG            shift and go to state 20
    AUTO            shift and go to state 21
    CHAR            shift and go to state 22

  ! $end            [ reduce using rule 75 (funcionclaseimpl -> .) ]

    body                           shift and go to state 1
    variable                       shift and go to state 2
    while                          shift and go to state 3
    expresionif                    shift and go to state 4
    claseimplementacion            shift and go to state 5
    funcionclaseimpl               shift and go to state 6
    creacionobjeto                 shift and go to state 7
    asignarvalorobjeto             shift and go to state 8
    usarfuncionobjeto              shift and go to state 9
    tipo                           shift and go to state 10

state 1

    (0) S' -> body .



state 2

    (1) body -> variable .

    $end            reduce using rule 1 (body -> variable .)


state 3

    (2) body -> while .

    $end            reduce using rule 2 (body -> while .)


state 4

    (3) body -> expresionif .

    $end            reduce using rule 3 (body -> expresionif .)


state 5

    (4) body -> claseimplementacion .

    $end            reduce using rule 4 (body -> claseimplementacion .)


state 6

    (5) body -> funcionclaseimpl .

    $end            reduce using rule 5 (body -> funcionclaseimpl .)


state 7

    (6) body -> creacionobjeto .

    $end            reduce using rule 6 (body -> creacionobjeto .)


state 8

    (7) body -> asignarvalorobjeto .

    $end            reduce using rule 7 (body -> asignarvalorobjeto .)


state 9

    (8) body -> usarfuncionobjeto .

    $end            reduce using rule 8 (body -> usarfuncionobjeto .)


state 10

    (21) variable -> tipo . IDENTIFICADOR IGUAL valor PUNTOCOMA
    (22) variable -> tipo . IDENTIFICADOR PUNTOCOMA
    (73) funcionclaseimpl -> tipo . IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL funcionblock LLAVER

    IDENTIFICADOR   shift and go to state 23


state 11

    (84) creacionobjeto -> IDENTIFICADOR . IDENTIFICADOR PUNTOCOMA
    (85) asignarvalorobjeto -> IDENTIFICADOR . PUNTO IDENTIFICADOR IGUAL valor
    (89) usarfuncionobjeto -> IDENTIFICADOR . PUNTO IDENTIFICADOR LPAR parametrosfuncion RPAR PUNTOCOMA

    IDENTIFICADOR   shift and go to state 24
    PUNTO           shift and go to state 25


state 12

    (36) while -> WHILE . LPAR statement RPAR LLAVEL bodyblock LLAVER

    LPAR            shift and go to state 26


state 13

    (86) asignarvalorobjeto -> LPAR . expresion RPAR
    (87) asignarvalorobjeto -> LPAR . statement RPAR
    (37) expresion -> . expresion comparador expresion
    (60) expresion -> . valor
    (54) statement -> . expresion
    (55) statement -> . EXCLAMACION boolean
    (56) statement -> . EXCLAMACION LPAR expresion RPAR
    (57) statement -> . EXCLAMACION IDENTIFICADOR
    (29) valor -> . ENTERO
    (30) valor -> . FLOTANTE
    (31) valor -> . CHARACTER
    (32) valor -> . STRING
    (33) valor -> . TRUE
    (34) valor -> . FALSE
    (35) valor -> . IDENTIFICADOR

    EXCLAMACION     shift and go to state 30
    ENTERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    CHARACTER       shift and go to state 34
    STRING          shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    IDENTIFICADOR   shift and go to state 31

    expresion                      shift and go to state 27
    statement                      shift and go to state 28
    valor                          shift and go to state 29

state 14

    (38) expresionif -> IF . LPAR condicionif RPAR conllaves expresionpos
    (39) expresionif -> IF . LPAR condicionif RPAR sinllaves expresionpos

    LPAR            shift and go to state 38


state 15

    (67) claseimplementacion -> CLASS . IDENTIFICADOR LLAVEL bloqueclase LLAVER

    IDENTIFICADOR   shift and go to state 39


state 16

    (74) funcionclaseimpl -> VOID . IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER
    (28) tipo -> VOID .

  ! shift/reduce conflict for IDENTIFICADOR resolved as shift
    IDENTIFICADOR   shift and go to state 40

  ! IDENTIFICADOR   [ reduce using rule 28 (tipo -> VOID .) ]


state 17

    (88) asignarvalorobjeto -> EXCLAMACION . LPAR statement RPAR

    LPAR            shift and go to state 41


state 18

    (23) tipo -> INT .

    IDENTIFICADOR   reduce using rule 23 (tipo -> INT .)


state 19

    (24) tipo -> FLOAT .

    IDENTIFICADOR   reduce using rule 24 (tipo -> FLOAT .)


state 20

    (25) tipo -> LONG .

    IDENTIFICADOR   reduce using rule 25 (tipo -> LONG .)


state 21

    (26) tipo -> AUTO .

    IDENTIFICADOR   reduce using rule 26 (tipo -> AUTO .)


state 22

    (27) tipo -> CHAR .

    IDENTIFICADOR   reduce using rule 27 (tipo -> CHAR .)


state 23

    (21) variable -> tipo IDENTIFICADOR . IGUAL valor PUNTOCOMA
    (22) variable -> tipo IDENTIFICADOR . PUNTOCOMA
    (73) funcionclaseimpl -> tipo IDENTIFICADOR . LPAR parametrosimplementacion RPAR LLAVEL funcionblock LLAVER

    IGUAL           shift and go to state 42
    PUNTOCOMA       shift and go to state 43
    LPAR            shift and go to state 44


state 24

    (84) creacionobjeto -> IDENTIFICADOR IDENTIFICADOR . PUNTOCOMA

    PUNTOCOMA       shift and go to state 45


state 25

    (85) asignarvalorobjeto -> IDENTIFICADOR PUNTO . IDENTIFICADOR IGUAL valor
    (89) usarfuncionobjeto -> IDENTIFICADOR PUNTO . IDENTIFICADOR LPAR parametrosfuncion RPAR PUNTOCOMA

    IDENTIFICADOR   shift and go to state 46


state 26

    (36) while -> WHILE LPAR . statement RPAR LLAVEL bodyblock LLAVER
    (54) statement -> . expresion
    (55) statement -> . EXCLAMACION boolean
    (56) statement -> . EXCLAMACION LPAR expresion RPAR
    (57) statement -> . EXCLAMACION IDENTIFICADOR
    (37) expresion -> . expresion comparador expresion
    (60) expresion -> . valor
    (29) valor -> . ENTERO
    (30) valor -> . FLOTANTE
    (31) valor -> . CHARACTER
    (32) valor -> . STRING
    (33) valor -> . TRUE
    (34) valor -> . FALSE
    (35) valor -> . IDENTIFICADOR

    EXCLAMACION     shift and go to state 30
    ENTERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    CHARACTER       shift and go to state 34
    STRING          shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    IDENTIFICADOR   shift and go to state 31

    statement                      shift and go to state 47
    expresion                      shift and go to state 48
    valor                          shift and go to state 29

state 27

    (86) asignarvalorobjeto -> LPAR expresion . RPAR
    (37) expresion -> expresion . comparador expresion
    (54) statement -> expresion .
    (61) comparador -> . IGUAL IGUAL
    (62) comparador -> . MENOR
    (63) comparador -> . MAYOR
    (64) comparador -> . MENOR IGUAL
    (65) comparador -> . MAYOR IGUAL
    (66) comparador -> . EXCLAMACION IGUAL

  ! shift/reduce conflict for RPAR resolved as shift
    RPAR            shift and go to state 49
    IGUAL           shift and go to state 51
    MENOR           shift and go to state 52
    MAYOR           shift and go to state 53
    EXCLAMACION     shift and go to state 54

  ! RPAR            [ reduce using rule 54 (statement -> expresion .) ]

    comparador                     shift and go to state 50

state 28

    (87) asignarvalorobjeto -> LPAR statement . RPAR

    RPAR            shift and go to state 55


state 29

    (60) expresion -> valor .

    RPAR            reduce using rule 60 (expresion -> valor .)
    IGUAL           reduce using rule 60 (expresion -> valor .)
    MENOR           reduce using rule 60 (expresion -> valor .)
    MAYOR           reduce using rule 60 (expresion -> valor .)
    EXCLAMACION     reduce using rule 60 (expresion -> valor .)
    LLAVER          reduce using rule 60 (expresion -> valor .)


state 30

    (55) statement -> EXCLAMACION . boolean
    (56) statement -> EXCLAMACION . LPAR expresion RPAR
    (57) statement -> EXCLAMACION . IDENTIFICADOR
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE

    LPAR            shift and go to state 57
    IDENTIFICADOR   shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    boolean                        shift and go to state 56

state 31

    (35) valor -> IDENTIFICADOR .

    RPAR            reduce using rule 35 (valor -> IDENTIFICADOR .)
    IGUAL           reduce using rule 35 (valor -> IDENTIFICADOR .)
    MENOR           reduce using rule 35 (valor -> IDENTIFICADOR .)
    MAYOR           reduce using rule 35 (valor -> IDENTIFICADOR .)
    EXCLAMACION     reduce using rule 35 (valor -> IDENTIFICADOR .)
    PUNTOCOMA       reduce using rule 35 (valor -> IDENTIFICADOR .)
    LLAVER          reduce using rule 35 (valor -> IDENTIFICADOR .)
    $end            reduce using rule 35 (valor -> IDENTIFICADOR .)


state 32

    (29) valor -> ENTERO .

    RPAR            reduce using rule 29 (valor -> ENTERO .)
    IGUAL           reduce using rule 29 (valor -> ENTERO .)
    MENOR           reduce using rule 29 (valor -> ENTERO .)
    MAYOR           reduce using rule 29 (valor -> ENTERO .)
    EXCLAMACION     reduce using rule 29 (valor -> ENTERO .)
    PUNTOCOMA       reduce using rule 29 (valor -> ENTERO .)
    LLAVER          reduce using rule 29 (valor -> ENTERO .)
    $end            reduce using rule 29 (valor -> ENTERO .)


state 33

    (30) valor -> FLOTANTE .

    RPAR            reduce using rule 30 (valor -> FLOTANTE .)
    IGUAL           reduce using rule 30 (valor -> FLOTANTE .)
    MENOR           reduce using rule 30 (valor -> FLOTANTE .)
    MAYOR           reduce using rule 30 (valor -> FLOTANTE .)
    EXCLAMACION     reduce using rule 30 (valor -> FLOTANTE .)
    PUNTOCOMA       reduce using rule 30 (valor -> FLOTANTE .)
    LLAVER          reduce using rule 30 (valor -> FLOTANTE .)
    $end            reduce using rule 30 (valor -> FLOTANTE .)


state 34

    (31) valor -> CHARACTER .

    RPAR            reduce using rule 31 (valor -> CHARACTER .)
    IGUAL           reduce using rule 31 (valor -> CHARACTER .)
    MENOR           reduce using rule 31 (valor -> CHARACTER .)
    MAYOR           reduce using rule 31 (valor -> CHARACTER .)
    EXCLAMACION     reduce using rule 31 (valor -> CHARACTER .)
    PUNTOCOMA       reduce using rule 31 (valor -> CHARACTER .)
    LLAVER          reduce using rule 31 (valor -> CHARACTER .)
    $end            reduce using rule 31 (valor -> CHARACTER .)


state 35

    (32) valor -> STRING .

    RPAR            reduce using rule 32 (valor -> STRING .)
    IGUAL           reduce using rule 32 (valor -> STRING .)
    MENOR           reduce using rule 32 (valor -> STRING .)
    MAYOR           reduce using rule 32 (valor -> STRING .)
    EXCLAMACION     reduce using rule 32 (valor -> STRING .)
    PUNTOCOMA       reduce using rule 32 (valor -> STRING .)
    LLAVER          reduce using rule 32 (valor -> STRING .)
    $end            reduce using rule 32 (valor -> STRING .)


state 36

    (33) valor -> TRUE .

    RPAR            reduce using rule 33 (valor -> TRUE .)
    IGUAL           reduce using rule 33 (valor -> TRUE .)
    MENOR           reduce using rule 33 (valor -> TRUE .)
    MAYOR           reduce using rule 33 (valor -> TRUE .)
    EXCLAMACION     reduce using rule 33 (valor -> TRUE .)
    PUNTOCOMA       reduce using rule 33 (valor -> TRUE .)
    LLAVER          reduce using rule 33 (valor -> TRUE .)
    $end            reduce using rule 33 (valor -> TRUE .)


state 37

    (34) valor -> FALSE .

    RPAR            reduce using rule 34 (valor -> FALSE .)
    IGUAL           reduce using rule 34 (valor -> FALSE .)
    MENOR           reduce using rule 34 (valor -> FALSE .)
    MAYOR           reduce using rule 34 (valor -> FALSE .)
    EXCLAMACION     reduce using rule 34 (valor -> FALSE .)
    PUNTOCOMA       reduce using rule 34 (valor -> FALSE .)
    LLAVER          reduce using rule 34 (valor -> FALSE .)
    $end            reduce using rule 34 (valor -> FALSE .)


state 38

    (38) expresionif -> IF LPAR . condicionif RPAR conllaves expresionpos
    (39) expresionif -> IF LPAR . condicionif RPAR sinllaves expresionpos
    (51) condicionif -> . initcondicion
    (52) condicionif -> . statement
    (53) initcondicion -> . varblock statement
    (54) statement -> . expresion
    (55) statement -> . EXCLAMACION boolean
    (56) statement -> . EXCLAMACION LPAR expresion RPAR
    (57) statement -> . EXCLAMACION IDENTIFICADOR
    (19) varblock -> . varblock variable
    (20) varblock -> .
    (37) expresion -> . expresion comparador expresion
    (60) expresion -> . valor
    (29) valor -> . ENTERO
    (30) valor -> . FLOTANTE
    (31) valor -> . CHARACTER
    (32) valor -> . STRING
    (33) valor -> . TRUE
    (34) valor -> . FALSE
    (35) valor -> . IDENTIFICADOR

  ! shift/reduce conflict for EXCLAMACION resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for FLOTANTE resolved as shift
  ! shift/reduce conflict for CHARACTER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for IDENTIFICADOR resolved as shift
    EXCLAMACION     shift and go to state 30
    INT             reduce using rule 20 (varblock -> .)
    FLOAT           reduce using rule 20 (varblock -> .)
    LONG            reduce using rule 20 (varblock -> .)
    AUTO            reduce using rule 20 (varblock -> .)
    CHAR            reduce using rule 20 (varblock -> .)
    VOID            reduce using rule 20 (varblock -> .)
    ENTERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    CHARACTER       shift and go to state 34
    STRING          shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    IDENTIFICADOR   shift and go to state 31

  ! EXCLAMACION     [ reduce using rule 20 (varblock -> .) ]
  ! ENTERO          [ reduce using rule 20 (varblock -> .) ]
  ! FLOTANTE        [ reduce using rule 20 (varblock -> .) ]
  ! CHARACTER       [ reduce using rule 20 (varblock -> .) ]
  ! STRING          [ reduce using rule 20 (varblock -> .) ]
  ! TRUE            [ reduce using rule 20 (varblock -> .) ]
  ! FALSE           [ reduce using rule 20 (varblock -> .) ]
  ! IDENTIFICADOR   [ reduce using rule 20 (varblock -> .) ]

    condicionif                    shift and go to state 61
    initcondicion                  shift and go to state 62
    statement                      shift and go to state 63
    varblock                       shift and go to state 64
    expresion                      shift and go to state 48
    valor                          shift and go to state 29

state 39

    (67) claseimplementacion -> CLASS IDENTIFICADOR . LLAVEL bloqueclase LLAVER

    LLAVEL          shift and go to state 65


state 40

    (74) funcionclaseimpl -> VOID IDENTIFICADOR . LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER

    LPAR            shift and go to state 66


state 41

    (88) asignarvalorobjeto -> EXCLAMACION LPAR . statement RPAR
    (54) statement -> . expresion
    (55) statement -> . EXCLAMACION boolean
    (56) statement -> . EXCLAMACION LPAR expresion RPAR
    (57) statement -> . EXCLAMACION IDENTIFICADOR
    (37) expresion -> . expresion comparador expresion
    (60) expresion -> . valor
    (29) valor -> . ENTERO
    (30) valor -> . FLOTANTE
    (31) valor -> . CHARACTER
    (32) valor -> . STRING
    (33) valor -> . TRUE
    (34) valor -> . FALSE
    (35) valor -> . IDENTIFICADOR

    EXCLAMACION     shift and go to state 30
    ENTERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    CHARACTER       shift and go to state 34
    STRING          shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    IDENTIFICADOR   shift and go to state 31

    statement                      shift and go to state 67
    expresion                      shift and go to state 48
    valor                          shift and go to state 29

state 42

    (21) variable -> tipo IDENTIFICADOR IGUAL . valor PUNTOCOMA
    (29) valor -> . ENTERO
    (30) valor -> . FLOTANTE
    (31) valor -> . CHARACTER
    (32) valor -> . STRING
    (33) valor -> . TRUE
    (34) valor -> . FALSE
    (35) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    CHARACTER       shift and go to state 34
    STRING          shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    IDENTIFICADOR   shift and go to state 31

    valor                          shift and go to state 68

state 43

    (22) variable -> tipo IDENTIFICADOR PUNTOCOMA .

    $end            reduce using rule 22 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    EXCLAMACION     reduce using rule 22 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    INT             reduce using rule 22 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    FLOAT           reduce using rule 22 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    LONG            reduce using rule 22 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    AUTO            reduce using rule 22 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    CHAR            reduce using rule 22 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    VOID            reduce using rule 22 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    ENTERO          reduce using rule 22 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    FLOTANTE        reduce using rule 22 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    CHARACTER       reduce using rule 22 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    STRING          reduce using rule 22 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    TRUE            reduce using rule 22 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    FALSE           reduce using rule 22 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    IDENTIFICADOR   reduce using rule 22 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    ELSE            reduce using rule 22 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    LLAVER          reduce using rule 22 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    WHILE           reduce using rule 22 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    IF              reduce using rule 22 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)


state 44

    (73) funcionclaseimpl -> tipo IDENTIFICADOR LPAR . parametrosimplementacion RPAR LLAVEL funcionblock LLAVER
    (76) parametrosimplementacion -> . tipo IDENTIFICADOR masparametrosimplementacion
    (77) parametrosimplementacion -> .
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . LONG
    (26) tipo -> . AUTO
    (27) tipo -> . CHAR
    (28) tipo -> . VOID

    RPAR            reduce using rule 77 (parametrosimplementacion -> .)
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    LONG            shift and go to state 20
    AUTO            shift and go to state 21
    CHAR            shift and go to state 22
    VOID            shift and go to state 71

    tipo                           shift and go to state 69
    parametrosimplementacion       shift and go to state 70

state 45

    (84) creacionobjeto -> IDENTIFICADOR IDENTIFICADOR PUNTOCOMA .

    $end            reduce using rule 84 (creacionobjeto -> IDENTIFICADOR IDENTIFICADOR PUNTOCOMA .)


state 46

    (85) asignarvalorobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR . IGUAL valor
    (89) usarfuncionobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR . LPAR parametrosfuncion RPAR PUNTOCOMA

    IGUAL           shift and go to state 72
    LPAR            shift and go to state 73


state 47

    (36) while -> WHILE LPAR statement . RPAR LLAVEL bodyblock LLAVER

    RPAR            shift and go to state 74


state 48

    (54) statement -> expresion .
    (37) expresion -> expresion . comparador expresion
    (61) comparador -> . IGUAL IGUAL
    (62) comparador -> . MENOR
    (63) comparador -> . MAYOR
    (64) comparador -> . MENOR IGUAL
    (65) comparador -> . MAYOR IGUAL
    (66) comparador -> . EXCLAMACION IGUAL

    RPAR            reduce using rule 54 (statement -> expresion .)
    LLAVER          reduce using rule 54 (statement -> expresion .)
    IGUAL           shift and go to state 51
    MENOR           shift and go to state 52
    MAYOR           shift and go to state 53
    EXCLAMACION     shift and go to state 54

    comparador                     shift and go to state 50

state 49

    (86) asignarvalorobjeto -> LPAR expresion RPAR .

    $end            reduce using rule 86 (asignarvalorobjeto -> LPAR expresion RPAR .)


state 50

    (37) expresion -> expresion comparador . expresion
    (37) expresion -> . expresion comparador expresion
    (60) expresion -> . valor
    (29) valor -> . ENTERO
    (30) valor -> . FLOTANTE
    (31) valor -> . CHARACTER
    (32) valor -> . STRING
    (33) valor -> . TRUE
    (34) valor -> . FALSE
    (35) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    CHARACTER       shift and go to state 34
    STRING          shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    IDENTIFICADOR   shift and go to state 31

    expresion                      shift and go to state 75
    valor                          shift and go to state 29

state 51

    (61) comparador -> IGUAL . IGUAL

    IGUAL           shift and go to state 76


state 52

    (62) comparador -> MENOR .
    (64) comparador -> MENOR . IGUAL

    ENTERO          reduce using rule 62 (comparador -> MENOR .)
    FLOTANTE        reduce using rule 62 (comparador -> MENOR .)
    CHARACTER       reduce using rule 62 (comparador -> MENOR .)
    STRING          reduce using rule 62 (comparador -> MENOR .)
    TRUE            reduce using rule 62 (comparador -> MENOR .)
    FALSE           reduce using rule 62 (comparador -> MENOR .)
    IDENTIFICADOR   reduce using rule 62 (comparador -> MENOR .)
    IGUAL           shift and go to state 77


state 53

    (63) comparador -> MAYOR .
    (65) comparador -> MAYOR . IGUAL

    ENTERO          reduce using rule 63 (comparador -> MAYOR .)
    FLOTANTE        reduce using rule 63 (comparador -> MAYOR .)
    CHARACTER       reduce using rule 63 (comparador -> MAYOR .)
    STRING          reduce using rule 63 (comparador -> MAYOR .)
    TRUE            reduce using rule 63 (comparador -> MAYOR .)
    FALSE           reduce using rule 63 (comparador -> MAYOR .)
    IDENTIFICADOR   reduce using rule 63 (comparador -> MAYOR .)
    IGUAL           shift and go to state 78


state 54

    (66) comparador -> EXCLAMACION . IGUAL

    IGUAL           shift and go to state 79


state 55

    (87) asignarvalorobjeto -> LPAR statement RPAR .

    $end            reduce using rule 87 (asignarvalorobjeto -> LPAR statement RPAR .)


state 56

    (55) statement -> EXCLAMACION boolean .

    RPAR            reduce using rule 55 (statement -> EXCLAMACION boolean .)
    LLAVER          reduce using rule 55 (statement -> EXCLAMACION boolean .)


state 57

    (56) statement -> EXCLAMACION LPAR . expresion RPAR
    (37) expresion -> . expresion comparador expresion
    (60) expresion -> . valor
    (29) valor -> . ENTERO
    (30) valor -> . FLOTANTE
    (31) valor -> . CHARACTER
    (32) valor -> . STRING
    (33) valor -> . TRUE
    (34) valor -> . FALSE
    (35) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    CHARACTER       shift and go to state 34
    STRING          shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    IDENTIFICADOR   shift and go to state 31

    expresion                      shift and go to state 80
    valor                          shift and go to state 29

state 58

    (57) statement -> EXCLAMACION IDENTIFICADOR .

    RPAR            reduce using rule 57 (statement -> EXCLAMACION IDENTIFICADOR .)
    LLAVER          reduce using rule 57 (statement -> EXCLAMACION IDENTIFICADOR .)


state 59

    (58) boolean -> TRUE .

    RPAR            reduce using rule 58 (boolean -> TRUE .)
    LLAVER          reduce using rule 58 (boolean -> TRUE .)


state 60

    (59) boolean -> FALSE .

    RPAR            reduce using rule 59 (boolean -> FALSE .)
    LLAVER          reduce using rule 59 (boolean -> FALSE .)


state 61

    (38) expresionif -> IF LPAR condicionif . RPAR conllaves expresionpos
    (39) expresionif -> IF LPAR condicionif . RPAR sinllaves expresionpos

    RPAR            shift and go to state 81


state 62

    (51) condicionif -> initcondicion .

    RPAR            reduce using rule 51 (condicionif -> initcondicion .)


state 63

    (52) condicionif -> statement .

    RPAR            reduce using rule 52 (condicionif -> statement .)


state 64

    (53) initcondicion -> varblock . statement
    (19) varblock -> varblock . variable
    (54) statement -> . expresion
    (55) statement -> . EXCLAMACION boolean
    (56) statement -> . EXCLAMACION LPAR expresion RPAR
    (57) statement -> . EXCLAMACION IDENTIFICADOR
    (21) variable -> . tipo IDENTIFICADOR IGUAL valor PUNTOCOMA
    (22) variable -> . tipo IDENTIFICADOR PUNTOCOMA
    (37) expresion -> . expresion comparador expresion
    (60) expresion -> . valor
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . LONG
    (26) tipo -> . AUTO
    (27) tipo -> . CHAR
    (28) tipo -> . VOID
    (29) valor -> . ENTERO
    (30) valor -> . FLOTANTE
    (31) valor -> . CHARACTER
    (32) valor -> . STRING
    (33) valor -> . TRUE
    (34) valor -> . FALSE
    (35) valor -> . IDENTIFICADOR

    EXCLAMACION     shift and go to state 30
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    LONG            shift and go to state 20
    AUTO            shift and go to state 21
    CHAR            shift and go to state 22
    VOID            shift and go to state 71
    ENTERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    CHARACTER       shift and go to state 34
    STRING          shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    IDENTIFICADOR   shift and go to state 31

    statement                      shift and go to state 82
    variable                       shift and go to state 83
    expresion                      shift and go to state 48
    tipo                           shift and go to state 84
    valor                          shift and go to state 29

state 65

    (67) claseimplementacion -> CLASS IDENTIFICADOR LLAVEL . bloqueclase LLAVER
    (68) bloqueclase -> . bloqueclase definicion
    (69) bloqueclase -> . bloqueclase funcionclaseimpl
    (70) bloqueclase -> .

    LLAVER          reduce using rule 70 (bloqueclase -> .)
    VOID            reduce using rule 70 (bloqueclase -> .)
    INT             reduce using rule 70 (bloqueclase -> .)
    FLOAT           reduce using rule 70 (bloqueclase -> .)
    LONG            reduce using rule 70 (bloqueclase -> .)
    AUTO            reduce using rule 70 (bloqueclase -> .)
    CHAR            reduce using rule 70 (bloqueclase -> .)

    bloqueclase                    shift and go to state 85

state 66

    (74) funcionclaseimpl -> VOID IDENTIFICADOR LPAR . parametrosimplementacion RPAR LLAVEL bodyblock LLAVER
    (76) parametrosimplementacion -> . tipo IDENTIFICADOR masparametrosimplementacion
    (77) parametrosimplementacion -> .
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . LONG
    (26) tipo -> . AUTO
    (27) tipo -> . CHAR
    (28) tipo -> . VOID

    RPAR            reduce using rule 77 (parametrosimplementacion -> .)
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    LONG            shift and go to state 20
    AUTO            shift and go to state 21
    CHAR            shift and go to state 22
    VOID            shift and go to state 71

    parametrosimplementacion       shift and go to state 86
    tipo                           shift and go to state 69

state 67

    (88) asignarvalorobjeto -> EXCLAMACION LPAR statement . RPAR

    RPAR            shift and go to state 87


state 68

    (21) variable -> tipo IDENTIFICADOR IGUAL valor . PUNTOCOMA

    PUNTOCOMA       shift and go to state 88


state 69

    (76) parametrosimplementacion -> tipo . IDENTIFICADOR masparametrosimplementacion

    IDENTIFICADOR   shift and go to state 89


state 70

    (73) funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion . RPAR LLAVEL funcionblock LLAVER

    RPAR            shift and go to state 90


state 71

    (28) tipo -> VOID .

    IDENTIFICADOR   reduce using rule 28 (tipo -> VOID .)


state 72

    (85) asignarvalorobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR IGUAL . valor
    (29) valor -> . ENTERO
    (30) valor -> . FLOTANTE
    (31) valor -> . CHARACTER
    (32) valor -> . STRING
    (33) valor -> . TRUE
    (34) valor -> . FALSE
    (35) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    CHARACTER       shift and go to state 34
    STRING          shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    IDENTIFICADOR   shift and go to state 31

    valor                          shift and go to state 91

state 73

    (89) usarfuncionobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR LPAR . parametrosfuncion RPAR PUNTOCOMA
    (78) parametrosfuncion -> . IDENTIFICADOR masparametrosfuncion
    (79) parametrosfuncion -> .

    IDENTIFICADOR   shift and go to state 92
    RPAR            reduce using rule 79 (parametrosfuncion -> .)

    parametrosfuncion              shift and go to state 93

state 74

    (36) while -> WHILE LPAR statement RPAR . LLAVEL bodyblock LLAVER

    LLAVEL          shift and go to state 94


state 75

    (37) expresion -> expresion comparador expresion .
    (37) expresion -> expresion . comparador expresion
    (61) comparador -> . IGUAL IGUAL
    (62) comparador -> . MENOR
    (63) comparador -> . MAYOR
    (64) comparador -> . MENOR IGUAL
    (65) comparador -> . MAYOR IGUAL
    (66) comparador -> . EXCLAMACION IGUAL

  ! shift/reduce conflict for IGUAL resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for EXCLAMACION resolved as shift
    RPAR            reduce using rule 37 (expresion -> expresion comparador expresion .)
    LLAVER          reduce using rule 37 (expresion -> expresion comparador expresion .)
    IGUAL           shift and go to state 51
    MENOR           shift and go to state 52
    MAYOR           shift and go to state 53
    EXCLAMACION     shift and go to state 54

  ! IGUAL           [ reduce using rule 37 (expresion -> expresion comparador expresion .) ]
  ! MENOR           [ reduce using rule 37 (expresion -> expresion comparador expresion .) ]
  ! MAYOR           [ reduce using rule 37 (expresion -> expresion comparador expresion .) ]
  ! EXCLAMACION     [ reduce using rule 37 (expresion -> expresion comparador expresion .) ]

    comparador                     shift and go to state 50

state 76

    (61) comparador -> IGUAL IGUAL .

    ENTERO          reduce using rule 61 (comparador -> IGUAL IGUAL .)
    FLOTANTE        reduce using rule 61 (comparador -> IGUAL IGUAL .)
    CHARACTER       reduce using rule 61 (comparador -> IGUAL IGUAL .)
    STRING          reduce using rule 61 (comparador -> IGUAL IGUAL .)
    TRUE            reduce using rule 61 (comparador -> IGUAL IGUAL .)
    FALSE           reduce using rule 61 (comparador -> IGUAL IGUAL .)
    IDENTIFICADOR   reduce using rule 61 (comparador -> IGUAL IGUAL .)


state 77

    (64) comparador -> MENOR IGUAL .

    ENTERO          reduce using rule 64 (comparador -> MENOR IGUAL .)
    FLOTANTE        reduce using rule 64 (comparador -> MENOR IGUAL .)
    CHARACTER       reduce using rule 64 (comparador -> MENOR IGUAL .)
    STRING          reduce using rule 64 (comparador -> MENOR IGUAL .)
    TRUE            reduce using rule 64 (comparador -> MENOR IGUAL .)
    FALSE           reduce using rule 64 (comparador -> MENOR IGUAL .)
    IDENTIFICADOR   reduce using rule 64 (comparador -> MENOR IGUAL .)


state 78

    (65) comparador -> MAYOR IGUAL .

    ENTERO          reduce using rule 65 (comparador -> MAYOR IGUAL .)
    FLOTANTE        reduce using rule 65 (comparador -> MAYOR IGUAL .)
    CHARACTER       reduce using rule 65 (comparador -> MAYOR IGUAL .)
    STRING          reduce using rule 65 (comparador -> MAYOR IGUAL .)
    TRUE            reduce using rule 65 (comparador -> MAYOR IGUAL .)
    FALSE           reduce using rule 65 (comparador -> MAYOR IGUAL .)
    IDENTIFICADOR   reduce using rule 65 (comparador -> MAYOR IGUAL .)


state 79

    (66) comparador -> EXCLAMACION IGUAL .

    ENTERO          reduce using rule 66 (comparador -> EXCLAMACION IGUAL .)
    FLOTANTE        reduce using rule 66 (comparador -> EXCLAMACION IGUAL .)
    CHARACTER       reduce using rule 66 (comparador -> EXCLAMACION IGUAL .)
    STRING          reduce using rule 66 (comparador -> EXCLAMACION IGUAL .)
    TRUE            reduce using rule 66 (comparador -> EXCLAMACION IGUAL .)
    FALSE           reduce using rule 66 (comparador -> EXCLAMACION IGUAL .)
    IDENTIFICADOR   reduce using rule 66 (comparador -> EXCLAMACION IGUAL .)


state 80

    (56) statement -> EXCLAMACION LPAR expresion . RPAR
    (37) expresion -> expresion . comparador expresion
    (61) comparador -> . IGUAL IGUAL
    (62) comparador -> . MENOR
    (63) comparador -> . MAYOR
    (64) comparador -> . MENOR IGUAL
    (65) comparador -> . MAYOR IGUAL
    (66) comparador -> . EXCLAMACION IGUAL

    RPAR            shift and go to state 95
    IGUAL           shift and go to state 51
    MENOR           shift and go to state 52
    MAYOR           shift and go to state 53
    EXCLAMACION     shift and go to state 54

    comparador                     shift and go to state 50

state 81

    (38) expresionif -> IF LPAR condicionif RPAR . conllaves expresionpos
    (39) expresionif -> IF LPAR condicionif RPAR . sinllaves expresionpos
    (50) conllaves -> . LLAVEL bodyblock LLAVER
    (48) sinllaves -> . while
    (49) sinllaves -> . variable
    (36) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (21) variable -> . tipo IDENTIFICADOR IGUAL valor PUNTOCOMA
    (22) variable -> . tipo IDENTIFICADOR PUNTOCOMA
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . LONG
    (26) tipo -> . AUTO
    (27) tipo -> . CHAR
    (28) tipo -> . VOID

    LLAVEL          shift and go to state 98
    WHILE           shift and go to state 12
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    LONG            shift and go to state 20
    AUTO            shift and go to state 21
    CHAR            shift and go to state 22
    VOID            shift and go to state 71

    conllaves                      shift and go to state 96
    sinllaves                      shift and go to state 97
    while                          shift and go to state 99
    variable                       shift and go to state 100
    tipo                           shift and go to state 84

state 82

    (53) initcondicion -> varblock statement .

    RPAR            reduce using rule 53 (initcondicion -> varblock statement .)


state 83

    (19) varblock -> varblock variable .

    EXCLAMACION     reduce using rule 19 (varblock -> varblock variable .)
    INT             reduce using rule 19 (varblock -> varblock variable .)
    FLOAT           reduce using rule 19 (varblock -> varblock variable .)
    LONG            reduce using rule 19 (varblock -> varblock variable .)
    AUTO            reduce using rule 19 (varblock -> varblock variable .)
    CHAR            reduce using rule 19 (varblock -> varblock variable .)
    VOID            reduce using rule 19 (varblock -> varblock variable .)
    ENTERO          reduce using rule 19 (varblock -> varblock variable .)
    FLOTANTE        reduce using rule 19 (varblock -> varblock variable .)
    CHARACTER       reduce using rule 19 (varblock -> varblock variable .)
    STRING          reduce using rule 19 (varblock -> varblock variable .)
    TRUE            reduce using rule 19 (varblock -> varblock variable .)
    FALSE           reduce using rule 19 (varblock -> varblock variable .)
    IDENTIFICADOR   reduce using rule 19 (varblock -> varblock variable .)


state 84

    (21) variable -> tipo . IDENTIFICADOR IGUAL valor PUNTOCOMA
    (22) variable -> tipo . IDENTIFICADOR PUNTOCOMA

    IDENTIFICADOR   shift and go to state 101


state 85

    (67) claseimplementacion -> CLASS IDENTIFICADOR LLAVEL bloqueclase . LLAVER
    (68) bloqueclase -> bloqueclase . definicion
    (69) bloqueclase -> bloqueclase . funcionclaseimpl
    (71) definicion -> . tipo IDENTIFICADOR PUNTOCOMA
    (72) definicion -> .
    (73) funcionclaseimpl -> . tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL funcionblock LLAVER
    (74) funcionclaseimpl -> . VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER
    (75) funcionclaseimpl -> .
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . LONG
    (26) tipo -> . AUTO
    (27) tipo -> . CHAR
    (28) tipo -> . VOID

  ! shift/reduce conflict for LLAVER resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LLAVER resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! reduce/reduce conflict for INT resolved using rule 72 (definicion -> .)
  ! reduce/reduce conflict for FLOAT resolved using rule 72 (definicion -> .)
  ! reduce/reduce conflict for LONG resolved using rule 72 (definicion -> .)
  ! reduce/reduce conflict for AUTO resolved using rule 72 (definicion -> .)
  ! reduce/reduce conflict for CHAR resolved using rule 72 (definicion -> .)
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    LLAVER          shift and go to state 102
    VOID            shift and go to state 16
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    LONG            shift and go to state 20
    AUTO            shift and go to state 21
    CHAR            shift and go to state 22

  ! LLAVER          [ reduce using rule 72 (definicion -> .) ]
  ! VOID            [ reduce using rule 72 (definicion -> .) ]
  ! INT             [ reduce using rule 72 (definicion -> .) ]
  ! FLOAT           [ reduce using rule 72 (definicion -> .) ]
  ! LONG            [ reduce using rule 72 (definicion -> .) ]
  ! AUTO            [ reduce using rule 72 (definicion -> .) ]
  ! CHAR            [ reduce using rule 72 (definicion -> .) ]
  ! LLAVER          [ reduce using rule 75 (funcionclaseimpl -> .) ]
  ! VOID            [ reduce using rule 75 (funcionclaseimpl -> .) ]
  ! INT             [ reduce using rule 75 (funcionclaseimpl -> .) ]
  ! FLOAT           [ reduce using rule 75 (funcionclaseimpl -> .) ]
  ! LONG            [ reduce using rule 75 (funcionclaseimpl -> .) ]
  ! AUTO            [ reduce using rule 75 (funcionclaseimpl -> .) ]
  ! CHAR            [ reduce using rule 75 (funcionclaseimpl -> .) ]

    definicion                     shift and go to state 103
    funcionclaseimpl               shift and go to state 104
    tipo                           shift and go to state 105

state 86

    (74) funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion . RPAR LLAVEL bodyblock LLAVER

    RPAR            shift and go to state 106


state 87

    (88) asignarvalorobjeto -> EXCLAMACION LPAR statement RPAR .

    $end            reduce using rule 88 (asignarvalorobjeto -> EXCLAMACION LPAR statement RPAR .)


state 88

    (21) variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .

    $end            reduce using rule 21 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    EXCLAMACION     reduce using rule 21 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    INT             reduce using rule 21 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    FLOAT           reduce using rule 21 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    LONG            reduce using rule 21 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    AUTO            reduce using rule 21 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    CHAR            reduce using rule 21 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    VOID            reduce using rule 21 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    ENTERO          reduce using rule 21 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    FLOTANTE        reduce using rule 21 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    CHARACTER       reduce using rule 21 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    STRING          reduce using rule 21 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    TRUE            reduce using rule 21 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    FALSE           reduce using rule 21 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    IDENTIFICADOR   reduce using rule 21 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    ELSE            reduce using rule 21 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    LLAVER          reduce using rule 21 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    WHILE           reduce using rule 21 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    IF              reduce using rule 21 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)


state 89

    (76) parametrosimplementacion -> tipo IDENTIFICADOR . masparametrosimplementacion
    (80) masparametrosimplementacion -> . COMMA parametrosimplementacion
    (81) masparametrosimplementacion -> .

    COMMA           shift and go to state 108
    RPAR            reduce using rule 81 (masparametrosimplementacion -> .)

    masparametrosimplementacion    shift and go to state 107

state 90

    (73) funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR . LLAVEL funcionblock LLAVER

    LLAVEL          shift and go to state 109


state 91

    (85) asignarvalorobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR IGUAL valor .

    $end            reduce using rule 85 (asignarvalorobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR IGUAL valor .)


state 92

    (78) parametrosfuncion -> IDENTIFICADOR . masparametrosfuncion
    (82) masparametrosfuncion -> . COMMA parametrosfuncion
    (83) masparametrosfuncion -> .

    COMMA           shift and go to state 111
    RPAR            reduce using rule 83 (masparametrosfuncion -> .)

    masparametrosfuncion           shift and go to state 110

state 93

    (89) usarfuncionobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR LPAR parametrosfuncion . RPAR PUNTOCOMA

    RPAR            shift and go to state 112


state 94

    (36) while -> WHILE LPAR statement RPAR LLAVEL . bodyblock LLAVER
    (10) bodyblock -> . bodyblock variable
    (11) bodyblock -> . bodyblock while
    (12) bodyblock -> . bodyblock expresionif
    (13) bodyblock -> .

    LLAVER          reduce using rule 13 (bodyblock -> .)
    WHILE           reduce using rule 13 (bodyblock -> .)
    IF              reduce using rule 13 (bodyblock -> .)
    INT             reduce using rule 13 (bodyblock -> .)
    FLOAT           reduce using rule 13 (bodyblock -> .)
    LONG            reduce using rule 13 (bodyblock -> .)
    AUTO            reduce using rule 13 (bodyblock -> .)
    CHAR            reduce using rule 13 (bodyblock -> .)
    VOID            reduce using rule 13 (bodyblock -> .)

    bodyblock                      shift and go to state 113

state 95

    (56) statement -> EXCLAMACION LPAR expresion RPAR .

    RPAR            reduce using rule 56 (statement -> EXCLAMACION LPAR expresion RPAR .)
    LLAVER          reduce using rule 56 (statement -> EXCLAMACION LPAR expresion RPAR .)


state 96

    (38) expresionif -> IF LPAR condicionif RPAR conllaves . expresionpos
    (40) expresionpos -> . else
    (41) expresionpos -> . elseif
    (42) expresionpos -> .
    (46) else -> . ELSE conllaves
    (47) else -> . ELSE sinllaves
    (43) elseif -> . ELSE IF LPAR condicionif RPAR conllaves else
    (44) elseif -> . ELSE IF LPAR condicionif RPAR sinllaves else
    (45) elseif -> .

  ! reduce/reduce conflict for $end resolved using rule 42 (expresionpos -> .)
  ! reduce/reduce conflict for LLAVER resolved using rule 42 (expresionpos -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 42 (expresionpos -> .)
  ! reduce/reduce conflict for IF resolved using rule 42 (expresionpos -> .)
  ! reduce/reduce conflict for INT resolved using rule 42 (expresionpos -> .)
  ! reduce/reduce conflict for FLOAT resolved using rule 42 (expresionpos -> .)
  ! reduce/reduce conflict for LONG resolved using rule 42 (expresionpos -> .)
  ! reduce/reduce conflict for AUTO resolved using rule 42 (expresionpos -> .)
  ! reduce/reduce conflict for CHAR resolved using rule 42 (expresionpos -> .)
  ! reduce/reduce conflict for VOID resolved using rule 42 (expresionpos -> .)
    $end            reduce using rule 42 (expresionpos -> .)
    LLAVER          reduce using rule 42 (expresionpos -> .)
    WHILE           reduce using rule 42 (expresionpos -> .)
    IF              reduce using rule 42 (expresionpos -> .)
    INT             reduce using rule 42 (expresionpos -> .)
    FLOAT           reduce using rule 42 (expresionpos -> .)
    LONG            reduce using rule 42 (expresionpos -> .)
    AUTO            reduce using rule 42 (expresionpos -> .)
    CHAR            reduce using rule 42 (expresionpos -> .)
    VOID            reduce using rule 42 (expresionpos -> .)
    ELSE            shift and go to state 117

  ! $end            [ reduce using rule 45 (elseif -> .) ]
  ! LLAVER          [ reduce using rule 45 (elseif -> .) ]
  ! WHILE           [ reduce using rule 45 (elseif -> .) ]
  ! IF              [ reduce using rule 45 (elseif -> .) ]
  ! INT             [ reduce using rule 45 (elseif -> .) ]
  ! FLOAT           [ reduce using rule 45 (elseif -> .) ]
  ! LONG            [ reduce using rule 45 (elseif -> .) ]
  ! AUTO            [ reduce using rule 45 (elseif -> .) ]
  ! CHAR            [ reduce using rule 45 (elseif -> .) ]
  ! VOID            [ reduce using rule 45 (elseif -> .) ]

    expresionpos                   shift and go to state 114
    else                           shift and go to state 115
    elseif                         shift and go to state 116

state 97

    (39) expresionif -> IF LPAR condicionif RPAR sinllaves . expresionpos
    (40) expresionpos -> . else
    (41) expresionpos -> . elseif
    (42) expresionpos -> .
    (46) else -> . ELSE conllaves
    (47) else -> . ELSE sinllaves
    (43) elseif -> . ELSE IF LPAR condicionif RPAR conllaves else
    (44) elseif -> . ELSE IF LPAR condicionif RPAR sinllaves else
    (45) elseif -> .

  ! reduce/reduce conflict for $end resolved using rule 42 (expresionpos -> .)
  ! reduce/reduce conflict for LLAVER resolved using rule 42 (expresionpos -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 42 (expresionpos -> .)
  ! reduce/reduce conflict for IF resolved using rule 42 (expresionpos -> .)
  ! reduce/reduce conflict for INT resolved using rule 42 (expresionpos -> .)
  ! reduce/reduce conflict for FLOAT resolved using rule 42 (expresionpos -> .)
  ! reduce/reduce conflict for LONG resolved using rule 42 (expresionpos -> .)
  ! reduce/reduce conflict for AUTO resolved using rule 42 (expresionpos -> .)
  ! reduce/reduce conflict for CHAR resolved using rule 42 (expresionpos -> .)
  ! reduce/reduce conflict for VOID resolved using rule 42 (expresionpos -> .)
    $end            reduce using rule 42 (expresionpos -> .)
    LLAVER          reduce using rule 42 (expresionpos -> .)
    WHILE           reduce using rule 42 (expresionpos -> .)
    IF              reduce using rule 42 (expresionpos -> .)
    INT             reduce using rule 42 (expresionpos -> .)
    FLOAT           reduce using rule 42 (expresionpos -> .)
    LONG            reduce using rule 42 (expresionpos -> .)
    AUTO            reduce using rule 42 (expresionpos -> .)
    CHAR            reduce using rule 42 (expresionpos -> .)
    VOID            reduce using rule 42 (expresionpos -> .)
    ELSE            shift and go to state 117

  ! $end            [ reduce using rule 45 (elseif -> .) ]
  ! LLAVER          [ reduce using rule 45 (elseif -> .) ]
  ! WHILE           [ reduce using rule 45 (elseif -> .) ]
  ! IF              [ reduce using rule 45 (elseif -> .) ]
  ! INT             [ reduce using rule 45 (elseif -> .) ]
  ! FLOAT           [ reduce using rule 45 (elseif -> .) ]
  ! LONG            [ reduce using rule 45 (elseif -> .) ]
  ! AUTO            [ reduce using rule 45 (elseif -> .) ]
  ! CHAR            [ reduce using rule 45 (elseif -> .) ]
  ! VOID            [ reduce using rule 45 (elseif -> .) ]

    expresionpos                   shift and go to state 118
    else                           shift and go to state 115
    elseif                         shift and go to state 116

state 98

    (50) conllaves -> LLAVEL . bodyblock LLAVER
    (10) bodyblock -> . bodyblock variable
    (11) bodyblock -> . bodyblock while
    (12) bodyblock -> . bodyblock expresionif
    (13) bodyblock -> .

    LLAVER          reduce using rule 13 (bodyblock -> .)
    WHILE           reduce using rule 13 (bodyblock -> .)
    IF              reduce using rule 13 (bodyblock -> .)
    INT             reduce using rule 13 (bodyblock -> .)
    FLOAT           reduce using rule 13 (bodyblock -> .)
    LONG            reduce using rule 13 (bodyblock -> .)
    AUTO            reduce using rule 13 (bodyblock -> .)
    CHAR            reduce using rule 13 (bodyblock -> .)
    VOID            reduce using rule 13 (bodyblock -> .)

    bodyblock                      shift and go to state 119

state 99

    (48) sinllaves -> while .

    ELSE            reduce using rule 48 (sinllaves -> while .)
    $end            reduce using rule 48 (sinllaves -> while .)
    LLAVER          reduce using rule 48 (sinllaves -> while .)
    WHILE           reduce using rule 48 (sinllaves -> while .)
    IF              reduce using rule 48 (sinllaves -> while .)
    INT             reduce using rule 48 (sinllaves -> while .)
    FLOAT           reduce using rule 48 (sinllaves -> while .)
    LONG            reduce using rule 48 (sinllaves -> while .)
    AUTO            reduce using rule 48 (sinllaves -> while .)
    CHAR            reduce using rule 48 (sinllaves -> while .)
    VOID            reduce using rule 48 (sinllaves -> while .)


state 100

    (49) sinllaves -> variable .

    ELSE            reduce using rule 49 (sinllaves -> variable .)
    $end            reduce using rule 49 (sinllaves -> variable .)
    LLAVER          reduce using rule 49 (sinllaves -> variable .)
    WHILE           reduce using rule 49 (sinllaves -> variable .)
    IF              reduce using rule 49 (sinllaves -> variable .)
    INT             reduce using rule 49 (sinllaves -> variable .)
    FLOAT           reduce using rule 49 (sinllaves -> variable .)
    LONG            reduce using rule 49 (sinllaves -> variable .)
    AUTO            reduce using rule 49 (sinllaves -> variable .)
    CHAR            reduce using rule 49 (sinllaves -> variable .)
    VOID            reduce using rule 49 (sinllaves -> variable .)


state 101

    (21) variable -> tipo IDENTIFICADOR . IGUAL valor PUNTOCOMA
    (22) variable -> tipo IDENTIFICADOR . PUNTOCOMA

    IGUAL           shift and go to state 42
    PUNTOCOMA       shift and go to state 43


state 102

    (67) claseimplementacion -> CLASS IDENTIFICADOR LLAVEL bloqueclase LLAVER .

    $end            reduce using rule 67 (claseimplementacion -> CLASS IDENTIFICADOR LLAVEL bloqueclase LLAVER .)


state 103

    (68) bloqueclase -> bloqueclase definicion .

    LLAVER          reduce using rule 68 (bloqueclase -> bloqueclase definicion .)
    VOID            reduce using rule 68 (bloqueclase -> bloqueclase definicion .)
    INT             reduce using rule 68 (bloqueclase -> bloqueclase definicion .)
    FLOAT           reduce using rule 68 (bloqueclase -> bloqueclase definicion .)
    LONG            reduce using rule 68 (bloqueclase -> bloqueclase definicion .)
    AUTO            reduce using rule 68 (bloqueclase -> bloqueclase definicion .)
    CHAR            reduce using rule 68 (bloqueclase -> bloqueclase definicion .)


state 104

    (69) bloqueclase -> bloqueclase funcionclaseimpl .

    LLAVER          reduce using rule 69 (bloqueclase -> bloqueclase funcionclaseimpl .)
    VOID            reduce using rule 69 (bloqueclase -> bloqueclase funcionclaseimpl .)
    INT             reduce using rule 69 (bloqueclase -> bloqueclase funcionclaseimpl .)
    FLOAT           reduce using rule 69 (bloqueclase -> bloqueclase funcionclaseimpl .)
    LONG            reduce using rule 69 (bloqueclase -> bloqueclase funcionclaseimpl .)
    AUTO            reduce using rule 69 (bloqueclase -> bloqueclase funcionclaseimpl .)
    CHAR            reduce using rule 69 (bloqueclase -> bloqueclase funcionclaseimpl .)


state 105

    (71) definicion -> tipo . IDENTIFICADOR PUNTOCOMA
    (73) funcionclaseimpl -> tipo . IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL funcionblock LLAVER

    IDENTIFICADOR   shift and go to state 120


state 106

    (74) funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR . LLAVEL bodyblock LLAVER

    LLAVEL          shift and go to state 121


state 107

    (76) parametrosimplementacion -> tipo IDENTIFICADOR masparametrosimplementacion .

    RPAR            reduce using rule 76 (parametrosimplementacion -> tipo IDENTIFICADOR masparametrosimplementacion .)


state 108

    (80) masparametrosimplementacion -> COMMA . parametrosimplementacion
    (76) parametrosimplementacion -> . tipo IDENTIFICADOR masparametrosimplementacion
    (77) parametrosimplementacion -> .
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . LONG
    (26) tipo -> . AUTO
    (27) tipo -> . CHAR
    (28) tipo -> . VOID

    RPAR            reduce using rule 77 (parametrosimplementacion -> .)
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    LONG            shift and go to state 20
    AUTO            shift and go to state 21
    CHAR            shift and go to state 22
    VOID            shift and go to state 71

    parametrosimplementacion       shift and go to state 122
    tipo                           shift and go to state 69

state 109

    (73) funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL . funcionblock LLAVER
    (14) funcionblock -> . bodyblock variable
    (15) funcionblock -> . bodyblock while
    (16) funcionblock -> . bodyblock expresionif
    (17) funcionblock -> . RETURN statement
    (18) funcionblock -> .
    (10) bodyblock -> . bodyblock variable
    (11) bodyblock -> . bodyblock while
    (12) bodyblock -> . bodyblock expresionif
    (13) bodyblock -> .

    RETURN          shift and go to state 125
    LLAVER          reduce using rule 18 (funcionblock -> .)
    WHILE           reduce using rule 13 (bodyblock -> .)
    IF              reduce using rule 13 (bodyblock -> .)
    INT             reduce using rule 13 (bodyblock -> .)
    FLOAT           reduce using rule 13 (bodyblock -> .)
    LONG            reduce using rule 13 (bodyblock -> .)
    AUTO            reduce using rule 13 (bodyblock -> .)
    CHAR            reduce using rule 13 (bodyblock -> .)
    VOID            reduce using rule 13 (bodyblock -> .)

    funcionblock                   shift and go to state 123
    bodyblock                      shift and go to state 124

state 110

    (78) parametrosfuncion -> IDENTIFICADOR masparametrosfuncion .

    RPAR            reduce using rule 78 (parametrosfuncion -> IDENTIFICADOR masparametrosfuncion .)


state 111

    (82) masparametrosfuncion -> COMMA . parametrosfuncion
    (78) parametrosfuncion -> . IDENTIFICADOR masparametrosfuncion
    (79) parametrosfuncion -> .

    IDENTIFICADOR   shift and go to state 92
    RPAR            reduce using rule 79 (parametrosfuncion -> .)

    parametrosfuncion              shift and go to state 126

state 112

    (89) usarfuncionobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR LPAR parametrosfuncion RPAR . PUNTOCOMA

    PUNTOCOMA       shift and go to state 127


state 113

    (36) while -> WHILE LPAR statement RPAR LLAVEL bodyblock . LLAVER
    (10) bodyblock -> bodyblock . variable
    (11) bodyblock -> bodyblock . while
    (12) bodyblock -> bodyblock . expresionif
    (21) variable -> . tipo IDENTIFICADOR IGUAL valor PUNTOCOMA
    (22) variable -> . tipo IDENTIFICADOR PUNTOCOMA
    (36) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (38) expresionif -> . IF LPAR condicionif RPAR conllaves expresionpos
    (39) expresionif -> . IF LPAR condicionif RPAR sinllaves expresionpos
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . LONG
    (26) tipo -> . AUTO
    (27) tipo -> . CHAR
    (28) tipo -> . VOID

    LLAVER          shift and go to state 128
    WHILE           shift and go to state 12
    IF              shift and go to state 14
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    LONG            shift and go to state 20
    AUTO            shift and go to state 21
    CHAR            shift and go to state 22
    VOID            shift and go to state 71

    variable                       shift and go to state 129
    while                          shift and go to state 130
    expresionif                    shift and go to state 131
    tipo                           shift and go to state 84

state 114

    (38) expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .

    $end            reduce using rule 38 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    LLAVER          reduce using rule 38 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    WHILE           reduce using rule 38 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    IF              reduce using rule 38 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    INT             reduce using rule 38 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    FLOAT           reduce using rule 38 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    LONG            reduce using rule 38 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    AUTO            reduce using rule 38 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    CHAR            reduce using rule 38 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    VOID            reduce using rule 38 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)


state 115

    (40) expresionpos -> else .

    $end            reduce using rule 40 (expresionpos -> else .)
    LLAVER          reduce using rule 40 (expresionpos -> else .)
    WHILE           reduce using rule 40 (expresionpos -> else .)
    IF              reduce using rule 40 (expresionpos -> else .)
    INT             reduce using rule 40 (expresionpos -> else .)
    FLOAT           reduce using rule 40 (expresionpos -> else .)
    LONG            reduce using rule 40 (expresionpos -> else .)
    AUTO            reduce using rule 40 (expresionpos -> else .)
    CHAR            reduce using rule 40 (expresionpos -> else .)
    VOID            reduce using rule 40 (expresionpos -> else .)


state 116

    (41) expresionpos -> elseif .

    $end            reduce using rule 41 (expresionpos -> elseif .)
    LLAVER          reduce using rule 41 (expresionpos -> elseif .)
    WHILE           reduce using rule 41 (expresionpos -> elseif .)
    IF              reduce using rule 41 (expresionpos -> elseif .)
    INT             reduce using rule 41 (expresionpos -> elseif .)
    FLOAT           reduce using rule 41 (expresionpos -> elseif .)
    LONG            reduce using rule 41 (expresionpos -> elseif .)
    AUTO            reduce using rule 41 (expresionpos -> elseif .)
    CHAR            reduce using rule 41 (expresionpos -> elseif .)
    VOID            reduce using rule 41 (expresionpos -> elseif .)


state 117

    (46) else -> ELSE . conllaves
    (47) else -> ELSE . sinllaves
    (43) elseif -> ELSE . IF LPAR condicionif RPAR conllaves else
    (44) elseif -> ELSE . IF LPAR condicionif RPAR sinllaves else
    (50) conllaves -> . LLAVEL bodyblock LLAVER
    (48) sinllaves -> . while
    (49) sinllaves -> . variable
    (36) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (21) variable -> . tipo IDENTIFICADOR IGUAL valor PUNTOCOMA
    (22) variable -> . tipo IDENTIFICADOR PUNTOCOMA
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . LONG
    (26) tipo -> . AUTO
    (27) tipo -> . CHAR
    (28) tipo -> . VOID

    IF              shift and go to state 134
    LLAVEL          shift and go to state 98
    WHILE           shift and go to state 12
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    LONG            shift and go to state 20
    AUTO            shift and go to state 21
    CHAR            shift and go to state 22
    VOID            shift and go to state 71

    conllaves                      shift and go to state 132
    sinllaves                      shift and go to state 133
    while                          shift and go to state 99
    variable                       shift and go to state 100
    tipo                           shift and go to state 84

state 118

    (39) expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .

    $end            reduce using rule 39 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    LLAVER          reduce using rule 39 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    WHILE           reduce using rule 39 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    IF              reduce using rule 39 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    INT             reduce using rule 39 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    FLOAT           reduce using rule 39 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    LONG            reduce using rule 39 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    AUTO            reduce using rule 39 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    CHAR            reduce using rule 39 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    VOID            reduce using rule 39 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)


state 119

    (50) conllaves -> LLAVEL bodyblock . LLAVER
    (10) bodyblock -> bodyblock . variable
    (11) bodyblock -> bodyblock . while
    (12) bodyblock -> bodyblock . expresionif
    (21) variable -> . tipo IDENTIFICADOR IGUAL valor PUNTOCOMA
    (22) variable -> . tipo IDENTIFICADOR PUNTOCOMA
    (36) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (38) expresionif -> . IF LPAR condicionif RPAR conllaves expresionpos
    (39) expresionif -> . IF LPAR condicionif RPAR sinllaves expresionpos
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . LONG
    (26) tipo -> . AUTO
    (27) tipo -> . CHAR
    (28) tipo -> . VOID

    LLAVER          shift and go to state 135
    WHILE           shift and go to state 12
    IF              shift and go to state 14
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    LONG            shift and go to state 20
    AUTO            shift and go to state 21
    CHAR            shift and go to state 22
    VOID            shift and go to state 71

    variable                       shift and go to state 129
    while                          shift and go to state 130
    expresionif                    shift and go to state 131
    tipo                           shift and go to state 84

state 120

    (71) definicion -> tipo IDENTIFICADOR . PUNTOCOMA
    (73) funcionclaseimpl -> tipo IDENTIFICADOR . LPAR parametrosimplementacion RPAR LLAVEL funcionblock LLAVER

    PUNTOCOMA       shift and go to state 136
    LPAR            shift and go to state 44


state 121

    (74) funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL . bodyblock LLAVER
    (10) bodyblock -> . bodyblock variable
    (11) bodyblock -> . bodyblock while
    (12) bodyblock -> . bodyblock expresionif
    (13) bodyblock -> .

    LLAVER          reduce using rule 13 (bodyblock -> .)
    WHILE           reduce using rule 13 (bodyblock -> .)
    IF              reduce using rule 13 (bodyblock -> .)
    INT             reduce using rule 13 (bodyblock -> .)
    FLOAT           reduce using rule 13 (bodyblock -> .)
    LONG            reduce using rule 13 (bodyblock -> .)
    AUTO            reduce using rule 13 (bodyblock -> .)
    CHAR            reduce using rule 13 (bodyblock -> .)
    VOID            reduce using rule 13 (bodyblock -> .)

    bodyblock                      shift and go to state 137

state 122

    (80) masparametrosimplementacion -> COMMA parametrosimplementacion .

    RPAR            reduce using rule 80 (masparametrosimplementacion -> COMMA parametrosimplementacion .)


state 123

    (73) funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL funcionblock . LLAVER

    LLAVER          shift and go to state 138


state 124

    (14) funcionblock -> bodyblock . variable
    (15) funcionblock -> bodyblock . while
    (16) funcionblock -> bodyblock . expresionif
    (10) bodyblock -> bodyblock . variable
    (11) bodyblock -> bodyblock . while
    (12) bodyblock -> bodyblock . expresionif
    (21) variable -> . tipo IDENTIFICADOR IGUAL valor PUNTOCOMA
    (22) variable -> . tipo IDENTIFICADOR PUNTOCOMA
    (36) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (38) expresionif -> . IF LPAR condicionif RPAR conllaves expresionpos
    (39) expresionif -> . IF LPAR condicionif RPAR sinllaves expresionpos
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . LONG
    (26) tipo -> . AUTO
    (27) tipo -> . CHAR
    (28) tipo -> . VOID

    WHILE           shift and go to state 12
    IF              shift and go to state 14
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    LONG            shift and go to state 20
    AUTO            shift and go to state 21
    CHAR            shift and go to state 22
    VOID            shift and go to state 71

    variable                       shift and go to state 139
    while                          shift and go to state 140
    expresionif                    shift and go to state 141
    tipo                           shift and go to state 84

state 125

    (17) funcionblock -> RETURN . statement
    (54) statement -> . expresion
    (55) statement -> . EXCLAMACION boolean
    (56) statement -> . EXCLAMACION LPAR expresion RPAR
    (57) statement -> . EXCLAMACION IDENTIFICADOR
    (37) expresion -> . expresion comparador expresion
    (60) expresion -> . valor
    (29) valor -> . ENTERO
    (30) valor -> . FLOTANTE
    (31) valor -> . CHARACTER
    (32) valor -> . STRING
    (33) valor -> . TRUE
    (34) valor -> . FALSE
    (35) valor -> . IDENTIFICADOR

    EXCLAMACION     shift and go to state 30
    ENTERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    CHARACTER       shift and go to state 34
    STRING          shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    IDENTIFICADOR   shift and go to state 31

    statement                      shift and go to state 142
    expresion                      shift and go to state 48
    valor                          shift and go to state 29

state 126

    (82) masparametrosfuncion -> COMMA parametrosfuncion .

    RPAR            reduce using rule 82 (masparametrosfuncion -> COMMA parametrosfuncion .)


state 127

    (89) usarfuncionobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR LPAR parametrosfuncion RPAR PUNTOCOMA .

    $end            reduce using rule 89 (usarfuncionobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR LPAR parametrosfuncion RPAR PUNTOCOMA .)


state 128

    (36) while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .

    $end            reduce using rule 36 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    ELSE            reduce using rule 36 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    LLAVER          reduce using rule 36 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    WHILE           reduce using rule 36 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    IF              reduce using rule 36 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    INT             reduce using rule 36 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    FLOAT           reduce using rule 36 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    LONG            reduce using rule 36 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    AUTO            reduce using rule 36 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    CHAR            reduce using rule 36 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    VOID            reduce using rule 36 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)


state 129

    (10) bodyblock -> bodyblock variable .

    LLAVER          reduce using rule 10 (bodyblock -> bodyblock variable .)
    WHILE           reduce using rule 10 (bodyblock -> bodyblock variable .)
    IF              reduce using rule 10 (bodyblock -> bodyblock variable .)
    INT             reduce using rule 10 (bodyblock -> bodyblock variable .)
    FLOAT           reduce using rule 10 (bodyblock -> bodyblock variable .)
    LONG            reduce using rule 10 (bodyblock -> bodyblock variable .)
    AUTO            reduce using rule 10 (bodyblock -> bodyblock variable .)
    CHAR            reduce using rule 10 (bodyblock -> bodyblock variable .)
    VOID            reduce using rule 10 (bodyblock -> bodyblock variable .)


state 130

    (11) bodyblock -> bodyblock while .

    LLAVER          reduce using rule 11 (bodyblock -> bodyblock while .)
    WHILE           reduce using rule 11 (bodyblock -> bodyblock while .)
    IF              reduce using rule 11 (bodyblock -> bodyblock while .)
    INT             reduce using rule 11 (bodyblock -> bodyblock while .)
    FLOAT           reduce using rule 11 (bodyblock -> bodyblock while .)
    LONG            reduce using rule 11 (bodyblock -> bodyblock while .)
    AUTO            reduce using rule 11 (bodyblock -> bodyblock while .)
    CHAR            reduce using rule 11 (bodyblock -> bodyblock while .)
    VOID            reduce using rule 11 (bodyblock -> bodyblock while .)


state 131

    (12) bodyblock -> bodyblock expresionif .

    LLAVER          reduce using rule 12 (bodyblock -> bodyblock expresionif .)
    WHILE           reduce using rule 12 (bodyblock -> bodyblock expresionif .)
    IF              reduce using rule 12 (bodyblock -> bodyblock expresionif .)
    INT             reduce using rule 12 (bodyblock -> bodyblock expresionif .)
    FLOAT           reduce using rule 12 (bodyblock -> bodyblock expresionif .)
    LONG            reduce using rule 12 (bodyblock -> bodyblock expresionif .)
    AUTO            reduce using rule 12 (bodyblock -> bodyblock expresionif .)
    CHAR            reduce using rule 12 (bodyblock -> bodyblock expresionif .)
    VOID            reduce using rule 12 (bodyblock -> bodyblock expresionif .)


state 132

    (46) else -> ELSE conllaves .

    $end            reduce using rule 46 (else -> ELSE conllaves .)
    LLAVER          reduce using rule 46 (else -> ELSE conllaves .)
    WHILE           reduce using rule 46 (else -> ELSE conllaves .)
    IF              reduce using rule 46 (else -> ELSE conllaves .)
    INT             reduce using rule 46 (else -> ELSE conllaves .)
    FLOAT           reduce using rule 46 (else -> ELSE conllaves .)
    LONG            reduce using rule 46 (else -> ELSE conllaves .)
    AUTO            reduce using rule 46 (else -> ELSE conllaves .)
    CHAR            reduce using rule 46 (else -> ELSE conllaves .)
    VOID            reduce using rule 46 (else -> ELSE conllaves .)


state 133

    (47) else -> ELSE sinllaves .

    $end            reduce using rule 47 (else -> ELSE sinllaves .)
    LLAVER          reduce using rule 47 (else -> ELSE sinllaves .)
    WHILE           reduce using rule 47 (else -> ELSE sinllaves .)
    IF              reduce using rule 47 (else -> ELSE sinllaves .)
    INT             reduce using rule 47 (else -> ELSE sinllaves .)
    FLOAT           reduce using rule 47 (else -> ELSE sinllaves .)
    LONG            reduce using rule 47 (else -> ELSE sinllaves .)
    AUTO            reduce using rule 47 (else -> ELSE sinllaves .)
    CHAR            reduce using rule 47 (else -> ELSE sinllaves .)
    VOID            reduce using rule 47 (else -> ELSE sinllaves .)


state 134

    (43) elseif -> ELSE IF . LPAR condicionif RPAR conllaves else
    (44) elseif -> ELSE IF . LPAR condicionif RPAR sinllaves else

    LPAR            shift and go to state 143


state 135

    (50) conllaves -> LLAVEL bodyblock LLAVER .

    ELSE            reduce using rule 50 (conllaves -> LLAVEL bodyblock LLAVER .)
    $end            reduce using rule 50 (conllaves -> LLAVEL bodyblock LLAVER .)
    LLAVER          reduce using rule 50 (conllaves -> LLAVEL bodyblock LLAVER .)
    WHILE           reduce using rule 50 (conllaves -> LLAVEL bodyblock LLAVER .)
    IF              reduce using rule 50 (conllaves -> LLAVEL bodyblock LLAVER .)
    INT             reduce using rule 50 (conllaves -> LLAVEL bodyblock LLAVER .)
    FLOAT           reduce using rule 50 (conllaves -> LLAVEL bodyblock LLAVER .)
    LONG            reduce using rule 50 (conllaves -> LLAVEL bodyblock LLAVER .)
    AUTO            reduce using rule 50 (conllaves -> LLAVEL bodyblock LLAVER .)
    CHAR            reduce using rule 50 (conllaves -> LLAVEL bodyblock LLAVER .)
    VOID            reduce using rule 50 (conllaves -> LLAVEL bodyblock LLAVER .)


state 136

    (71) definicion -> tipo IDENTIFICADOR PUNTOCOMA .

    LLAVER          reduce using rule 71 (definicion -> tipo IDENTIFICADOR PUNTOCOMA .)
    VOID            reduce using rule 71 (definicion -> tipo IDENTIFICADOR PUNTOCOMA .)
    INT             reduce using rule 71 (definicion -> tipo IDENTIFICADOR PUNTOCOMA .)
    FLOAT           reduce using rule 71 (definicion -> tipo IDENTIFICADOR PUNTOCOMA .)
    LONG            reduce using rule 71 (definicion -> tipo IDENTIFICADOR PUNTOCOMA .)
    AUTO            reduce using rule 71 (definicion -> tipo IDENTIFICADOR PUNTOCOMA .)
    CHAR            reduce using rule 71 (definicion -> tipo IDENTIFICADOR PUNTOCOMA .)


state 137

    (74) funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock . LLAVER
    (10) bodyblock -> bodyblock . variable
    (11) bodyblock -> bodyblock . while
    (12) bodyblock -> bodyblock . expresionif
    (21) variable -> . tipo IDENTIFICADOR IGUAL valor PUNTOCOMA
    (22) variable -> . tipo IDENTIFICADOR PUNTOCOMA
    (36) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (38) expresionif -> . IF LPAR condicionif RPAR conllaves expresionpos
    (39) expresionif -> . IF LPAR condicionif RPAR sinllaves expresionpos
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . LONG
    (26) tipo -> . AUTO
    (27) tipo -> . CHAR
    (28) tipo -> . VOID

    LLAVER          shift and go to state 144
    WHILE           shift and go to state 12
    IF              shift and go to state 14
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    LONG            shift and go to state 20
    AUTO            shift and go to state 21
    CHAR            shift and go to state 22
    VOID            shift and go to state 71

    variable                       shift and go to state 129
    while                          shift and go to state 130
    expresionif                    shift and go to state 131
    tipo                           shift and go to state 84

state 138

    (73) funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL funcionblock LLAVER .

    $end            reduce using rule 73 (funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL funcionblock LLAVER .)
    LLAVER          reduce using rule 73 (funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL funcionblock LLAVER .)
    VOID            reduce using rule 73 (funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL funcionblock LLAVER .)
    INT             reduce using rule 73 (funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL funcionblock LLAVER .)
    FLOAT           reduce using rule 73 (funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL funcionblock LLAVER .)
    LONG            reduce using rule 73 (funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL funcionblock LLAVER .)
    AUTO            reduce using rule 73 (funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL funcionblock LLAVER .)
    CHAR            reduce using rule 73 (funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL funcionblock LLAVER .)


state 139

    (14) funcionblock -> bodyblock variable .
    (10) bodyblock -> bodyblock variable .

    LLAVER          reduce using rule 14 (funcionblock -> bodyblock variable .)
    WHILE           reduce using rule 10 (bodyblock -> bodyblock variable .)
    IF              reduce using rule 10 (bodyblock -> bodyblock variable .)
    INT             reduce using rule 10 (bodyblock -> bodyblock variable .)
    FLOAT           reduce using rule 10 (bodyblock -> bodyblock variable .)
    LONG            reduce using rule 10 (bodyblock -> bodyblock variable .)
    AUTO            reduce using rule 10 (bodyblock -> bodyblock variable .)
    CHAR            reduce using rule 10 (bodyblock -> bodyblock variable .)
    VOID            reduce using rule 10 (bodyblock -> bodyblock variable .)


state 140

    (15) funcionblock -> bodyblock while .
    (11) bodyblock -> bodyblock while .

    LLAVER          reduce using rule 15 (funcionblock -> bodyblock while .)
    WHILE           reduce using rule 11 (bodyblock -> bodyblock while .)
    IF              reduce using rule 11 (bodyblock -> bodyblock while .)
    INT             reduce using rule 11 (bodyblock -> bodyblock while .)
    FLOAT           reduce using rule 11 (bodyblock -> bodyblock while .)
    LONG            reduce using rule 11 (bodyblock -> bodyblock while .)
    AUTO            reduce using rule 11 (bodyblock -> bodyblock while .)
    CHAR            reduce using rule 11 (bodyblock -> bodyblock while .)
    VOID            reduce using rule 11 (bodyblock -> bodyblock while .)


state 141

    (16) funcionblock -> bodyblock expresionif .
    (12) bodyblock -> bodyblock expresionif .

    LLAVER          reduce using rule 16 (funcionblock -> bodyblock expresionif .)
    WHILE           reduce using rule 12 (bodyblock -> bodyblock expresionif .)
    IF              reduce using rule 12 (bodyblock -> bodyblock expresionif .)
    INT             reduce using rule 12 (bodyblock -> bodyblock expresionif .)
    FLOAT           reduce using rule 12 (bodyblock -> bodyblock expresionif .)
    LONG            reduce using rule 12 (bodyblock -> bodyblock expresionif .)
    AUTO            reduce using rule 12 (bodyblock -> bodyblock expresionif .)
    CHAR            reduce using rule 12 (bodyblock -> bodyblock expresionif .)
    VOID            reduce using rule 12 (bodyblock -> bodyblock expresionif .)


state 142

    (17) funcionblock -> RETURN statement .

    LLAVER          reduce using rule 17 (funcionblock -> RETURN statement .)


state 143

    (43) elseif -> ELSE IF LPAR . condicionif RPAR conllaves else
    (44) elseif -> ELSE IF LPAR . condicionif RPAR sinllaves else
    (51) condicionif -> . initcondicion
    (52) condicionif -> . statement
    (53) initcondicion -> . varblock statement
    (54) statement -> . expresion
    (55) statement -> . EXCLAMACION boolean
    (56) statement -> . EXCLAMACION LPAR expresion RPAR
    (57) statement -> . EXCLAMACION IDENTIFICADOR
    (19) varblock -> . varblock variable
    (20) varblock -> .
    (37) expresion -> . expresion comparador expresion
    (60) expresion -> . valor
    (29) valor -> . ENTERO
    (30) valor -> . FLOTANTE
    (31) valor -> . CHARACTER
    (32) valor -> . STRING
    (33) valor -> . TRUE
    (34) valor -> . FALSE
    (35) valor -> . IDENTIFICADOR

  ! shift/reduce conflict for EXCLAMACION resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for FLOTANTE resolved as shift
  ! shift/reduce conflict for CHARACTER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for IDENTIFICADOR resolved as shift
    EXCLAMACION     shift and go to state 30
    INT             reduce using rule 20 (varblock -> .)
    FLOAT           reduce using rule 20 (varblock -> .)
    LONG            reduce using rule 20 (varblock -> .)
    AUTO            reduce using rule 20 (varblock -> .)
    CHAR            reduce using rule 20 (varblock -> .)
    VOID            reduce using rule 20 (varblock -> .)
    ENTERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    CHARACTER       shift and go to state 34
    STRING          shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    IDENTIFICADOR   shift and go to state 31

  ! EXCLAMACION     [ reduce using rule 20 (varblock -> .) ]
  ! ENTERO          [ reduce using rule 20 (varblock -> .) ]
  ! FLOTANTE        [ reduce using rule 20 (varblock -> .) ]
  ! CHARACTER       [ reduce using rule 20 (varblock -> .) ]
  ! STRING          [ reduce using rule 20 (varblock -> .) ]
  ! TRUE            [ reduce using rule 20 (varblock -> .) ]
  ! FALSE           [ reduce using rule 20 (varblock -> .) ]
  ! IDENTIFICADOR   [ reduce using rule 20 (varblock -> .) ]

    condicionif                    shift and go to state 145
    initcondicion                  shift and go to state 62
    statement                      shift and go to state 63
    varblock                       shift and go to state 64
    expresion                      shift and go to state 48
    valor                          shift and go to state 29

state 144

    (74) funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER .

    $end            reduce using rule 74 (funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER .)
    LLAVER          reduce using rule 74 (funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER .)
    VOID            reduce using rule 74 (funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER .)
    INT             reduce using rule 74 (funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER .)
    FLOAT           reduce using rule 74 (funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER .)
    LONG            reduce using rule 74 (funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER .)
    AUTO            reduce using rule 74 (funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER .)
    CHAR            reduce using rule 74 (funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER .)


state 145

    (43) elseif -> ELSE IF LPAR condicionif . RPAR conllaves else
    (44) elseif -> ELSE IF LPAR condicionif . RPAR sinllaves else

    RPAR            shift and go to state 146


state 146

    (43) elseif -> ELSE IF LPAR condicionif RPAR . conllaves else
    (44) elseif -> ELSE IF LPAR condicionif RPAR . sinllaves else
    (50) conllaves -> . LLAVEL bodyblock LLAVER
    (48) sinllaves -> . while
    (49) sinllaves -> . variable
    (36) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (21) variable -> . tipo IDENTIFICADOR IGUAL valor PUNTOCOMA
    (22) variable -> . tipo IDENTIFICADOR PUNTOCOMA
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . LONG
    (26) tipo -> . AUTO
    (27) tipo -> . CHAR
    (28) tipo -> . VOID

    LLAVEL          shift and go to state 98
    WHILE           shift and go to state 12
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    LONG            shift and go to state 20
    AUTO            shift and go to state 21
    CHAR            shift and go to state 22
    VOID            shift and go to state 71

    conllaves                      shift and go to state 147
    sinllaves                      shift and go to state 148
    while                          shift and go to state 99
    variable                       shift and go to state 100
    tipo                           shift and go to state 84

state 147

    (43) elseif -> ELSE IF LPAR condicionif RPAR conllaves . else
    (46) else -> . ELSE conllaves
    (47) else -> . ELSE sinllaves

    ELSE            shift and go to state 149

    else                           shift and go to state 150

state 148

    (44) elseif -> ELSE IF LPAR condicionif RPAR sinllaves . else
    (46) else -> . ELSE conllaves
    (47) else -> . ELSE sinllaves

    ELSE            shift and go to state 149

    else                           shift and go to state 151

state 149

    (46) else -> ELSE . conllaves
    (47) else -> ELSE . sinllaves
    (50) conllaves -> . LLAVEL bodyblock LLAVER
    (48) sinllaves -> . while
    (49) sinllaves -> . variable
    (36) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (21) variable -> . tipo IDENTIFICADOR IGUAL valor PUNTOCOMA
    (22) variable -> . tipo IDENTIFICADOR PUNTOCOMA
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . LONG
    (26) tipo -> . AUTO
    (27) tipo -> . CHAR
    (28) tipo -> . VOID

    LLAVEL          shift and go to state 98
    WHILE           shift and go to state 12
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    LONG            shift and go to state 20
    AUTO            shift and go to state 21
    CHAR            shift and go to state 22
    VOID            shift and go to state 71

    conllaves                      shift and go to state 132
    sinllaves                      shift and go to state 133
    while                          shift and go to state 99
    variable                       shift and go to state 100
    tipo                           shift and go to state 84

state 150

    (43) elseif -> ELSE IF LPAR condicionif RPAR conllaves else .

    $end            reduce using rule 43 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    LLAVER          reduce using rule 43 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    WHILE           reduce using rule 43 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    IF              reduce using rule 43 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    INT             reduce using rule 43 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    FLOAT           reduce using rule 43 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    LONG            reduce using rule 43 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    AUTO            reduce using rule 43 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    CHAR            reduce using rule 43 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    VOID            reduce using rule 43 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)


state 151

    (44) elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .

    $end            reduce using rule 44 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    LLAVER          reduce using rule 44 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    WHILE           reduce using rule 44 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    IF              reduce using rule 44 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    INT             reduce using rule 44 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    FLOAT           reduce using rule 44 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    LONG            reduce using rule 44 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    AUTO            reduce using rule 44 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    CHAR            reduce using rule 44 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    VOID            reduce using rule 44 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IDENTIFICADOR in state 16 resolved as shift
WARNING: shift/reduce conflict for RPAR in state 27 resolved as shift
WARNING: shift/reduce conflict for EXCLAMACION in state 38 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 38 resolved as shift
WARNING: shift/reduce conflict for FLOTANTE in state 38 resolved as shift
WARNING: shift/reduce conflict for CHARACTER in state 38 resolved as shift
WARNING: shift/reduce conflict for STRING in state 38 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 38 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 38 resolved as shift
WARNING: shift/reduce conflict for IDENTIFICADOR in state 38 resolved as shift
WARNING: shift/reduce conflict for IGUAL in state 75 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 75 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 75 resolved as shift
WARNING: shift/reduce conflict for EXCLAMACION in state 75 resolved as shift
WARNING: shift/reduce conflict for LLAVER in state 85 resolved as shift
WARNING: shift/reduce conflict for VOID in state 85 resolved as shift
WARNING: shift/reduce conflict for LLAVER in state 85 resolved as shift
WARNING: shift/reduce conflict for VOID in state 85 resolved as shift
WARNING: shift/reduce conflict for INT in state 85 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 85 resolved as shift
WARNING: shift/reduce conflict for LONG in state 85 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 85 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 85 resolved as shift
WARNING: shift/reduce conflict for EXCLAMACION in state 143 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 143 resolved as shift
WARNING: shift/reduce conflict for FLOTANTE in state 143 resolved as shift
WARNING: shift/reduce conflict for CHARACTER in state 143 resolved as shift
WARNING: shift/reduce conflict for STRING in state 143 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 143 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 143 resolved as shift
WARNING: shift/reduce conflict for IDENTIFICADOR in state 143 resolved as shift
WARNING: reduce/reduce conflict in state 0 resolved using rule (body -> <empty>)
WARNING: rejected rule (funcionclaseimpl -> <empty>) in state 0
WARNING: reduce/reduce conflict in state 85 resolved using rule (definicion -> <empty>)
WARNING: rejected rule (funcionclaseimpl -> <empty>) in state 85
WARNING: reduce/reduce conflict in state 96 resolved using rule (expresionpos -> <empty>)
WARNING: rejected rule (elseif -> <empty>) in state 96
WARNING: reduce/reduce conflict in state 97 resolved using rule (expresionpos -> <empty>)
WARNING: rejected rule (elseif -> <empty>) in state 97
WARNING: Rule (funcionclaseimpl -> <empty>) is never reduced
WARNING: Rule (elseif -> <empty>) is never reduced
