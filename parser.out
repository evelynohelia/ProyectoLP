Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    ASTERISCO
    BACKSLASH
    BOOL
    CIRCUNFLEJO
    CLASS
    COMADOBLE
    COMASIMPLE
    COMENTARIO
    COMMA
    CORCHETEL
    CORCHETER
    DOBLEPUNTO
    FOR
    INTERROGACION
    MAS
    MENOS
    NEW
    NULLPOINTER
    NUMERAL
    PIPE
    PORCENTAJE
    PRIVATE
    PROTECTED
    PUBLIC
    PUNTERO
    PUNTO
    RETURN
    SLASH
    STATIC
    STRUCT
    THEN
    VIRGUILA

Grammar

Rule 0     S' -> body
Rule 1     body -> variable
Rule 2     body -> while
Rule 3     body -> expresionif
Rule 4     body -> <empty>
Rule 5     bodyblock -> bodyblock variable
Rule 6     bodyblock -> bodyblock while
Rule 7     bodyblock -> expresionif
Rule 8     bodyblock -> <empty>
Rule 9     varblock -> varblock variable
Rule 10    varblock -> <empty>
Rule 11    variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA
Rule 12    variable -> tipo IDENTIFICADOR PUNTOCOMA
Rule 13    tipo -> INT
Rule 14    tipo -> FLOAT
Rule 15    tipo -> LONG
Rule 16    tipo -> AUTO
Rule 17    tipo -> CHAR
Rule 18    tipo -> VOID
Rule 19    valor -> ENTERO
Rule 20    valor -> FLOTANTE
Rule 21    valor -> CHARACTER
Rule 22    valor -> STRING
Rule 23    valor -> TRUE
Rule 24    valor -> FALSE
Rule 25    valor -> IDENTIFICADOR
Rule 26    while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
Rule 27    expresion -> expresion comparador expresion
Rule 28    expresionif -> IF LPAR condicionif RPAR conllaves expresionpos
Rule 29    expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos
Rule 30    expresionpos -> else
Rule 31    expresionpos -> elseif
Rule 32    expresionpos -> <empty>
Rule 33    elseif -> ELSE IF LPAR condicionif RPAR conllaves else
Rule 34    elseif -> ELSE IF LPAR condicionif RPAR sinllaves else
Rule 35    elseif -> <empty>
Rule 36    else -> ELSE conllaves
Rule 37    else -> ELSE sinllaves
Rule 38    sinllaves -> while
Rule 39    sinllaves -> variable
Rule 40    conllaves -> LLAVEL bodyblock LLAVER
Rule 41    condicionif -> initcondicion
Rule 42    condicionif -> statement
Rule 43    initcondicion -> varblock statement
Rule 44    statement -> expresion
Rule 45    statement -> EXCLAMACION boolean
Rule 46    statement -> EXCLAMACION LPAR expresion RPAR
Rule 47    statement -> EXCLAMACION IDENTIFICADOR
Rule 48    boolean -> TRUE
Rule 49    boolean -> FALSE
Rule 50    expresion -> valor
Rule 51    comparador -> IGUAL IGUAL
Rule 52    comparador -> MENOR
Rule 53    comparador -> MAYOR
Rule 54    comparador -> MENOR IGUAL
Rule 55    comparador -> MAYOR IGUAL
Rule 56    comparador -> EXCLAMACION IGUAL

Terminals, with rules where they appear

AND                  : 
ASTERISCO            : 
AUTO                 : 16
BACKSLASH            : 
BOOL                 : 
CHAR                 : 17
CHARACTER            : 21
CIRCUNFLEJO          : 
CLASS                : 
COMADOBLE            : 
COMASIMPLE           : 
COMENTARIO           : 
COMMA                : 
CORCHETEL            : 
CORCHETER            : 
DOBLEPUNTO           : 
ELSE                 : 33 34 36 37
ENTERO               : 19
EXCLAMACION          : 45 46 47 56
FALSE                : 24 49
FLOAT                : 14
FLOTANTE             : 20
FOR                  : 
IDENTIFICADOR        : 11 12 25 47
IF                   : 28 29 33 34
IGUAL                : 11 51 51 54 55 56
INT                  : 13
INTERROGACION        : 
LLAVEL               : 26 40
LLAVER               : 26 40
LONG                 : 15
LPAR                 : 26 28 29 33 34 46
MAS                  : 
MAYOR                : 53 55
MENOR                : 52 54
MENOS                : 
NEW                  : 
NULLPOINTER          : 
NUMERAL              : 
PIPE                 : 
PORCENTAJE           : 
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
PUNTERO              : 
PUNTO                : 
PUNTOCOMA            : 11 12
RETURN               : 
RPAR                 : 26 28 29 33 34 46
SLASH                : 
STATIC               : 
STRING               : 22
STRUCT               : 
THEN                 : 
TRUE                 : 23 48
VIRGUILA             : 
VOID                 : 18
WHILE                : 26
error                : 

Nonterminals, with rules where they appear

body                 : 0
bodyblock            : 5 6 26 40
boolean              : 45
comparador           : 27
condicionif          : 28 29 33 34
conllaves            : 28 33 36
else                 : 30 33 34
elseif               : 31
expresion            : 27 27 44 46
expresionif          : 3 7
expresionpos         : 28 29
initcondicion        : 41
sinllaves            : 29 34 37
statement            : 26 42 43
tipo                 : 11 12
valor                : 11 50
varblock             : 9 43
variable             : 1 5 9 39
while                : 2 6 38

Parsing method: LALR

state 0

    (0) S' -> . body
    (1) body -> . variable
    (2) body -> . while
    (3) body -> . expresionif
    (4) body -> .
    (11) variable -> . tipo IDENTIFICADOR IGUAL valor PUNTOCOMA
    (12) variable -> . tipo IDENTIFICADOR PUNTOCOMA
    (26) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (28) expresionif -> . IF LPAR condicionif RPAR conllaves expresionpos
    (29) expresionif -> . IF LPAR condicionif RPAR sinllaves expresionpos
    (13) tipo -> . INT
    (14) tipo -> . FLOAT
    (15) tipo -> . LONG
    (16) tipo -> . AUTO
    (17) tipo -> . CHAR
    (18) tipo -> . VOID

    $end            reduce using rule 4 (body -> .)
    WHILE           shift and go to state 6
    IF              shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    LONG            shift and go to state 10
    AUTO            shift and go to state 11
    CHAR            shift and go to state 12
    VOID            shift and go to state 13

    body                           shift and go to state 1
    variable                       shift and go to state 2
    while                          shift and go to state 3
    expresionif                    shift and go to state 4
    tipo                           shift and go to state 5

state 1

    (0) S' -> body .



state 2

    (1) body -> variable .

    $end            reduce using rule 1 (body -> variable .)


state 3

    (2) body -> while .

    $end            reduce using rule 2 (body -> while .)


state 4

    (3) body -> expresionif .

    $end            reduce using rule 3 (body -> expresionif .)


state 5

    (11) variable -> tipo . IDENTIFICADOR IGUAL valor PUNTOCOMA
    (12) variable -> tipo . IDENTIFICADOR PUNTOCOMA

    IDENTIFICADOR   shift and go to state 14


state 6

    (26) while -> WHILE . LPAR statement RPAR LLAVEL bodyblock LLAVER

    LPAR            shift and go to state 15


state 7

    (28) expresionif -> IF . LPAR condicionif RPAR conllaves expresionpos
    (29) expresionif -> IF . LPAR condicionif RPAR sinllaves expresionpos

    LPAR            shift and go to state 16


state 8

    (13) tipo -> INT .

    IDENTIFICADOR   reduce using rule 13 (tipo -> INT .)


state 9

    (14) tipo -> FLOAT .

    IDENTIFICADOR   reduce using rule 14 (tipo -> FLOAT .)


state 10

    (15) tipo -> LONG .

    IDENTIFICADOR   reduce using rule 15 (tipo -> LONG .)


state 11

    (16) tipo -> AUTO .

    IDENTIFICADOR   reduce using rule 16 (tipo -> AUTO .)


state 12

    (17) tipo -> CHAR .

    IDENTIFICADOR   reduce using rule 17 (tipo -> CHAR .)


state 13

    (18) tipo -> VOID .

    IDENTIFICADOR   reduce using rule 18 (tipo -> VOID .)


state 14

    (11) variable -> tipo IDENTIFICADOR . IGUAL valor PUNTOCOMA
    (12) variable -> tipo IDENTIFICADOR . PUNTOCOMA

    IGUAL           shift and go to state 17
    PUNTOCOMA       shift and go to state 18


state 15

    (26) while -> WHILE LPAR . statement RPAR LLAVEL bodyblock LLAVER
    (44) statement -> . expresion
    (45) statement -> . EXCLAMACION boolean
    (46) statement -> . EXCLAMACION LPAR expresion RPAR
    (47) statement -> . EXCLAMACION IDENTIFICADOR
    (27) expresion -> . expresion comparador expresion
    (50) expresion -> . valor
    (19) valor -> . ENTERO
    (20) valor -> . FLOTANTE
    (21) valor -> . CHARACTER
    (22) valor -> . STRING
    (23) valor -> . TRUE
    (24) valor -> . FALSE
    (25) valor -> . IDENTIFICADOR

    EXCLAMACION     shift and go to state 21
    ENTERO          shift and go to state 24
    FLOTANTE        shift and go to state 25
    CHARACTER       shift and go to state 26
    STRING          shift and go to state 27
    TRUE            shift and go to state 28
    FALSE           shift and go to state 29
    IDENTIFICADOR   shift and go to state 22

    statement                      shift and go to state 19
    expresion                      shift and go to state 20
    valor                          shift and go to state 23

state 16

    (28) expresionif -> IF LPAR . condicionif RPAR conllaves expresionpos
    (29) expresionif -> IF LPAR . condicionif RPAR sinllaves expresionpos
    (41) condicionif -> . initcondicion
    (42) condicionif -> . statement
    (43) initcondicion -> . varblock statement
    (44) statement -> . expresion
    (45) statement -> . EXCLAMACION boolean
    (46) statement -> . EXCLAMACION LPAR expresion RPAR
    (47) statement -> . EXCLAMACION IDENTIFICADOR
    (9) varblock -> . varblock variable
    (10) varblock -> .
    (27) expresion -> . expresion comparador expresion
    (50) expresion -> . valor
    (19) valor -> . ENTERO
    (20) valor -> . FLOTANTE
    (21) valor -> . CHARACTER
    (22) valor -> . STRING
    (23) valor -> . TRUE
    (24) valor -> . FALSE
    (25) valor -> . IDENTIFICADOR

  ! shift/reduce conflict for EXCLAMACION resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for FLOTANTE resolved as shift
  ! shift/reduce conflict for CHARACTER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for IDENTIFICADOR resolved as shift
    EXCLAMACION     shift and go to state 21
    INT             reduce using rule 10 (varblock -> .)
    FLOAT           reduce using rule 10 (varblock -> .)
    LONG            reduce using rule 10 (varblock -> .)
    AUTO            reduce using rule 10 (varblock -> .)
    CHAR            reduce using rule 10 (varblock -> .)
    VOID            reduce using rule 10 (varblock -> .)
    ENTERO          shift and go to state 24
    FLOTANTE        shift and go to state 25
    CHARACTER       shift and go to state 26
    STRING          shift and go to state 27
    TRUE            shift and go to state 28
    FALSE           shift and go to state 29
    IDENTIFICADOR   shift and go to state 22

  ! EXCLAMACION     [ reduce using rule 10 (varblock -> .) ]
  ! ENTERO          [ reduce using rule 10 (varblock -> .) ]
  ! FLOTANTE        [ reduce using rule 10 (varblock -> .) ]
  ! CHARACTER       [ reduce using rule 10 (varblock -> .) ]
  ! STRING          [ reduce using rule 10 (varblock -> .) ]
  ! TRUE            [ reduce using rule 10 (varblock -> .) ]
  ! FALSE           [ reduce using rule 10 (varblock -> .) ]
  ! IDENTIFICADOR   [ reduce using rule 10 (varblock -> .) ]

    condicionif                    shift and go to state 30
    initcondicion                  shift and go to state 31
    statement                      shift and go to state 32
    varblock                       shift and go to state 33
    expresion                      shift and go to state 20
    valor                          shift and go to state 23

state 17

    (11) variable -> tipo IDENTIFICADOR IGUAL . valor PUNTOCOMA
    (19) valor -> . ENTERO
    (20) valor -> . FLOTANTE
    (21) valor -> . CHARACTER
    (22) valor -> . STRING
    (23) valor -> . TRUE
    (24) valor -> . FALSE
    (25) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 24
    FLOTANTE        shift and go to state 25
    CHARACTER       shift and go to state 26
    STRING          shift and go to state 27
    TRUE            shift and go to state 28
    FALSE           shift and go to state 29
    IDENTIFICADOR   shift and go to state 22

    valor                          shift and go to state 34

state 18

    (12) variable -> tipo IDENTIFICADOR PUNTOCOMA .

    $end            reduce using rule 12 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    EXCLAMACION     reduce using rule 12 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    INT             reduce using rule 12 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    FLOAT           reduce using rule 12 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    LONG            reduce using rule 12 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    AUTO            reduce using rule 12 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    CHAR            reduce using rule 12 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    VOID            reduce using rule 12 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    ENTERO          reduce using rule 12 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    FLOTANTE        reduce using rule 12 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    CHARACTER       reduce using rule 12 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    STRING          reduce using rule 12 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    TRUE            reduce using rule 12 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    FALSE           reduce using rule 12 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    IDENTIFICADOR   reduce using rule 12 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    ELSE            reduce using rule 12 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    LLAVER          reduce using rule 12 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    WHILE           reduce using rule 12 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)


state 19

    (26) while -> WHILE LPAR statement . RPAR LLAVEL bodyblock LLAVER

    RPAR            shift and go to state 35


state 20

    (44) statement -> expresion .
    (27) expresion -> expresion . comparador expresion
    (51) comparador -> . IGUAL IGUAL
    (52) comparador -> . MENOR
    (53) comparador -> . MAYOR
    (54) comparador -> . MENOR IGUAL
    (55) comparador -> . MAYOR IGUAL
    (56) comparador -> . EXCLAMACION IGUAL

    RPAR            reduce using rule 44 (statement -> expresion .)
    IGUAL           shift and go to state 37
    MENOR           shift and go to state 38
    MAYOR           shift and go to state 39
    EXCLAMACION     shift and go to state 40

    comparador                     shift and go to state 36

state 21

    (45) statement -> EXCLAMACION . boolean
    (46) statement -> EXCLAMACION . LPAR expresion RPAR
    (47) statement -> EXCLAMACION . IDENTIFICADOR
    (48) boolean -> . TRUE
    (49) boolean -> . FALSE

    LPAR            shift and go to state 42
    IDENTIFICADOR   shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45

    boolean                        shift and go to state 41

state 22

    (25) valor -> IDENTIFICADOR .

    IGUAL           reduce using rule 25 (valor -> IDENTIFICADOR .)
    MENOR           reduce using rule 25 (valor -> IDENTIFICADOR .)
    MAYOR           reduce using rule 25 (valor -> IDENTIFICADOR .)
    EXCLAMACION     reduce using rule 25 (valor -> IDENTIFICADOR .)
    RPAR            reduce using rule 25 (valor -> IDENTIFICADOR .)
    PUNTOCOMA       reduce using rule 25 (valor -> IDENTIFICADOR .)


state 23

    (50) expresion -> valor .

    IGUAL           reduce using rule 50 (expresion -> valor .)
    MENOR           reduce using rule 50 (expresion -> valor .)
    MAYOR           reduce using rule 50 (expresion -> valor .)
    EXCLAMACION     reduce using rule 50 (expresion -> valor .)
    RPAR            reduce using rule 50 (expresion -> valor .)


state 24

    (19) valor -> ENTERO .

    IGUAL           reduce using rule 19 (valor -> ENTERO .)
    MENOR           reduce using rule 19 (valor -> ENTERO .)
    MAYOR           reduce using rule 19 (valor -> ENTERO .)
    EXCLAMACION     reduce using rule 19 (valor -> ENTERO .)
    RPAR            reduce using rule 19 (valor -> ENTERO .)
    PUNTOCOMA       reduce using rule 19 (valor -> ENTERO .)


state 25

    (20) valor -> FLOTANTE .

    IGUAL           reduce using rule 20 (valor -> FLOTANTE .)
    MENOR           reduce using rule 20 (valor -> FLOTANTE .)
    MAYOR           reduce using rule 20 (valor -> FLOTANTE .)
    EXCLAMACION     reduce using rule 20 (valor -> FLOTANTE .)
    RPAR            reduce using rule 20 (valor -> FLOTANTE .)
    PUNTOCOMA       reduce using rule 20 (valor -> FLOTANTE .)


state 26

    (21) valor -> CHARACTER .

    IGUAL           reduce using rule 21 (valor -> CHARACTER .)
    MENOR           reduce using rule 21 (valor -> CHARACTER .)
    MAYOR           reduce using rule 21 (valor -> CHARACTER .)
    EXCLAMACION     reduce using rule 21 (valor -> CHARACTER .)
    RPAR            reduce using rule 21 (valor -> CHARACTER .)
    PUNTOCOMA       reduce using rule 21 (valor -> CHARACTER .)


state 27

    (22) valor -> STRING .

    IGUAL           reduce using rule 22 (valor -> STRING .)
    MENOR           reduce using rule 22 (valor -> STRING .)
    MAYOR           reduce using rule 22 (valor -> STRING .)
    EXCLAMACION     reduce using rule 22 (valor -> STRING .)
    RPAR            reduce using rule 22 (valor -> STRING .)
    PUNTOCOMA       reduce using rule 22 (valor -> STRING .)


state 28

    (23) valor -> TRUE .

    IGUAL           reduce using rule 23 (valor -> TRUE .)
    MENOR           reduce using rule 23 (valor -> TRUE .)
    MAYOR           reduce using rule 23 (valor -> TRUE .)
    EXCLAMACION     reduce using rule 23 (valor -> TRUE .)
    RPAR            reduce using rule 23 (valor -> TRUE .)
    PUNTOCOMA       reduce using rule 23 (valor -> TRUE .)


state 29

    (24) valor -> FALSE .

    IGUAL           reduce using rule 24 (valor -> FALSE .)
    MENOR           reduce using rule 24 (valor -> FALSE .)
    MAYOR           reduce using rule 24 (valor -> FALSE .)
    EXCLAMACION     reduce using rule 24 (valor -> FALSE .)
    RPAR            reduce using rule 24 (valor -> FALSE .)
    PUNTOCOMA       reduce using rule 24 (valor -> FALSE .)


state 30

    (28) expresionif -> IF LPAR condicionif . RPAR conllaves expresionpos
    (29) expresionif -> IF LPAR condicionif . RPAR sinllaves expresionpos

    RPAR            shift and go to state 46


state 31

    (41) condicionif -> initcondicion .

    RPAR            reduce using rule 41 (condicionif -> initcondicion .)


state 32

    (42) condicionif -> statement .

    RPAR            reduce using rule 42 (condicionif -> statement .)


state 33

    (43) initcondicion -> varblock . statement
    (9) varblock -> varblock . variable
    (44) statement -> . expresion
    (45) statement -> . EXCLAMACION boolean
    (46) statement -> . EXCLAMACION LPAR expresion RPAR
    (47) statement -> . EXCLAMACION IDENTIFICADOR
    (11) variable -> . tipo IDENTIFICADOR IGUAL valor PUNTOCOMA
    (12) variable -> . tipo IDENTIFICADOR PUNTOCOMA
    (27) expresion -> . expresion comparador expresion
    (50) expresion -> . valor
    (13) tipo -> . INT
    (14) tipo -> . FLOAT
    (15) tipo -> . LONG
    (16) tipo -> . AUTO
    (17) tipo -> . CHAR
    (18) tipo -> . VOID
    (19) valor -> . ENTERO
    (20) valor -> . FLOTANTE
    (21) valor -> . CHARACTER
    (22) valor -> . STRING
    (23) valor -> . TRUE
    (24) valor -> . FALSE
    (25) valor -> . IDENTIFICADOR

    EXCLAMACION     shift and go to state 21
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    LONG            shift and go to state 10
    AUTO            shift and go to state 11
    CHAR            shift and go to state 12
    VOID            shift and go to state 13
    ENTERO          shift and go to state 24
    FLOTANTE        shift and go to state 25
    CHARACTER       shift and go to state 26
    STRING          shift and go to state 27
    TRUE            shift and go to state 28
    FALSE           shift and go to state 29
    IDENTIFICADOR   shift and go to state 22

    statement                      shift and go to state 47
    variable                       shift and go to state 48
    expresion                      shift and go to state 20
    tipo                           shift and go to state 5
    valor                          shift and go to state 23

state 34

    (11) variable -> tipo IDENTIFICADOR IGUAL valor . PUNTOCOMA

    PUNTOCOMA       shift and go to state 49


state 35

    (26) while -> WHILE LPAR statement RPAR . LLAVEL bodyblock LLAVER

    LLAVEL          shift and go to state 50


state 36

    (27) expresion -> expresion comparador . expresion
    (27) expresion -> . expresion comparador expresion
    (50) expresion -> . valor
    (19) valor -> . ENTERO
    (20) valor -> . FLOTANTE
    (21) valor -> . CHARACTER
    (22) valor -> . STRING
    (23) valor -> . TRUE
    (24) valor -> . FALSE
    (25) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 24
    FLOTANTE        shift and go to state 25
    CHARACTER       shift and go to state 26
    STRING          shift and go to state 27
    TRUE            shift and go to state 28
    FALSE           shift and go to state 29
    IDENTIFICADOR   shift and go to state 22

    expresion                      shift and go to state 51
    valor                          shift and go to state 23

state 37

    (51) comparador -> IGUAL . IGUAL

    IGUAL           shift and go to state 52


state 38

    (52) comparador -> MENOR .
    (54) comparador -> MENOR . IGUAL

    ENTERO          reduce using rule 52 (comparador -> MENOR .)
    FLOTANTE        reduce using rule 52 (comparador -> MENOR .)
    CHARACTER       reduce using rule 52 (comparador -> MENOR .)
    STRING          reduce using rule 52 (comparador -> MENOR .)
    TRUE            reduce using rule 52 (comparador -> MENOR .)
    FALSE           reduce using rule 52 (comparador -> MENOR .)
    IDENTIFICADOR   reduce using rule 52 (comparador -> MENOR .)
    IGUAL           shift and go to state 53


state 39

    (53) comparador -> MAYOR .
    (55) comparador -> MAYOR . IGUAL

    ENTERO          reduce using rule 53 (comparador -> MAYOR .)
    FLOTANTE        reduce using rule 53 (comparador -> MAYOR .)
    CHARACTER       reduce using rule 53 (comparador -> MAYOR .)
    STRING          reduce using rule 53 (comparador -> MAYOR .)
    TRUE            reduce using rule 53 (comparador -> MAYOR .)
    FALSE           reduce using rule 53 (comparador -> MAYOR .)
    IDENTIFICADOR   reduce using rule 53 (comparador -> MAYOR .)
    IGUAL           shift and go to state 54


state 40

    (56) comparador -> EXCLAMACION . IGUAL

    IGUAL           shift and go to state 55


state 41

    (45) statement -> EXCLAMACION boolean .

    RPAR            reduce using rule 45 (statement -> EXCLAMACION boolean .)


state 42

    (46) statement -> EXCLAMACION LPAR . expresion RPAR
    (27) expresion -> . expresion comparador expresion
    (50) expresion -> . valor
    (19) valor -> . ENTERO
    (20) valor -> . FLOTANTE
    (21) valor -> . CHARACTER
    (22) valor -> . STRING
    (23) valor -> . TRUE
    (24) valor -> . FALSE
    (25) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 24
    FLOTANTE        shift and go to state 25
    CHARACTER       shift and go to state 26
    STRING          shift and go to state 27
    TRUE            shift and go to state 28
    FALSE           shift and go to state 29
    IDENTIFICADOR   shift and go to state 22

    expresion                      shift and go to state 56
    valor                          shift and go to state 23

state 43

    (47) statement -> EXCLAMACION IDENTIFICADOR .

    RPAR            reduce using rule 47 (statement -> EXCLAMACION IDENTIFICADOR .)


state 44

    (48) boolean -> TRUE .

    RPAR            reduce using rule 48 (boolean -> TRUE .)


state 45

    (49) boolean -> FALSE .

    RPAR            reduce using rule 49 (boolean -> FALSE .)


state 46

    (28) expresionif -> IF LPAR condicionif RPAR . conllaves expresionpos
    (29) expresionif -> IF LPAR condicionif RPAR . sinllaves expresionpos
    (40) conllaves -> . LLAVEL bodyblock LLAVER
    (38) sinllaves -> . while
    (39) sinllaves -> . variable
    (26) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (11) variable -> . tipo IDENTIFICADOR IGUAL valor PUNTOCOMA
    (12) variable -> . tipo IDENTIFICADOR PUNTOCOMA
    (13) tipo -> . INT
    (14) tipo -> . FLOAT
    (15) tipo -> . LONG
    (16) tipo -> . AUTO
    (17) tipo -> . CHAR
    (18) tipo -> . VOID

    LLAVEL          shift and go to state 59
    WHILE           shift and go to state 6
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    LONG            shift and go to state 10
    AUTO            shift and go to state 11
    CHAR            shift and go to state 12
    VOID            shift and go to state 13

    conllaves                      shift and go to state 57
    sinllaves                      shift and go to state 58
    while                          shift and go to state 60
    variable                       shift and go to state 61
    tipo                           shift and go to state 5

state 47

    (43) initcondicion -> varblock statement .

    RPAR            reduce using rule 43 (initcondicion -> varblock statement .)


state 48

    (9) varblock -> varblock variable .

    EXCLAMACION     reduce using rule 9 (varblock -> varblock variable .)
    INT             reduce using rule 9 (varblock -> varblock variable .)
    FLOAT           reduce using rule 9 (varblock -> varblock variable .)
    LONG            reduce using rule 9 (varblock -> varblock variable .)
    AUTO            reduce using rule 9 (varblock -> varblock variable .)
    CHAR            reduce using rule 9 (varblock -> varblock variable .)
    VOID            reduce using rule 9 (varblock -> varblock variable .)
    ENTERO          reduce using rule 9 (varblock -> varblock variable .)
    FLOTANTE        reduce using rule 9 (varblock -> varblock variable .)
    CHARACTER       reduce using rule 9 (varblock -> varblock variable .)
    STRING          reduce using rule 9 (varblock -> varblock variable .)
    TRUE            reduce using rule 9 (varblock -> varblock variable .)
    FALSE           reduce using rule 9 (varblock -> varblock variable .)
    IDENTIFICADOR   reduce using rule 9 (varblock -> varblock variable .)


state 49

    (11) variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .

    $end            reduce using rule 11 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    EXCLAMACION     reduce using rule 11 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    INT             reduce using rule 11 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    FLOAT           reduce using rule 11 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    LONG            reduce using rule 11 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    AUTO            reduce using rule 11 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    CHAR            reduce using rule 11 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    VOID            reduce using rule 11 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    ENTERO          reduce using rule 11 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    FLOTANTE        reduce using rule 11 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    CHARACTER       reduce using rule 11 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    STRING          reduce using rule 11 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    TRUE            reduce using rule 11 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    FALSE           reduce using rule 11 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    IDENTIFICADOR   reduce using rule 11 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    ELSE            reduce using rule 11 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    LLAVER          reduce using rule 11 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    WHILE           reduce using rule 11 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)


state 50

    (26) while -> WHILE LPAR statement RPAR LLAVEL . bodyblock LLAVER
    (5) bodyblock -> . bodyblock variable
    (6) bodyblock -> . bodyblock while
    (7) bodyblock -> . expresionif
    (8) bodyblock -> .
    (28) expresionif -> . IF LPAR condicionif RPAR conllaves expresionpos
    (29) expresionif -> . IF LPAR condicionif RPAR sinllaves expresionpos

    LLAVER          reduce using rule 8 (bodyblock -> .)
    WHILE           reduce using rule 8 (bodyblock -> .)
    INT             reduce using rule 8 (bodyblock -> .)
    FLOAT           reduce using rule 8 (bodyblock -> .)
    LONG            reduce using rule 8 (bodyblock -> .)
    AUTO            reduce using rule 8 (bodyblock -> .)
    CHAR            reduce using rule 8 (bodyblock -> .)
    VOID            reduce using rule 8 (bodyblock -> .)
    IF              shift and go to state 7

    bodyblock                      shift and go to state 62
    expresionif                    shift and go to state 63

state 51

    (27) expresion -> expresion comparador expresion .
    (27) expresion -> expresion . comparador expresion
    (51) comparador -> . IGUAL IGUAL
    (52) comparador -> . MENOR
    (53) comparador -> . MAYOR
    (54) comparador -> . MENOR IGUAL
    (55) comparador -> . MAYOR IGUAL
    (56) comparador -> . EXCLAMACION IGUAL

  ! shift/reduce conflict for IGUAL resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for EXCLAMACION resolved as shift
    RPAR            reduce using rule 27 (expresion -> expresion comparador expresion .)
    IGUAL           shift and go to state 37
    MENOR           shift and go to state 38
    MAYOR           shift and go to state 39
    EXCLAMACION     shift and go to state 40

  ! IGUAL           [ reduce using rule 27 (expresion -> expresion comparador expresion .) ]
  ! MENOR           [ reduce using rule 27 (expresion -> expresion comparador expresion .) ]
  ! MAYOR           [ reduce using rule 27 (expresion -> expresion comparador expresion .) ]
  ! EXCLAMACION     [ reduce using rule 27 (expresion -> expresion comparador expresion .) ]

    comparador                     shift and go to state 36

state 52

    (51) comparador -> IGUAL IGUAL .

    ENTERO          reduce using rule 51 (comparador -> IGUAL IGUAL .)
    FLOTANTE        reduce using rule 51 (comparador -> IGUAL IGUAL .)
    CHARACTER       reduce using rule 51 (comparador -> IGUAL IGUAL .)
    STRING          reduce using rule 51 (comparador -> IGUAL IGUAL .)
    TRUE            reduce using rule 51 (comparador -> IGUAL IGUAL .)
    FALSE           reduce using rule 51 (comparador -> IGUAL IGUAL .)
    IDENTIFICADOR   reduce using rule 51 (comparador -> IGUAL IGUAL .)


state 53

    (54) comparador -> MENOR IGUAL .

    ENTERO          reduce using rule 54 (comparador -> MENOR IGUAL .)
    FLOTANTE        reduce using rule 54 (comparador -> MENOR IGUAL .)
    CHARACTER       reduce using rule 54 (comparador -> MENOR IGUAL .)
    STRING          reduce using rule 54 (comparador -> MENOR IGUAL .)
    TRUE            reduce using rule 54 (comparador -> MENOR IGUAL .)
    FALSE           reduce using rule 54 (comparador -> MENOR IGUAL .)
    IDENTIFICADOR   reduce using rule 54 (comparador -> MENOR IGUAL .)


state 54

    (55) comparador -> MAYOR IGUAL .

    ENTERO          reduce using rule 55 (comparador -> MAYOR IGUAL .)
    FLOTANTE        reduce using rule 55 (comparador -> MAYOR IGUAL .)
    CHARACTER       reduce using rule 55 (comparador -> MAYOR IGUAL .)
    STRING          reduce using rule 55 (comparador -> MAYOR IGUAL .)
    TRUE            reduce using rule 55 (comparador -> MAYOR IGUAL .)
    FALSE           reduce using rule 55 (comparador -> MAYOR IGUAL .)
    IDENTIFICADOR   reduce using rule 55 (comparador -> MAYOR IGUAL .)


state 55

    (56) comparador -> EXCLAMACION IGUAL .

    ENTERO          reduce using rule 56 (comparador -> EXCLAMACION IGUAL .)
    FLOTANTE        reduce using rule 56 (comparador -> EXCLAMACION IGUAL .)
    CHARACTER       reduce using rule 56 (comparador -> EXCLAMACION IGUAL .)
    STRING          reduce using rule 56 (comparador -> EXCLAMACION IGUAL .)
    TRUE            reduce using rule 56 (comparador -> EXCLAMACION IGUAL .)
    FALSE           reduce using rule 56 (comparador -> EXCLAMACION IGUAL .)
    IDENTIFICADOR   reduce using rule 56 (comparador -> EXCLAMACION IGUAL .)


state 56

    (46) statement -> EXCLAMACION LPAR expresion . RPAR
    (27) expresion -> expresion . comparador expresion
    (51) comparador -> . IGUAL IGUAL
    (52) comparador -> . MENOR
    (53) comparador -> . MAYOR
    (54) comparador -> . MENOR IGUAL
    (55) comparador -> . MAYOR IGUAL
    (56) comparador -> . EXCLAMACION IGUAL

    RPAR            shift and go to state 64
    IGUAL           shift and go to state 37
    MENOR           shift and go to state 38
    MAYOR           shift and go to state 39
    EXCLAMACION     shift and go to state 40

    comparador                     shift and go to state 36

state 57

    (28) expresionif -> IF LPAR condicionif RPAR conllaves . expresionpos
    (30) expresionpos -> . else
    (31) expresionpos -> . elseif
    (32) expresionpos -> .
    (36) else -> . ELSE conllaves
    (37) else -> . ELSE sinllaves
    (33) elseif -> . ELSE IF LPAR condicionif RPAR conllaves else
    (34) elseif -> . ELSE IF LPAR condicionif RPAR sinllaves else
    (35) elseif -> .

  ! reduce/reduce conflict for $end resolved using rule 32 (expresionpos -> .)
  ! reduce/reduce conflict for LLAVER resolved using rule 32 (expresionpos -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 32 (expresionpos -> .)
  ! reduce/reduce conflict for INT resolved using rule 32 (expresionpos -> .)
  ! reduce/reduce conflict for FLOAT resolved using rule 32 (expresionpos -> .)
  ! reduce/reduce conflict for LONG resolved using rule 32 (expresionpos -> .)
  ! reduce/reduce conflict for AUTO resolved using rule 32 (expresionpos -> .)
  ! reduce/reduce conflict for CHAR resolved using rule 32 (expresionpos -> .)
  ! reduce/reduce conflict for VOID resolved using rule 32 (expresionpos -> .)
    $end            reduce using rule 32 (expresionpos -> .)
    LLAVER          reduce using rule 32 (expresionpos -> .)
    WHILE           reduce using rule 32 (expresionpos -> .)
    INT             reduce using rule 32 (expresionpos -> .)
    FLOAT           reduce using rule 32 (expresionpos -> .)
    LONG            reduce using rule 32 (expresionpos -> .)
    AUTO            reduce using rule 32 (expresionpos -> .)
    CHAR            reduce using rule 32 (expresionpos -> .)
    VOID            reduce using rule 32 (expresionpos -> .)
    ELSE            shift and go to state 68

  ! $end            [ reduce using rule 35 (elseif -> .) ]
  ! LLAVER          [ reduce using rule 35 (elseif -> .) ]
  ! WHILE           [ reduce using rule 35 (elseif -> .) ]
  ! INT             [ reduce using rule 35 (elseif -> .) ]
  ! FLOAT           [ reduce using rule 35 (elseif -> .) ]
  ! LONG            [ reduce using rule 35 (elseif -> .) ]
  ! AUTO            [ reduce using rule 35 (elseif -> .) ]
  ! CHAR            [ reduce using rule 35 (elseif -> .) ]
  ! VOID            [ reduce using rule 35 (elseif -> .) ]

    expresionpos                   shift and go to state 65
    else                           shift and go to state 66
    elseif                         shift and go to state 67

state 58

    (29) expresionif -> IF LPAR condicionif RPAR sinllaves . expresionpos
    (30) expresionpos -> . else
    (31) expresionpos -> . elseif
    (32) expresionpos -> .
    (36) else -> . ELSE conllaves
    (37) else -> . ELSE sinllaves
    (33) elseif -> . ELSE IF LPAR condicionif RPAR conllaves else
    (34) elseif -> . ELSE IF LPAR condicionif RPAR sinllaves else
    (35) elseif -> .

  ! reduce/reduce conflict for $end resolved using rule 32 (expresionpos -> .)
  ! reduce/reduce conflict for LLAVER resolved using rule 32 (expresionpos -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 32 (expresionpos -> .)
  ! reduce/reduce conflict for INT resolved using rule 32 (expresionpos -> .)
  ! reduce/reduce conflict for FLOAT resolved using rule 32 (expresionpos -> .)
  ! reduce/reduce conflict for LONG resolved using rule 32 (expresionpos -> .)
  ! reduce/reduce conflict for AUTO resolved using rule 32 (expresionpos -> .)
  ! reduce/reduce conflict for CHAR resolved using rule 32 (expresionpos -> .)
  ! reduce/reduce conflict for VOID resolved using rule 32 (expresionpos -> .)
    $end            reduce using rule 32 (expresionpos -> .)
    LLAVER          reduce using rule 32 (expresionpos -> .)
    WHILE           reduce using rule 32 (expresionpos -> .)
    INT             reduce using rule 32 (expresionpos -> .)
    FLOAT           reduce using rule 32 (expresionpos -> .)
    LONG            reduce using rule 32 (expresionpos -> .)
    AUTO            reduce using rule 32 (expresionpos -> .)
    CHAR            reduce using rule 32 (expresionpos -> .)
    VOID            reduce using rule 32 (expresionpos -> .)
    ELSE            shift and go to state 68

  ! $end            [ reduce using rule 35 (elseif -> .) ]
  ! LLAVER          [ reduce using rule 35 (elseif -> .) ]
  ! WHILE           [ reduce using rule 35 (elseif -> .) ]
  ! INT             [ reduce using rule 35 (elseif -> .) ]
  ! FLOAT           [ reduce using rule 35 (elseif -> .) ]
  ! LONG            [ reduce using rule 35 (elseif -> .) ]
  ! AUTO            [ reduce using rule 35 (elseif -> .) ]
  ! CHAR            [ reduce using rule 35 (elseif -> .) ]
  ! VOID            [ reduce using rule 35 (elseif -> .) ]

    expresionpos                   shift and go to state 69
    else                           shift and go to state 66
    elseif                         shift and go to state 67

state 59

    (40) conllaves -> LLAVEL . bodyblock LLAVER
    (5) bodyblock -> . bodyblock variable
    (6) bodyblock -> . bodyblock while
    (7) bodyblock -> . expresionif
    (8) bodyblock -> .
    (28) expresionif -> . IF LPAR condicionif RPAR conllaves expresionpos
    (29) expresionif -> . IF LPAR condicionif RPAR sinllaves expresionpos

    LLAVER          reduce using rule 8 (bodyblock -> .)
    WHILE           reduce using rule 8 (bodyblock -> .)
    INT             reduce using rule 8 (bodyblock -> .)
    FLOAT           reduce using rule 8 (bodyblock -> .)
    LONG            reduce using rule 8 (bodyblock -> .)
    AUTO            reduce using rule 8 (bodyblock -> .)
    CHAR            reduce using rule 8 (bodyblock -> .)
    VOID            reduce using rule 8 (bodyblock -> .)
    IF              shift and go to state 7

    bodyblock                      shift and go to state 70
    expresionif                    shift and go to state 63

state 60

    (38) sinllaves -> while .

    ELSE            reduce using rule 38 (sinllaves -> while .)
    $end            reduce using rule 38 (sinllaves -> while .)
    LLAVER          reduce using rule 38 (sinllaves -> while .)
    WHILE           reduce using rule 38 (sinllaves -> while .)
    INT             reduce using rule 38 (sinllaves -> while .)
    FLOAT           reduce using rule 38 (sinllaves -> while .)
    LONG            reduce using rule 38 (sinllaves -> while .)
    AUTO            reduce using rule 38 (sinllaves -> while .)
    CHAR            reduce using rule 38 (sinllaves -> while .)
    VOID            reduce using rule 38 (sinllaves -> while .)


state 61

    (39) sinllaves -> variable .

    ELSE            reduce using rule 39 (sinllaves -> variable .)
    $end            reduce using rule 39 (sinllaves -> variable .)
    LLAVER          reduce using rule 39 (sinllaves -> variable .)
    WHILE           reduce using rule 39 (sinllaves -> variable .)
    INT             reduce using rule 39 (sinllaves -> variable .)
    FLOAT           reduce using rule 39 (sinllaves -> variable .)
    LONG            reduce using rule 39 (sinllaves -> variable .)
    AUTO            reduce using rule 39 (sinllaves -> variable .)
    CHAR            reduce using rule 39 (sinllaves -> variable .)
    VOID            reduce using rule 39 (sinllaves -> variable .)


state 62

    (26) while -> WHILE LPAR statement RPAR LLAVEL bodyblock . LLAVER
    (5) bodyblock -> bodyblock . variable
    (6) bodyblock -> bodyblock . while
    (11) variable -> . tipo IDENTIFICADOR IGUAL valor PUNTOCOMA
    (12) variable -> . tipo IDENTIFICADOR PUNTOCOMA
    (26) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (13) tipo -> . INT
    (14) tipo -> . FLOAT
    (15) tipo -> . LONG
    (16) tipo -> . AUTO
    (17) tipo -> . CHAR
    (18) tipo -> . VOID

    LLAVER          shift and go to state 71
    WHILE           shift and go to state 6
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    LONG            shift and go to state 10
    AUTO            shift and go to state 11
    CHAR            shift and go to state 12
    VOID            shift and go to state 13

    variable                       shift and go to state 72
    while                          shift and go to state 73
    tipo                           shift and go to state 5

state 63

    (7) bodyblock -> expresionif .

    LLAVER          reduce using rule 7 (bodyblock -> expresionif .)
    WHILE           reduce using rule 7 (bodyblock -> expresionif .)
    INT             reduce using rule 7 (bodyblock -> expresionif .)
    FLOAT           reduce using rule 7 (bodyblock -> expresionif .)
    LONG            reduce using rule 7 (bodyblock -> expresionif .)
    AUTO            reduce using rule 7 (bodyblock -> expresionif .)
    CHAR            reduce using rule 7 (bodyblock -> expresionif .)
    VOID            reduce using rule 7 (bodyblock -> expresionif .)


state 64

    (46) statement -> EXCLAMACION LPAR expresion RPAR .

    RPAR            reduce using rule 46 (statement -> EXCLAMACION LPAR expresion RPAR .)


state 65

    (28) expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .

    $end            reduce using rule 28 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    LLAVER          reduce using rule 28 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    WHILE           reduce using rule 28 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    INT             reduce using rule 28 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    FLOAT           reduce using rule 28 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    LONG            reduce using rule 28 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    AUTO            reduce using rule 28 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    CHAR            reduce using rule 28 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    VOID            reduce using rule 28 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)


state 66

    (30) expresionpos -> else .

    $end            reduce using rule 30 (expresionpos -> else .)
    LLAVER          reduce using rule 30 (expresionpos -> else .)
    WHILE           reduce using rule 30 (expresionpos -> else .)
    INT             reduce using rule 30 (expresionpos -> else .)
    FLOAT           reduce using rule 30 (expresionpos -> else .)
    LONG            reduce using rule 30 (expresionpos -> else .)
    AUTO            reduce using rule 30 (expresionpos -> else .)
    CHAR            reduce using rule 30 (expresionpos -> else .)
    VOID            reduce using rule 30 (expresionpos -> else .)


state 67

    (31) expresionpos -> elseif .

    $end            reduce using rule 31 (expresionpos -> elseif .)
    LLAVER          reduce using rule 31 (expresionpos -> elseif .)
    WHILE           reduce using rule 31 (expresionpos -> elseif .)
    INT             reduce using rule 31 (expresionpos -> elseif .)
    FLOAT           reduce using rule 31 (expresionpos -> elseif .)
    LONG            reduce using rule 31 (expresionpos -> elseif .)
    AUTO            reduce using rule 31 (expresionpos -> elseif .)
    CHAR            reduce using rule 31 (expresionpos -> elseif .)
    VOID            reduce using rule 31 (expresionpos -> elseif .)


state 68

    (36) else -> ELSE . conllaves
    (37) else -> ELSE . sinllaves
    (33) elseif -> ELSE . IF LPAR condicionif RPAR conllaves else
    (34) elseif -> ELSE . IF LPAR condicionif RPAR sinllaves else
    (40) conllaves -> . LLAVEL bodyblock LLAVER
    (38) sinllaves -> . while
    (39) sinllaves -> . variable
    (26) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (11) variable -> . tipo IDENTIFICADOR IGUAL valor PUNTOCOMA
    (12) variable -> . tipo IDENTIFICADOR PUNTOCOMA
    (13) tipo -> . INT
    (14) tipo -> . FLOAT
    (15) tipo -> . LONG
    (16) tipo -> . AUTO
    (17) tipo -> . CHAR
    (18) tipo -> . VOID

    IF              shift and go to state 76
    LLAVEL          shift and go to state 59
    WHILE           shift and go to state 6
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    LONG            shift and go to state 10
    AUTO            shift and go to state 11
    CHAR            shift and go to state 12
    VOID            shift and go to state 13

    conllaves                      shift and go to state 74
    sinllaves                      shift and go to state 75
    while                          shift and go to state 60
    variable                       shift and go to state 61
    tipo                           shift and go to state 5

state 69

    (29) expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .

    $end            reduce using rule 29 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    LLAVER          reduce using rule 29 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    WHILE           reduce using rule 29 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    INT             reduce using rule 29 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    FLOAT           reduce using rule 29 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    LONG            reduce using rule 29 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    AUTO            reduce using rule 29 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    CHAR            reduce using rule 29 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    VOID            reduce using rule 29 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)


state 70

    (40) conllaves -> LLAVEL bodyblock . LLAVER
    (5) bodyblock -> bodyblock . variable
    (6) bodyblock -> bodyblock . while
    (11) variable -> . tipo IDENTIFICADOR IGUAL valor PUNTOCOMA
    (12) variable -> . tipo IDENTIFICADOR PUNTOCOMA
    (26) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (13) tipo -> . INT
    (14) tipo -> . FLOAT
    (15) tipo -> . LONG
    (16) tipo -> . AUTO
    (17) tipo -> . CHAR
    (18) tipo -> . VOID

    LLAVER          shift and go to state 77
    WHILE           shift and go to state 6
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    LONG            shift and go to state 10
    AUTO            shift and go to state 11
    CHAR            shift and go to state 12
    VOID            shift and go to state 13

    variable                       shift and go to state 72
    while                          shift and go to state 73
    tipo                           shift and go to state 5

state 71

    (26) while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .

    $end            reduce using rule 26 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    ELSE            reduce using rule 26 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    LLAVER          reduce using rule 26 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    WHILE           reduce using rule 26 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    INT             reduce using rule 26 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    FLOAT           reduce using rule 26 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    LONG            reduce using rule 26 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    AUTO            reduce using rule 26 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    CHAR            reduce using rule 26 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    VOID            reduce using rule 26 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)


state 72

    (5) bodyblock -> bodyblock variable .

    LLAVER          reduce using rule 5 (bodyblock -> bodyblock variable .)
    WHILE           reduce using rule 5 (bodyblock -> bodyblock variable .)
    INT             reduce using rule 5 (bodyblock -> bodyblock variable .)
    FLOAT           reduce using rule 5 (bodyblock -> bodyblock variable .)
    LONG            reduce using rule 5 (bodyblock -> bodyblock variable .)
    AUTO            reduce using rule 5 (bodyblock -> bodyblock variable .)
    CHAR            reduce using rule 5 (bodyblock -> bodyblock variable .)
    VOID            reduce using rule 5 (bodyblock -> bodyblock variable .)


state 73

    (6) bodyblock -> bodyblock while .

    LLAVER          reduce using rule 6 (bodyblock -> bodyblock while .)
    WHILE           reduce using rule 6 (bodyblock -> bodyblock while .)
    INT             reduce using rule 6 (bodyblock -> bodyblock while .)
    FLOAT           reduce using rule 6 (bodyblock -> bodyblock while .)
    LONG            reduce using rule 6 (bodyblock -> bodyblock while .)
    AUTO            reduce using rule 6 (bodyblock -> bodyblock while .)
    CHAR            reduce using rule 6 (bodyblock -> bodyblock while .)
    VOID            reduce using rule 6 (bodyblock -> bodyblock while .)


state 74

    (36) else -> ELSE conllaves .

    $end            reduce using rule 36 (else -> ELSE conllaves .)
    LLAVER          reduce using rule 36 (else -> ELSE conllaves .)
    WHILE           reduce using rule 36 (else -> ELSE conllaves .)
    INT             reduce using rule 36 (else -> ELSE conllaves .)
    FLOAT           reduce using rule 36 (else -> ELSE conllaves .)
    LONG            reduce using rule 36 (else -> ELSE conllaves .)
    AUTO            reduce using rule 36 (else -> ELSE conllaves .)
    CHAR            reduce using rule 36 (else -> ELSE conllaves .)
    VOID            reduce using rule 36 (else -> ELSE conllaves .)


state 75

    (37) else -> ELSE sinllaves .

    $end            reduce using rule 37 (else -> ELSE sinllaves .)
    LLAVER          reduce using rule 37 (else -> ELSE sinllaves .)
    WHILE           reduce using rule 37 (else -> ELSE sinllaves .)
    INT             reduce using rule 37 (else -> ELSE sinllaves .)
    FLOAT           reduce using rule 37 (else -> ELSE sinllaves .)
    LONG            reduce using rule 37 (else -> ELSE sinllaves .)
    AUTO            reduce using rule 37 (else -> ELSE sinllaves .)
    CHAR            reduce using rule 37 (else -> ELSE sinllaves .)
    VOID            reduce using rule 37 (else -> ELSE sinllaves .)


state 76

    (33) elseif -> ELSE IF . LPAR condicionif RPAR conllaves else
    (34) elseif -> ELSE IF . LPAR condicionif RPAR sinllaves else

    LPAR            shift and go to state 78


state 77

    (40) conllaves -> LLAVEL bodyblock LLAVER .

    ELSE            reduce using rule 40 (conllaves -> LLAVEL bodyblock LLAVER .)
    $end            reduce using rule 40 (conllaves -> LLAVEL bodyblock LLAVER .)
    LLAVER          reduce using rule 40 (conllaves -> LLAVEL bodyblock LLAVER .)
    WHILE           reduce using rule 40 (conllaves -> LLAVEL bodyblock LLAVER .)
    INT             reduce using rule 40 (conllaves -> LLAVEL bodyblock LLAVER .)
    FLOAT           reduce using rule 40 (conllaves -> LLAVEL bodyblock LLAVER .)
    LONG            reduce using rule 40 (conllaves -> LLAVEL bodyblock LLAVER .)
    AUTO            reduce using rule 40 (conllaves -> LLAVEL bodyblock LLAVER .)
    CHAR            reduce using rule 40 (conllaves -> LLAVEL bodyblock LLAVER .)
    VOID            reduce using rule 40 (conllaves -> LLAVEL bodyblock LLAVER .)


state 78

    (33) elseif -> ELSE IF LPAR . condicionif RPAR conllaves else
    (34) elseif -> ELSE IF LPAR . condicionif RPAR sinllaves else
    (41) condicionif -> . initcondicion
    (42) condicionif -> . statement
    (43) initcondicion -> . varblock statement
    (44) statement -> . expresion
    (45) statement -> . EXCLAMACION boolean
    (46) statement -> . EXCLAMACION LPAR expresion RPAR
    (47) statement -> . EXCLAMACION IDENTIFICADOR
    (9) varblock -> . varblock variable
    (10) varblock -> .
    (27) expresion -> . expresion comparador expresion
    (50) expresion -> . valor
    (19) valor -> . ENTERO
    (20) valor -> . FLOTANTE
    (21) valor -> . CHARACTER
    (22) valor -> . STRING
    (23) valor -> . TRUE
    (24) valor -> . FALSE
    (25) valor -> . IDENTIFICADOR

  ! shift/reduce conflict for EXCLAMACION resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for FLOTANTE resolved as shift
  ! shift/reduce conflict for CHARACTER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for IDENTIFICADOR resolved as shift
    EXCLAMACION     shift and go to state 21
    INT             reduce using rule 10 (varblock -> .)
    FLOAT           reduce using rule 10 (varblock -> .)
    LONG            reduce using rule 10 (varblock -> .)
    AUTO            reduce using rule 10 (varblock -> .)
    CHAR            reduce using rule 10 (varblock -> .)
    VOID            reduce using rule 10 (varblock -> .)
    ENTERO          shift and go to state 24
    FLOTANTE        shift and go to state 25
    CHARACTER       shift and go to state 26
    STRING          shift and go to state 27
    TRUE            shift and go to state 28
    FALSE           shift and go to state 29
    IDENTIFICADOR   shift and go to state 22

  ! EXCLAMACION     [ reduce using rule 10 (varblock -> .) ]
  ! ENTERO          [ reduce using rule 10 (varblock -> .) ]
  ! FLOTANTE        [ reduce using rule 10 (varblock -> .) ]
  ! CHARACTER       [ reduce using rule 10 (varblock -> .) ]
  ! STRING          [ reduce using rule 10 (varblock -> .) ]
  ! TRUE            [ reduce using rule 10 (varblock -> .) ]
  ! FALSE           [ reduce using rule 10 (varblock -> .) ]
  ! IDENTIFICADOR   [ reduce using rule 10 (varblock -> .) ]

    condicionif                    shift and go to state 79
    initcondicion                  shift and go to state 31
    statement                      shift and go to state 32
    varblock                       shift and go to state 33
    expresion                      shift and go to state 20
    valor                          shift and go to state 23

state 79

    (33) elseif -> ELSE IF LPAR condicionif . RPAR conllaves else
    (34) elseif -> ELSE IF LPAR condicionif . RPAR sinllaves else

    RPAR            shift and go to state 80


state 80

    (33) elseif -> ELSE IF LPAR condicionif RPAR . conllaves else
    (34) elseif -> ELSE IF LPAR condicionif RPAR . sinllaves else
    (40) conllaves -> . LLAVEL bodyblock LLAVER
    (38) sinllaves -> . while
    (39) sinllaves -> . variable
    (26) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (11) variable -> . tipo IDENTIFICADOR IGUAL valor PUNTOCOMA
    (12) variable -> . tipo IDENTIFICADOR PUNTOCOMA
    (13) tipo -> . INT
    (14) tipo -> . FLOAT
    (15) tipo -> . LONG
    (16) tipo -> . AUTO
    (17) tipo -> . CHAR
    (18) tipo -> . VOID

    LLAVEL          shift and go to state 59
    WHILE           shift and go to state 6
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    LONG            shift and go to state 10
    AUTO            shift and go to state 11
    CHAR            shift and go to state 12
    VOID            shift and go to state 13

    conllaves                      shift and go to state 81
    sinllaves                      shift and go to state 82
    while                          shift and go to state 60
    variable                       shift and go to state 61
    tipo                           shift and go to state 5

state 81

    (33) elseif -> ELSE IF LPAR condicionif RPAR conllaves . else
    (36) else -> . ELSE conllaves
    (37) else -> . ELSE sinllaves

    ELSE            shift and go to state 83

    else                           shift and go to state 84

state 82

    (34) elseif -> ELSE IF LPAR condicionif RPAR sinllaves . else
    (36) else -> . ELSE conllaves
    (37) else -> . ELSE sinllaves

    ELSE            shift and go to state 83

    else                           shift and go to state 85

state 83

    (36) else -> ELSE . conllaves
    (37) else -> ELSE . sinllaves
    (40) conllaves -> . LLAVEL bodyblock LLAVER
    (38) sinllaves -> . while
    (39) sinllaves -> . variable
    (26) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (11) variable -> . tipo IDENTIFICADOR IGUAL valor PUNTOCOMA
    (12) variable -> . tipo IDENTIFICADOR PUNTOCOMA
    (13) tipo -> . INT
    (14) tipo -> . FLOAT
    (15) tipo -> . LONG
    (16) tipo -> . AUTO
    (17) tipo -> . CHAR
    (18) tipo -> . VOID

    LLAVEL          shift and go to state 59
    WHILE           shift and go to state 6
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    LONG            shift and go to state 10
    AUTO            shift and go to state 11
    CHAR            shift and go to state 12
    VOID            shift and go to state 13

    conllaves                      shift and go to state 74
    sinllaves                      shift and go to state 75
    while                          shift and go to state 60
    variable                       shift and go to state 61
    tipo                           shift and go to state 5

state 84

    (33) elseif -> ELSE IF LPAR condicionif RPAR conllaves else .

    $end            reduce using rule 33 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    LLAVER          reduce using rule 33 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    WHILE           reduce using rule 33 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    INT             reduce using rule 33 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    FLOAT           reduce using rule 33 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    LONG            reduce using rule 33 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    AUTO            reduce using rule 33 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    CHAR            reduce using rule 33 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    VOID            reduce using rule 33 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)


state 85

    (34) elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .

    $end            reduce using rule 34 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    LLAVER          reduce using rule 34 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    WHILE           reduce using rule 34 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    INT             reduce using rule 34 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    FLOAT           reduce using rule 34 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    LONG            reduce using rule 34 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    AUTO            reduce using rule 34 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    CHAR            reduce using rule 34 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    VOID            reduce using rule 34 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for EXCLAMACION in state 16 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 16 resolved as shift
WARNING: shift/reduce conflict for FLOTANTE in state 16 resolved as shift
WARNING: shift/reduce conflict for CHARACTER in state 16 resolved as shift
WARNING: shift/reduce conflict for STRING in state 16 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 16 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 16 resolved as shift
WARNING: shift/reduce conflict for IDENTIFICADOR in state 16 resolved as shift
WARNING: shift/reduce conflict for IGUAL in state 51 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 51 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 51 resolved as shift
WARNING: shift/reduce conflict for EXCLAMACION in state 51 resolved as shift
WARNING: shift/reduce conflict for EXCLAMACION in state 78 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 78 resolved as shift
WARNING: shift/reduce conflict for FLOTANTE in state 78 resolved as shift
WARNING: shift/reduce conflict for CHARACTER in state 78 resolved as shift
WARNING: shift/reduce conflict for STRING in state 78 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 78 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 78 resolved as shift
WARNING: shift/reduce conflict for IDENTIFICADOR in state 78 resolved as shift
WARNING: reduce/reduce conflict in state 57 resolved using rule (expresionpos -> <empty>)
WARNING: rejected rule (elseif -> <empty>) in state 57
WARNING: reduce/reduce conflict in state 58 resolved using rule (expresionpos -> <empty>)
WARNING: rejected rule (elseif -> <empty>) in state 58
WARNING: Rule (elseif -> <empty>) is never reduced
