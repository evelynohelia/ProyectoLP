Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    ASTERISCO
    BACKSLASH
    BOOL
    CIRCUNFLEJO
    COMADOBLE
    COMASIMPLE
    COMENTARIO
    COMMA
    CORCHETEL
    CORCHETER
    DOBLEPUNTO
    FOR
    INTERROGACION
    MAS
    MENOS
    NEW
    NULLPOINTER
    NUMERAL
    PIPE
    PORCENTAJE
    PRIVATE
    PROTECTED
    PUBLIC
    PUNTERO
    PUNTO
    RETURN
    SLASH
    STATIC
    STRUCT
    THEN
    VIRGUILA

Grammar

Rule 0     S' -> body
Rule 1     body -> variable
Rule 2     body -> while
Rule 3     body -> expresionif
Rule 4     body -> claseimplementacion
Rule 5     body -> <empty>
Rule 6     bodyblock -> bodyblock variable
Rule 7     bodyblock -> bodyblock while
Rule 8     bodyblock -> expresionif
Rule 9     bodyblock -> <empty>
Rule 10    varblock -> varblock variable
Rule 11    varblock -> <empty>
Rule 12    variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA
Rule 13    variable -> tipo IDENTIFICADOR PUNTOCOMA
Rule 14    tipo -> INT
Rule 15    tipo -> FLOAT
Rule 16    tipo -> LONG
Rule 17    tipo -> AUTO
Rule 18    tipo -> CHAR
Rule 19    tipo -> VOID
Rule 20    valor -> ENTERO
Rule 21    valor -> FLOTANTE
Rule 22    valor -> CHARACTER
Rule 23    valor -> STRING
Rule 24    valor -> TRUE
Rule 25    valor -> FALSE
Rule 26    valor -> IDENTIFICADOR
Rule 27    while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
Rule 28    expresion -> expresion comparador expresion
Rule 29    expresionif -> IF LPAR condicionif RPAR conllaves expresionpos
Rule 30    expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos
Rule 31    expresionpos -> else
Rule 32    expresionpos -> elseif
Rule 33    expresionpos -> <empty>
Rule 34    elseif -> ELSE IF LPAR condicionif RPAR conllaves else
Rule 35    elseif -> ELSE IF LPAR condicionif RPAR sinllaves else
Rule 36    elseif -> <empty>
Rule 37    else -> ELSE conllaves
Rule 38    else -> ELSE sinllaves
Rule 39    sinllaves -> while
Rule 40    sinllaves -> variable
Rule 41    conllaves -> LLAVEL bodyblock LLAVER
Rule 42    condicionif -> initcondicion
Rule 43    condicionif -> statement
Rule 44    initcondicion -> varblock statement
Rule 45    statement -> expresion
Rule 46    statement -> EXCLAMACION boolean
Rule 47    statement -> EXCLAMACION LPAR expresion RPAR
Rule 48    statement -> EXCLAMACION IDENTIFICADOR
Rule 49    boolean -> TRUE
Rule 50    boolean -> FALSE
Rule 51    expresion -> valor
Rule 52    comparador -> IGUAL IGUAL
Rule 53    comparador -> MENOR
Rule 54    comparador -> MAYOR
Rule 55    comparador -> MENOR IGUAL
Rule 56    comparador -> MAYOR IGUAL
Rule 57    comparador -> EXCLAMACION IGUAL
Rule 58    claseimplementacion -> CLASS IDENTIFICADOR LLAVEL bloqueclase LLAVER
Rule 59    bloqueclase -> definicion definicion
Rule 60    bloqueclase -> <empty>
Rule 61    definicion -> tipo IDENTIFICADOR PUNTOCOMA
Rule 62    definicion -> <empty>

Terminals, with rules where they appear

AND                  : 
ASTERISCO            : 
AUTO                 : 17
BACKSLASH            : 
BOOL                 : 
CHAR                 : 18
CHARACTER            : 22
CIRCUNFLEJO          : 
CLASS                : 58
COMADOBLE            : 
COMASIMPLE           : 
COMENTARIO           : 
COMMA                : 
CORCHETEL            : 
CORCHETER            : 
DOBLEPUNTO           : 
ELSE                 : 34 35 37 38
ENTERO               : 20
EXCLAMACION          : 46 47 48 57
FALSE                : 25 50
FLOAT                : 15
FLOTANTE             : 21
FOR                  : 
IDENTIFICADOR        : 12 13 26 48 58 61
IF                   : 29 30 34 35
IGUAL                : 12 52 52 55 56 57
INT                  : 14
INTERROGACION        : 
LLAVEL               : 27 41 58
LLAVER               : 27 41 58
LONG                 : 16
LPAR                 : 27 29 30 34 35 47
MAS                  : 
MAYOR                : 54 56
MENOR                : 53 55
MENOS                : 
NEW                  : 
NULLPOINTER          : 
NUMERAL              : 
PIPE                 : 
PORCENTAJE           : 
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
PUNTERO              : 
PUNTO                : 
PUNTOCOMA            : 12 13 61
RETURN               : 
RPAR                 : 27 29 30 34 35 47
SLASH                : 
STATIC               : 
STRING               : 23
STRUCT               : 
THEN                 : 
TRUE                 : 24 49
VIRGUILA             : 
VOID                 : 19
WHILE                : 27
error                : 

Nonterminals, with rules where they appear

bloqueclase          : 58
body                 : 0
bodyblock            : 6 7 27 41
boolean              : 46
claseimplementacion  : 4
comparador           : 28
condicionif          : 29 30 34 35
conllaves            : 29 34 37
definicion           : 59 59
else                 : 31 34 35
elseif               : 32
expresion            : 28 28 45 47
expresionif          : 3 8
expresionpos         : 29 30
initcondicion        : 42
sinllaves            : 30 35 38
statement            : 27 43 44
tipo                 : 12 13 61
valor                : 12 51
varblock             : 10 44
variable             : 1 6 10 40
while                : 2 7 39

Parsing method: LALR

state 0

    (0) S' -> . body
    (1) body -> . variable
    (2) body -> . while
    (3) body -> . expresionif
    (4) body -> . claseimplementacion
    (5) body -> .
    (12) variable -> . tipo IDENTIFICADOR IGUAL valor PUNTOCOMA
    (13) variable -> . tipo IDENTIFICADOR PUNTOCOMA
    (27) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (29) expresionif -> . IF LPAR condicionif RPAR conllaves expresionpos
    (30) expresionif -> . IF LPAR condicionif RPAR sinllaves expresionpos
    (58) claseimplementacion -> . CLASS IDENTIFICADOR LLAVEL bloqueclase LLAVER
    (14) tipo -> . INT
    (15) tipo -> . FLOAT
    (16) tipo -> . LONG
    (17) tipo -> . AUTO
    (18) tipo -> . CHAR
    (19) tipo -> . VOID

    $end            reduce using rule 5 (body -> .)
    WHILE           shift and go to state 7
    IF              shift and go to state 8
    CLASS           shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    LONG            shift and go to state 12
    AUTO            shift and go to state 13
    CHAR            shift and go to state 14
    VOID            shift and go to state 15

    body                           shift and go to state 1
    variable                       shift and go to state 2
    while                          shift and go to state 3
    expresionif                    shift and go to state 4
    claseimplementacion            shift and go to state 5
    tipo                           shift and go to state 6

state 1

    (0) S' -> body .



state 2

    (1) body -> variable .

    $end            reduce using rule 1 (body -> variable .)


state 3

    (2) body -> while .

    $end            reduce using rule 2 (body -> while .)


state 4

    (3) body -> expresionif .

    $end            reduce using rule 3 (body -> expresionif .)


state 5

    (4) body -> claseimplementacion .

    $end            reduce using rule 4 (body -> claseimplementacion .)


state 6

    (12) variable -> tipo . IDENTIFICADOR IGUAL valor PUNTOCOMA
    (13) variable -> tipo . IDENTIFICADOR PUNTOCOMA

    IDENTIFICADOR   shift and go to state 16


state 7

    (27) while -> WHILE . LPAR statement RPAR LLAVEL bodyblock LLAVER

    LPAR            shift and go to state 17


state 8

    (29) expresionif -> IF . LPAR condicionif RPAR conllaves expresionpos
    (30) expresionif -> IF . LPAR condicionif RPAR sinllaves expresionpos

    LPAR            shift and go to state 18


state 9

    (58) claseimplementacion -> CLASS . IDENTIFICADOR LLAVEL bloqueclase LLAVER

    IDENTIFICADOR   shift and go to state 19


state 10

    (14) tipo -> INT .

    IDENTIFICADOR   reduce using rule 14 (tipo -> INT .)


state 11

    (15) tipo -> FLOAT .

    IDENTIFICADOR   reduce using rule 15 (tipo -> FLOAT .)


state 12

    (16) tipo -> LONG .

    IDENTIFICADOR   reduce using rule 16 (tipo -> LONG .)


state 13

    (17) tipo -> AUTO .

    IDENTIFICADOR   reduce using rule 17 (tipo -> AUTO .)


state 14

    (18) tipo -> CHAR .

    IDENTIFICADOR   reduce using rule 18 (tipo -> CHAR .)


state 15

    (19) tipo -> VOID .

    IDENTIFICADOR   reduce using rule 19 (tipo -> VOID .)


state 16

    (12) variable -> tipo IDENTIFICADOR . IGUAL valor PUNTOCOMA
    (13) variable -> tipo IDENTIFICADOR . PUNTOCOMA

    IGUAL           shift and go to state 20
    PUNTOCOMA       shift and go to state 21


state 17

    (27) while -> WHILE LPAR . statement RPAR LLAVEL bodyblock LLAVER
    (45) statement -> . expresion
    (46) statement -> . EXCLAMACION boolean
    (47) statement -> . EXCLAMACION LPAR expresion RPAR
    (48) statement -> . EXCLAMACION IDENTIFICADOR
    (28) expresion -> . expresion comparador expresion
    (51) expresion -> . valor
    (20) valor -> . ENTERO
    (21) valor -> . FLOTANTE
    (22) valor -> . CHARACTER
    (23) valor -> . STRING
    (24) valor -> . TRUE
    (25) valor -> . FALSE
    (26) valor -> . IDENTIFICADOR

    EXCLAMACION     shift and go to state 24
    ENTERO          shift and go to state 27
    FLOTANTE        shift and go to state 28
    CHARACTER       shift and go to state 29
    STRING          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    IDENTIFICADOR   shift and go to state 25

    statement                      shift and go to state 22
    expresion                      shift and go to state 23
    valor                          shift and go to state 26

state 18

    (29) expresionif -> IF LPAR . condicionif RPAR conllaves expresionpos
    (30) expresionif -> IF LPAR . condicionif RPAR sinllaves expresionpos
    (42) condicionif -> . initcondicion
    (43) condicionif -> . statement
    (44) initcondicion -> . varblock statement
    (45) statement -> . expresion
    (46) statement -> . EXCLAMACION boolean
    (47) statement -> . EXCLAMACION LPAR expresion RPAR
    (48) statement -> . EXCLAMACION IDENTIFICADOR
    (10) varblock -> . varblock variable
    (11) varblock -> .
    (28) expresion -> . expresion comparador expresion
    (51) expresion -> . valor
    (20) valor -> . ENTERO
    (21) valor -> . FLOTANTE
    (22) valor -> . CHARACTER
    (23) valor -> . STRING
    (24) valor -> . TRUE
    (25) valor -> . FALSE
    (26) valor -> . IDENTIFICADOR

  ! shift/reduce conflict for EXCLAMACION resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for FLOTANTE resolved as shift
  ! shift/reduce conflict for CHARACTER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for IDENTIFICADOR resolved as shift
    EXCLAMACION     shift and go to state 24
    INT             reduce using rule 11 (varblock -> .)
    FLOAT           reduce using rule 11 (varblock -> .)
    LONG            reduce using rule 11 (varblock -> .)
    AUTO            reduce using rule 11 (varblock -> .)
    CHAR            reduce using rule 11 (varblock -> .)
    VOID            reduce using rule 11 (varblock -> .)
    ENTERO          shift and go to state 27
    FLOTANTE        shift and go to state 28
    CHARACTER       shift and go to state 29
    STRING          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    IDENTIFICADOR   shift and go to state 25

  ! EXCLAMACION     [ reduce using rule 11 (varblock -> .) ]
  ! ENTERO          [ reduce using rule 11 (varblock -> .) ]
  ! FLOTANTE        [ reduce using rule 11 (varblock -> .) ]
  ! CHARACTER       [ reduce using rule 11 (varblock -> .) ]
  ! STRING          [ reduce using rule 11 (varblock -> .) ]
  ! TRUE            [ reduce using rule 11 (varblock -> .) ]
  ! FALSE           [ reduce using rule 11 (varblock -> .) ]
  ! IDENTIFICADOR   [ reduce using rule 11 (varblock -> .) ]

    condicionif                    shift and go to state 33
    initcondicion                  shift and go to state 34
    statement                      shift and go to state 35
    varblock                       shift and go to state 36
    expresion                      shift and go to state 23
    valor                          shift and go to state 26

state 19

    (58) claseimplementacion -> CLASS IDENTIFICADOR . LLAVEL bloqueclase LLAVER

    LLAVEL          shift and go to state 37


state 20

    (12) variable -> tipo IDENTIFICADOR IGUAL . valor PUNTOCOMA
    (20) valor -> . ENTERO
    (21) valor -> . FLOTANTE
    (22) valor -> . CHARACTER
    (23) valor -> . STRING
    (24) valor -> . TRUE
    (25) valor -> . FALSE
    (26) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 27
    FLOTANTE        shift and go to state 28
    CHARACTER       shift and go to state 29
    STRING          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    IDENTIFICADOR   shift and go to state 25

    valor                          shift and go to state 38

state 21

    (13) variable -> tipo IDENTIFICADOR PUNTOCOMA .

    $end            reduce using rule 13 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    EXCLAMACION     reduce using rule 13 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    INT             reduce using rule 13 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    FLOAT           reduce using rule 13 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    LONG            reduce using rule 13 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    AUTO            reduce using rule 13 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    CHAR            reduce using rule 13 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    VOID            reduce using rule 13 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    ENTERO          reduce using rule 13 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    FLOTANTE        reduce using rule 13 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    CHARACTER       reduce using rule 13 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    STRING          reduce using rule 13 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    TRUE            reduce using rule 13 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    FALSE           reduce using rule 13 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    IDENTIFICADOR   reduce using rule 13 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    ELSE            reduce using rule 13 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    LLAVER          reduce using rule 13 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)
    WHILE           reduce using rule 13 (variable -> tipo IDENTIFICADOR PUNTOCOMA .)


state 22

    (27) while -> WHILE LPAR statement . RPAR LLAVEL bodyblock LLAVER

    RPAR            shift and go to state 39


state 23

    (45) statement -> expresion .
    (28) expresion -> expresion . comparador expresion
    (52) comparador -> . IGUAL IGUAL
    (53) comparador -> . MENOR
    (54) comparador -> . MAYOR
    (55) comparador -> . MENOR IGUAL
    (56) comparador -> . MAYOR IGUAL
    (57) comparador -> . EXCLAMACION IGUAL

    RPAR            reduce using rule 45 (statement -> expresion .)
    IGUAL           shift and go to state 41
    MENOR           shift and go to state 42
    MAYOR           shift and go to state 43
    EXCLAMACION     shift and go to state 44

    comparador                     shift and go to state 40

state 24

    (46) statement -> EXCLAMACION . boolean
    (47) statement -> EXCLAMACION . LPAR expresion RPAR
    (48) statement -> EXCLAMACION . IDENTIFICADOR
    (49) boolean -> . TRUE
    (50) boolean -> . FALSE

    LPAR            shift and go to state 46
    IDENTIFICADOR   shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

    boolean                        shift and go to state 45

state 25

    (26) valor -> IDENTIFICADOR .

    IGUAL           reduce using rule 26 (valor -> IDENTIFICADOR .)
    MENOR           reduce using rule 26 (valor -> IDENTIFICADOR .)
    MAYOR           reduce using rule 26 (valor -> IDENTIFICADOR .)
    EXCLAMACION     reduce using rule 26 (valor -> IDENTIFICADOR .)
    RPAR            reduce using rule 26 (valor -> IDENTIFICADOR .)
    PUNTOCOMA       reduce using rule 26 (valor -> IDENTIFICADOR .)


state 26

    (51) expresion -> valor .

    IGUAL           reduce using rule 51 (expresion -> valor .)
    MENOR           reduce using rule 51 (expresion -> valor .)
    MAYOR           reduce using rule 51 (expresion -> valor .)
    EXCLAMACION     reduce using rule 51 (expresion -> valor .)
    RPAR            reduce using rule 51 (expresion -> valor .)


state 27

    (20) valor -> ENTERO .

    IGUAL           reduce using rule 20 (valor -> ENTERO .)
    MENOR           reduce using rule 20 (valor -> ENTERO .)
    MAYOR           reduce using rule 20 (valor -> ENTERO .)
    EXCLAMACION     reduce using rule 20 (valor -> ENTERO .)
    RPAR            reduce using rule 20 (valor -> ENTERO .)
    PUNTOCOMA       reduce using rule 20 (valor -> ENTERO .)


state 28

    (21) valor -> FLOTANTE .

    IGUAL           reduce using rule 21 (valor -> FLOTANTE .)
    MENOR           reduce using rule 21 (valor -> FLOTANTE .)
    MAYOR           reduce using rule 21 (valor -> FLOTANTE .)
    EXCLAMACION     reduce using rule 21 (valor -> FLOTANTE .)
    RPAR            reduce using rule 21 (valor -> FLOTANTE .)
    PUNTOCOMA       reduce using rule 21 (valor -> FLOTANTE .)


state 29

    (22) valor -> CHARACTER .

    IGUAL           reduce using rule 22 (valor -> CHARACTER .)
    MENOR           reduce using rule 22 (valor -> CHARACTER .)
    MAYOR           reduce using rule 22 (valor -> CHARACTER .)
    EXCLAMACION     reduce using rule 22 (valor -> CHARACTER .)
    RPAR            reduce using rule 22 (valor -> CHARACTER .)
    PUNTOCOMA       reduce using rule 22 (valor -> CHARACTER .)


state 30

    (23) valor -> STRING .

    IGUAL           reduce using rule 23 (valor -> STRING .)
    MENOR           reduce using rule 23 (valor -> STRING .)
    MAYOR           reduce using rule 23 (valor -> STRING .)
    EXCLAMACION     reduce using rule 23 (valor -> STRING .)
    RPAR            reduce using rule 23 (valor -> STRING .)
    PUNTOCOMA       reduce using rule 23 (valor -> STRING .)


state 31

    (24) valor -> TRUE .

    IGUAL           reduce using rule 24 (valor -> TRUE .)
    MENOR           reduce using rule 24 (valor -> TRUE .)
    MAYOR           reduce using rule 24 (valor -> TRUE .)
    EXCLAMACION     reduce using rule 24 (valor -> TRUE .)
    RPAR            reduce using rule 24 (valor -> TRUE .)
    PUNTOCOMA       reduce using rule 24 (valor -> TRUE .)


state 32

    (25) valor -> FALSE .

    IGUAL           reduce using rule 25 (valor -> FALSE .)
    MENOR           reduce using rule 25 (valor -> FALSE .)
    MAYOR           reduce using rule 25 (valor -> FALSE .)
    EXCLAMACION     reduce using rule 25 (valor -> FALSE .)
    RPAR            reduce using rule 25 (valor -> FALSE .)
    PUNTOCOMA       reduce using rule 25 (valor -> FALSE .)


state 33

    (29) expresionif -> IF LPAR condicionif . RPAR conllaves expresionpos
    (30) expresionif -> IF LPAR condicionif . RPAR sinllaves expresionpos

    RPAR            shift and go to state 50


state 34

    (42) condicionif -> initcondicion .

    RPAR            reduce using rule 42 (condicionif -> initcondicion .)


state 35

    (43) condicionif -> statement .

    RPAR            reduce using rule 43 (condicionif -> statement .)


state 36

    (44) initcondicion -> varblock . statement
    (10) varblock -> varblock . variable
    (45) statement -> . expresion
    (46) statement -> . EXCLAMACION boolean
    (47) statement -> . EXCLAMACION LPAR expresion RPAR
    (48) statement -> . EXCLAMACION IDENTIFICADOR
    (12) variable -> . tipo IDENTIFICADOR IGUAL valor PUNTOCOMA
    (13) variable -> . tipo IDENTIFICADOR PUNTOCOMA
    (28) expresion -> . expresion comparador expresion
    (51) expresion -> . valor
    (14) tipo -> . INT
    (15) tipo -> . FLOAT
    (16) tipo -> . LONG
    (17) tipo -> . AUTO
    (18) tipo -> . CHAR
    (19) tipo -> . VOID
    (20) valor -> . ENTERO
    (21) valor -> . FLOTANTE
    (22) valor -> . CHARACTER
    (23) valor -> . STRING
    (24) valor -> . TRUE
    (25) valor -> . FALSE
    (26) valor -> . IDENTIFICADOR

    EXCLAMACION     shift and go to state 24
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    LONG            shift and go to state 12
    AUTO            shift and go to state 13
    CHAR            shift and go to state 14
    VOID            shift and go to state 15
    ENTERO          shift and go to state 27
    FLOTANTE        shift and go to state 28
    CHARACTER       shift and go to state 29
    STRING          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    IDENTIFICADOR   shift and go to state 25

    statement                      shift and go to state 51
    variable                       shift and go to state 52
    expresion                      shift and go to state 23
    tipo                           shift and go to state 6
    valor                          shift and go to state 26

state 37

    (58) claseimplementacion -> CLASS IDENTIFICADOR LLAVEL . bloqueclase LLAVER
    (59) bloqueclase -> . definicion definicion
    (60) bloqueclase -> .
    (61) definicion -> . tipo IDENTIFICADOR PUNTOCOMA
    (62) definicion -> .
    (14) tipo -> . INT
    (15) tipo -> . FLOAT
    (16) tipo -> . LONG
    (17) tipo -> . AUTO
    (18) tipo -> . CHAR
    (19) tipo -> . VOID

  ! reduce/reduce conflict for LLAVER resolved using rule 60 (bloqueclase -> .)
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
    LLAVER          reduce using rule 60 (bloqueclase -> .)
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    LONG            shift and go to state 12
    AUTO            shift and go to state 13
    CHAR            shift and go to state 14
    VOID            shift and go to state 15

  ! INT             [ reduce using rule 62 (definicion -> .) ]
  ! FLOAT           [ reduce using rule 62 (definicion -> .) ]
  ! LONG            [ reduce using rule 62 (definicion -> .) ]
  ! AUTO            [ reduce using rule 62 (definicion -> .) ]
  ! CHAR            [ reduce using rule 62 (definicion -> .) ]
  ! VOID            [ reduce using rule 62 (definicion -> .) ]
  ! LLAVER          [ reduce using rule 62 (definicion -> .) ]

    bloqueclase                    shift and go to state 53
    definicion                     shift and go to state 54
    tipo                           shift and go to state 55

state 38

    (12) variable -> tipo IDENTIFICADOR IGUAL valor . PUNTOCOMA

    PUNTOCOMA       shift and go to state 56


state 39

    (27) while -> WHILE LPAR statement RPAR . LLAVEL bodyblock LLAVER

    LLAVEL          shift and go to state 57


state 40

    (28) expresion -> expresion comparador . expresion
    (28) expresion -> . expresion comparador expresion
    (51) expresion -> . valor
    (20) valor -> . ENTERO
    (21) valor -> . FLOTANTE
    (22) valor -> . CHARACTER
    (23) valor -> . STRING
    (24) valor -> . TRUE
    (25) valor -> . FALSE
    (26) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 27
    FLOTANTE        shift and go to state 28
    CHARACTER       shift and go to state 29
    STRING          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    IDENTIFICADOR   shift and go to state 25

    expresion                      shift and go to state 58
    valor                          shift and go to state 26

state 41

    (52) comparador -> IGUAL . IGUAL

    IGUAL           shift and go to state 59


state 42

    (53) comparador -> MENOR .
    (55) comparador -> MENOR . IGUAL

    ENTERO          reduce using rule 53 (comparador -> MENOR .)
    FLOTANTE        reduce using rule 53 (comparador -> MENOR .)
    CHARACTER       reduce using rule 53 (comparador -> MENOR .)
    STRING          reduce using rule 53 (comparador -> MENOR .)
    TRUE            reduce using rule 53 (comparador -> MENOR .)
    FALSE           reduce using rule 53 (comparador -> MENOR .)
    IDENTIFICADOR   reduce using rule 53 (comparador -> MENOR .)
    IGUAL           shift and go to state 60


state 43

    (54) comparador -> MAYOR .
    (56) comparador -> MAYOR . IGUAL

    ENTERO          reduce using rule 54 (comparador -> MAYOR .)
    FLOTANTE        reduce using rule 54 (comparador -> MAYOR .)
    CHARACTER       reduce using rule 54 (comparador -> MAYOR .)
    STRING          reduce using rule 54 (comparador -> MAYOR .)
    TRUE            reduce using rule 54 (comparador -> MAYOR .)
    FALSE           reduce using rule 54 (comparador -> MAYOR .)
    IDENTIFICADOR   reduce using rule 54 (comparador -> MAYOR .)
    IGUAL           shift and go to state 61


state 44

    (57) comparador -> EXCLAMACION . IGUAL

    IGUAL           shift and go to state 62


state 45

    (46) statement -> EXCLAMACION boolean .

    RPAR            reduce using rule 46 (statement -> EXCLAMACION boolean .)


state 46

    (47) statement -> EXCLAMACION LPAR . expresion RPAR
    (28) expresion -> . expresion comparador expresion
    (51) expresion -> . valor
    (20) valor -> . ENTERO
    (21) valor -> . FLOTANTE
    (22) valor -> . CHARACTER
    (23) valor -> . STRING
    (24) valor -> . TRUE
    (25) valor -> . FALSE
    (26) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 27
    FLOTANTE        shift and go to state 28
    CHARACTER       shift and go to state 29
    STRING          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    IDENTIFICADOR   shift and go to state 25

    expresion                      shift and go to state 63
    valor                          shift and go to state 26

state 47

    (48) statement -> EXCLAMACION IDENTIFICADOR .

    RPAR            reduce using rule 48 (statement -> EXCLAMACION IDENTIFICADOR .)


state 48

    (49) boolean -> TRUE .

    RPAR            reduce using rule 49 (boolean -> TRUE .)


state 49

    (50) boolean -> FALSE .

    RPAR            reduce using rule 50 (boolean -> FALSE .)


state 50

    (29) expresionif -> IF LPAR condicionif RPAR . conllaves expresionpos
    (30) expresionif -> IF LPAR condicionif RPAR . sinllaves expresionpos
    (41) conllaves -> . LLAVEL bodyblock LLAVER
    (39) sinllaves -> . while
    (40) sinllaves -> . variable
    (27) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (12) variable -> . tipo IDENTIFICADOR IGUAL valor PUNTOCOMA
    (13) variable -> . tipo IDENTIFICADOR PUNTOCOMA
    (14) tipo -> . INT
    (15) tipo -> . FLOAT
    (16) tipo -> . LONG
    (17) tipo -> . AUTO
    (18) tipo -> . CHAR
    (19) tipo -> . VOID

    LLAVEL          shift and go to state 66
    WHILE           shift and go to state 7
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    LONG            shift and go to state 12
    AUTO            shift and go to state 13
    CHAR            shift and go to state 14
    VOID            shift and go to state 15

    conllaves                      shift and go to state 64
    sinllaves                      shift and go to state 65
    while                          shift and go to state 67
    variable                       shift and go to state 68
    tipo                           shift and go to state 6

state 51

    (44) initcondicion -> varblock statement .

    RPAR            reduce using rule 44 (initcondicion -> varblock statement .)


state 52

    (10) varblock -> varblock variable .

    EXCLAMACION     reduce using rule 10 (varblock -> varblock variable .)
    INT             reduce using rule 10 (varblock -> varblock variable .)
    FLOAT           reduce using rule 10 (varblock -> varblock variable .)
    LONG            reduce using rule 10 (varblock -> varblock variable .)
    AUTO            reduce using rule 10 (varblock -> varblock variable .)
    CHAR            reduce using rule 10 (varblock -> varblock variable .)
    VOID            reduce using rule 10 (varblock -> varblock variable .)
    ENTERO          reduce using rule 10 (varblock -> varblock variable .)
    FLOTANTE        reduce using rule 10 (varblock -> varblock variable .)
    CHARACTER       reduce using rule 10 (varblock -> varblock variable .)
    STRING          reduce using rule 10 (varblock -> varblock variable .)
    TRUE            reduce using rule 10 (varblock -> varblock variable .)
    FALSE           reduce using rule 10 (varblock -> varblock variable .)
    IDENTIFICADOR   reduce using rule 10 (varblock -> varblock variable .)


state 53

    (58) claseimplementacion -> CLASS IDENTIFICADOR LLAVEL bloqueclase . LLAVER

    LLAVER          shift and go to state 69


state 54

    (59) bloqueclase -> definicion . definicion
    (61) definicion -> . tipo IDENTIFICADOR PUNTOCOMA
    (62) definicion -> .
    (14) tipo -> . INT
    (15) tipo -> . FLOAT
    (16) tipo -> . LONG
    (17) tipo -> . AUTO
    (18) tipo -> . CHAR
    (19) tipo -> . VOID

    LLAVER          reduce using rule 62 (definicion -> .)
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    LONG            shift and go to state 12
    AUTO            shift and go to state 13
    CHAR            shift and go to state 14
    VOID            shift and go to state 15

    definicion                     shift and go to state 70
    tipo                           shift and go to state 55

state 55

    (61) definicion -> tipo . IDENTIFICADOR PUNTOCOMA

    IDENTIFICADOR   shift and go to state 71


state 56

    (12) variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .

    $end            reduce using rule 12 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    EXCLAMACION     reduce using rule 12 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    INT             reduce using rule 12 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    FLOAT           reduce using rule 12 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    LONG            reduce using rule 12 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    AUTO            reduce using rule 12 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    CHAR            reduce using rule 12 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    VOID            reduce using rule 12 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    ENTERO          reduce using rule 12 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    FLOTANTE        reduce using rule 12 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    CHARACTER       reduce using rule 12 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    STRING          reduce using rule 12 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    TRUE            reduce using rule 12 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    FALSE           reduce using rule 12 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    IDENTIFICADOR   reduce using rule 12 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    ELSE            reduce using rule 12 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    LLAVER          reduce using rule 12 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    WHILE           reduce using rule 12 (variable -> tipo IDENTIFICADOR IGUAL valor PUNTOCOMA .)


state 57

    (27) while -> WHILE LPAR statement RPAR LLAVEL . bodyblock LLAVER
    (6) bodyblock -> . bodyblock variable
    (7) bodyblock -> . bodyblock while
    (8) bodyblock -> . expresionif
    (9) bodyblock -> .
    (29) expresionif -> . IF LPAR condicionif RPAR conllaves expresionpos
    (30) expresionif -> . IF LPAR condicionif RPAR sinllaves expresionpos

    LLAVER          reduce using rule 9 (bodyblock -> .)
    WHILE           reduce using rule 9 (bodyblock -> .)
    INT             reduce using rule 9 (bodyblock -> .)
    FLOAT           reduce using rule 9 (bodyblock -> .)
    LONG            reduce using rule 9 (bodyblock -> .)
    AUTO            reduce using rule 9 (bodyblock -> .)
    CHAR            reduce using rule 9 (bodyblock -> .)
    VOID            reduce using rule 9 (bodyblock -> .)
    IF              shift and go to state 8

    bodyblock                      shift and go to state 72
    expresionif                    shift and go to state 73

state 58

    (28) expresion -> expresion comparador expresion .
    (28) expresion -> expresion . comparador expresion
    (52) comparador -> . IGUAL IGUAL
    (53) comparador -> . MENOR
    (54) comparador -> . MAYOR
    (55) comparador -> . MENOR IGUAL
    (56) comparador -> . MAYOR IGUAL
    (57) comparador -> . EXCLAMACION IGUAL

  ! shift/reduce conflict for IGUAL resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for EXCLAMACION resolved as shift
    RPAR            reduce using rule 28 (expresion -> expresion comparador expresion .)
    IGUAL           shift and go to state 41
    MENOR           shift and go to state 42
    MAYOR           shift and go to state 43
    EXCLAMACION     shift and go to state 44

  ! IGUAL           [ reduce using rule 28 (expresion -> expresion comparador expresion .) ]
  ! MENOR           [ reduce using rule 28 (expresion -> expresion comparador expresion .) ]
  ! MAYOR           [ reduce using rule 28 (expresion -> expresion comparador expresion .) ]
  ! EXCLAMACION     [ reduce using rule 28 (expresion -> expresion comparador expresion .) ]

    comparador                     shift and go to state 40

state 59

    (52) comparador -> IGUAL IGUAL .

    ENTERO          reduce using rule 52 (comparador -> IGUAL IGUAL .)
    FLOTANTE        reduce using rule 52 (comparador -> IGUAL IGUAL .)
    CHARACTER       reduce using rule 52 (comparador -> IGUAL IGUAL .)
    STRING          reduce using rule 52 (comparador -> IGUAL IGUAL .)
    TRUE            reduce using rule 52 (comparador -> IGUAL IGUAL .)
    FALSE           reduce using rule 52 (comparador -> IGUAL IGUAL .)
    IDENTIFICADOR   reduce using rule 52 (comparador -> IGUAL IGUAL .)


state 60

    (55) comparador -> MENOR IGUAL .

    ENTERO          reduce using rule 55 (comparador -> MENOR IGUAL .)
    FLOTANTE        reduce using rule 55 (comparador -> MENOR IGUAL .)
    CHARACTER       reduce using rule 55 (comparador -> MENOR IGUAL .)
    STRING          reduce using rule 55 (comparador -> MENOR IGUAL .)
    TRUE            reduce using rule 55 (comparador -> MENOR IGUAL .)
    FALSE           reduce using rule 55 (comparador -> MENOR IGUAL .)
    IDENTIFICADOR   reduce using rule 55 (comparador -> MENOR IGUAL .)


state 61

    (56) comparador -> MAYOR IGUAL .

    ENTERO          reduce using rule 56 (comparador -> MAYOR IGUAL .)
    FLOTANTE        reduce using rule 56 (comparador -> MAYOR IGUAL .)
    CHARACTER       reduce using rule 56 (comparador -> MAYOR IGUAL .)
    STRING          reduce using rule 56 (comparador -> MAYOR IGUAL .)
    TRUE            reduce using rule 56 (comparador -> MAYOR IGUAL .)
    FALSE           reduce using rule 56 (comparador -> MAYOR IGUAL .)
    IDENTIFICADOR   reduce using rule 56 (comparador -> MAYOR IGUAL .)


state 62

    (57) comparador -> EXCLAMACION IGUAL .

    ENTERO          reduce using rule 57 (comparador -> EXCLAMACION IGUAL .)
    FLOTANTE        reduce using rule 57 (comparador -> EXCLAMACION IGUAL .)
    CHARACTER       reduce using rule 57 (comparador -> EXCLAMACION IGUAL .)
    STRING          reduce using rule 57 (comparador -> EXCLAMACION IGUAL .)
    TRUE            reduce using rule 57 (comparador -> EXCLAMACION IGUAL .)
    FALSE           reduce using rule 57 (comparador -> EXCLAMACION IGUAL .)
    IDENTIFICADOR   reduce using rule 57 (comparador -> EXCLAMACION IGUAL .)


state 63

    (47) statement -> EXCLAMACION LPAR expresion . RPAR
    (28) expresion -> expresion . comparador expresion
    (52) comparador -> . IGUAL IGUAL
    (53) comparador -> . MENOR
    (54) comparador -> . MAYOR
    (55) comparador -> . MENOR IGUAL
    (56) comparador -> . MAYOR IGUAL
    (57) comparador -> . EXCLAMACION IGUAL

    RPAR            shift and go to state 74
    IGUAL           shift and go to state 41
    MENOR           shift and go to state 42
    MAYOR           shift and go to state 43
    EXCLAMACION     shift and go to state 44

    comparador                     shift and go to state 40

state 64

    (29) expresionif -> IF LPAR condicionif RPAR conllaves . expresionpos
    (31) expresionpos -> . else
    (32) expresionpos -> . elseif
    (33) expresionpos -> .
    (37) else -> . ELSE conllaves
    (38) else -> . ELSE sinllaves
    (34) elseif -> . ELSE IF LPAR condicionif RPAR conllaves else
    (35) elseif -> . ELSE IF LPAR condicionif RPAR sinllaves else
    (36) elseif -> .

  ! reduce/reduce conflict for $end resolved using rule 33 (expresionpos -> .)
  ! reduce/reduce conflict for LLAVER resolved using rule 33 (expresionpos -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 33 (expresionpos -> .)
  ! reduce/reduce conflict for INT resolved using rule 33 (expresionpos -> .)
  ! reduce/reduce conflict for FLOAT resolved using rule 33 (expresionpos -> .)
  ! reduce/reduce conflict for LONG resolved using rule 33 (expresionpos -> .)
  ! reduce/reduce conflict for AUTO resolved using rule 33 (expresionpos -> .)
  ! reduce/reduce conflict for CHAR resolved using rule 33 (expresionpos -> .)
  ! reduce/reduce conflict for VOID resolved using rule 33 (expresionpos -> .)
    $end            reduce using rule 33 (expresionpos -> .)
    LLAVER          reduce using rule 33 (expresionpos -> .)
    WHILE           reduce using rule 33 (expresionpos -> .)
    INT             reduce using rule 33 (expresionpos -> .)
    FLOAT           reduce using rule 33 (expresionpos -> .)
    LONG            reduce using rule 33 (expresionpos -> .)
    AUTO            reduce using rule 33 (expresionpos -> .)
    CHAR            reduce using rule 33 (expresionpos -> .)
    VOID            reduce using rule 33 (expresionpos -> .)
    ELSE            shift and go to state 78

  ! $end            [ reduce using rule 36 (elseif -> .) ]
  ! LLAVER          [ reduce using rule 36 (elseif -> .) ]
  ! WHILE           [ reduce using rule 36 (elseif -> .) ]
  ! INT             [ reduce using rule 36 (elseif -> .) ]
  ! FLOAT           [ reduce using rule 36 (elseif -> .) ]
  ! LONG            [ reduce using rule 36 (elseif -> .) ]
  ! AUTO            [ reduce using rule 36 (elseif -> .) ]
  ! CHAR            [ reduce using rule 36 (elseif -> .) ]
  ! VOID            [ reduce using rule 36 (elseif -> .) ]

    expresionpos                   shift and go to state 75
    else                           shift and go to state 76
    elseif                         shift and go to state 77

state 65

    (30) expresionif -> IF LPAR condicionif RPAR sinllaves . expresionpos
    (31) expresionpos -> . else
    (32) expresionpos -> . elseif
    (33) expresionpos -> .
    (37) else -> . ELSE conllaves
    (38) else -> . ELSE sinllaves
    (34) elseif -> . ELSE IF LPAR condicionif RPAR conllaves else
    (35) elseif -> . ELSE IF LPAR condicionif RPAR sinllaves else
    (36) elseif -> .

  ! reduce/reduce conflict for $end resolved using rule 33 (expresionpos -> .)
  ! reduce/reduce conflict for LLAVER resolved using rule 33 (expresionpos -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 33 (expresionpos -> .)
  ! reduce/reduce conflict for INT resolved using rule 33 (expresionpos -> .)
  ! reduce/reduce conflict for FLOAT resolved using rule 33 (expresionpos -> .)
  ! reduce/reduce conflict for LONG resolved using rule 33 (expresionpos -> .)
  ! reduce/reduce conflict for AUTO resolved using rule 33 (expresionpos -> .)
  ! reduce/reduce conflict for CHAR resolved using rule 33 (expresionpos -> .)
  ! reduce/reduce conflict for VOID resolved using rule 33 (expresionpos -> .)
    $end            reduce using rule 33 (expresionpos -> .)
    LLAVER          reduce using rule 33 (expresionpos -> .)
    WHILE           reduce using rule 33 (expresionpos -> .)
    INT             reduce using rule 33 (expresionpos -> .)
    FLOAT           reduce using rule 33 (expresionpos -> .)
    LONG            reduce using rule 33 (expresionpos -> .)
    AUTO            reduce using rule 33 (expresionpos -> .)
    CHAR            reduce using rule 33 (expresionpos -> .)
    VOID            reduce using rule 33 (expresionpos -> .)
    ELSE            shift and go to state 78

  ! $end            [ reduce using rule 36 (elseif -> .) ]
  ! LLAVER          [ reduce using rule 36 (elseif -> .) ]
  ! WHILE           [ reduce using rule 36 (elseif -> .) ]
  ! INT             [ reduce using rule 36 (elseif -> .) ]
  ! FLOAT           [ reduce using rule 36 (elseif -> .) ]
  ! LONG            [ reduce using rule 36 (elseif -> .) ]
  ! AUTO            [ reduce using rule 36 (elseif -> .) ]
  ! CHAR            [ reduce using rule 36 (elseif -> .) ]
  ! VOID            [ reduce using rule 36 (elseif -> .) ]

    expresionpos                   shift and go to state 79
    else                           shift and go to state 76
    elseif                         shift and go to state 77

state 66

    (41) conllaves -> LLAVEL . bodyblock LLAVER
    (6) bodyblock -> . bodyblock variable
    (7) bodyblock -> . bodyblock while
    (8) bodyblock -> . expresionif
    (9) bodyblock -> .
    (29) expresionif -> . IF LPAR condicionif RPAR conllaves expresionpos
    (30) expresionif -> . IF LPAR condicionif RPAR sinllaves expresionpos

    LLAVER          reduce using rule 9 (bodyblock -> .)
    WHILE           reduce using rule 9 (bodyblock -> .)
    INT             reduce using rule 9 (bodyblock -> .)
    FLOAT           reduce using rule 9 (bodyblock -> .)
    LONG            reduce using rule 9 (bodyblock -> .)
    AUTO            reduce using rule 9 (bodyblock -> .)
    CHAR            reduce using rule 9 (bodyblock -> .)
    VOID            reduce using rule 9 (bodyblock -> .)
    IF              shift and go to state 8

    bodyblock                      shift and go to state 80
    expresionif                    shift and go to state 73

state 67

    (39) sinllaves -> while .

    ELSE            reduce using rule 39 (sinllaves -> while .)
    $end            reduce using rule 39 (sinllaves -> while .)
    LLAVER          reduce using rule 39 (sinllaves -> while .)
    WHILE           reduce using rule 39 (sinllaves -> while .)
    INT             reduce using rule 39 (sinllaves -> while .)
    FLOAT           reduce using rule 39 (sinllaves -> while .)
    LONG            reduce using rule 39 (sinllaves -> while .)
    AUTO            reduce using rule 39 (sinllaves -> while .)
    CHAR            reduce using rule 39 (sinllaves -> while .)
    VOID            reduce using rule 39 (sinllaves -> while .)


state 68

    (40) sinllaves -> variable .

    ELSE            reduce using rule 40 (sinllaves -> variable .)
    $end            reduce using rule 40 (sinllaves -> variable .)
    LLAVER          reduce using rule 40 (sinllaves -> variable .)
    WHILE           reduce using rule 40 (sinllaves -> variable .)
    INT             reduce using rule 40 (sinllaves -> variable .)
    FLOAT           reduce using rule 40 (sinllaves -> variable .)
    LONG            reduce using rule 40 (sinllaves -> variable .)
    AUTO            reduce using rule 40 (sinllaves -> variable .)
    CHAR            reduce using rule 40 (sinllaves -> variable .)
    VOID            reduce using rule 40 (sinllaves -> variable .)


state 69

    (58) claseimplementacion -> CLASS IDENTIFICADOR LLAVEL bloqueclase LLAVER .

    $end            reduce using rule 58 (claseimplementacion -> CLASS IDENTIFICADOR LLAVEL bloqueclase LLAVER .)


state 70

    (59) bloqueclase -> definicion definicion .

    LLAVER          reduce using rule 59 (bloqueclase -> definicion definicion .)


state 71

    (61) definicion -> tipo IDENTIFICADOR . PUNTOCOMA

    PUNTOCOMA       shift and go to state 81


state 72

    (27) while -> WHILE LPAR statement RPAR LLAVEL bodyblock . LLAVER
    (6) bodyblock -> bodyblock . variable
    (7) bodyblock -> bodyblock . while
    (12) variable -> . tipo IDENTIFICADOR IGUAL valor PUNTOCOMA
    (13) variable -> . tipo IDENTIFICADOR PUNTOCOMA
    (27) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (14) tipo -> . INT
    (15) tipo -> . FLOAT
    (16) tipo -> . LONG
    (17) tipo -> . AUTO
    (18) tipo -> . CHAR
    (19) tipo -> . VOID

    LLAVER          shift and go to state 82
    WHILE           shift and go to state 7
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    LONG            shift and go to state 12
    AUTO            shift and go to state 13
    CHAR            shift and go to state 14
    VOID            shift and go to state 15

    variable                       shift and go to state 83
    while                          shift and go to state 84
    tipo                           shift and go to state 6

state 73

    (8) bodyblock -> expresionif .

    LLAVER          reduce using rule 8 (bodyblock -> expresionif .)
    WHILE           reduce using rule 8 (bodyblock -> expresionif .)
    INT             reduce using rule 8 (bodyblock -> expresionif .)
    FLOAT           reduce using rule 8 (bodyblock -> expresionif .)
    LONG            reduce using rule 8 (bodyblock -> expresionif .)
    AUTO            reduce using rule 8 (bodyblock -> expresionif .)
    CHAR            reduce using rule 8 (bodyblock -> expresionif .)
    VOID            reduce using rule 8 (bodyblock -> expresionif .)


state 74

    (47) statement -> EXCLAMACION LPAR expresion RPAR .

    RPAR            reduce using rule 47 (statement -> EXCLAMACION LPAR expresion RPAR .)


state 75

    (29) expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .

    $end            reduce using rule 29 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    LLAVER          reduce using rule 29 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    WHILE           reduce using rule 29 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    INT             reduce using rule 29 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    FLOAT           reduce using rule 29 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    LONG            reduce using rule 29 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    AUTO            reduce using rule 29 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    CHAR            reduce using rule 29 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    VOID            reduce using rule 29 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)


state 76

    (31) expresionpos -> else .

    $end            reduce using rule 31 (expresionpos -> else .)
    LLAVER          reduce using rule 31 (expresionpos -> else .)
    WHILE           reduce using rule 31 (expresionpos -> else .)
    INT             reduce using rule 31 (expresionpos -> else .)
    FLOAT           reduce using rule 31 (expresionpos -> else .)
    LONG            reduce using rule 31 (expresionpos -> else .)
    AUTO            reduce using rule 31 (expresionpos -> else .)
    CHAR            reduce using rule 31 (expresionpos -> else .)
    VOID            reduce using rule 31 (expresionpos -> else .)


state 77

    (32) expresionpos -> elseif .

    $end            reduce using rule 32 (expresionpos -> elseif .)
    LLAVER          reduce using rule 32 (expresionpos -> elseif .)
    WHILE           reduce using rule 32 (expresionpos -> elseif .)
    INT             reduce using rule 32 (expresionpos -> elseif .)
    FLOAT           reduce using rule 32 (expresionpos -> elseif .)
    LONG            reduce using rule 32 (expresionpos -> elseif .)
    AUTO            reduce using rule 32 (expresionpos -> elseif .)
    CHAR            reduce using rule 32 (expresionpos -> elseif .)
    VOID            reduce using rule 32 (expresionpos -> elseif .)


state 78

    (37) else -> ELSE . conllaves
    (38) else -> ELSE . sinllaves
    (34) elseif -> ELSE . IF LPAR condicionif RPAR conllaves else
    (35) elseif -> ELSE . IF LPAR condicionif RPAR sinllaves else
    (41) conllaves -> . LLAVEL bodyblock LLAVER
    (39) sinllaves -> . while
    (40) sinllaves -> . variable
    (27) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (12) variable -> . tipo IDENTIFICADOR IGUAL valor PUNTOCOMA
    (13) variable -> . tipo IDENTIFICADOR PUNTOCOMA
    (14) tipo -> . INT
    (15) tipo -> . FLOAT
    (16) tipo -> . LONG
    (17) tipo -> . AUTO
    (18) tipo -> . CHAR
    (19) tipo -> . VOID

    IF              shift and go to state 87
    LLAVEL          shift and go to state 66
    WHILE           shift and go to state 7
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    LONG            shift and go to state 12
    AUTO            shift and go to state 13
    CHAR            shift and go to state 14
    VOID            shift and go to state 15

    conllaves                      shift and go to state 85
    sinllaves                      shift and go to state 86
    while                          shift and go to state 67
    variable                       shift and go to state 68
    tipo                           shift and go to state 6

state 79

    (30) expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .

    $end            reduce using rule 30 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    LLAVER          reduce using rule 30 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    WHILE           reduce using rule 30 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    INT             reduce using rule 30 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    FLOAT           reduce using rule 30 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    LONG            reduce using rule 30 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    AUTO            reduce using rule 30 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    CHAR            reduce using rule 30 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    VOID            reduce using rule 30 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)


state 80

    (41) conllaves -> LLAVEL bodyblock . LLAVER
    (6) bodyblock -> bodyblock . variable
    (7) bodyblock -> bodyblock . while
    (12) variable -> . tipo IDENTIFICADOR IGUAL valor PUNTOCOMA
    (13) variable -> . tipo IDENTIFICADOR PUNTOCOMA
    (27) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (14) tipo -> . INT
    (15) tipo -> . FLOAT
    (16) tipo -> . LONG
    (17) tipo -> . AUTO
    (18) tipo -> . CHAR
    (19) tipo -> . VOID

    LLAVER          shift and go to state 88
    WHILE           shift and go to state 7
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    LONG            shift and go to state 12
    AUTO            shift and go to state 13
    CHAR            shift and go to state 14
    VOID            shift and go to state 15

    variable                       shift and go to state 83
    while                          shift and go to state 84
    tipo                           shift and go to state 6

state 81

    (61) definicion -> tipo IDENTIFICADOR PUNTOCOMA .

    INT             reduce using rule 61 (definicion -> tipo IDENTIFICADOR PUNTOCOMA .)
    FLOAT           reduce using rule 61 (definicion -> tipo IDENTIFICADOR PUNTOCOMA .)
    LONG            reduce using rule 61 (definicion -> tipo IDENTIFICADOR PUNTOCOMA .)
    AUTO            reduce using rule 61 (definicion -> tipo IDENTIFICADOR PUNTOCOMA .)
    CHAR            reduce using rule 61 (definicion -> tipo IDENTIFICADOR PUNTOCOMA .)
    VOID            reduce using rule 61 (definicion -> tipo IDENTIFICADOR PUNTOCOMA .)
    LLAVER          reduce using rule 61 (definicion -> tipo IDENTIFICADOR PUNTOCOMA .)


state 82

    (27) while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .

    $end            reduce using rule 27 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    ELSE            reduce using rule 27 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    LLAVER          reduce using rule 27 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    WHILE           reduce using rule 27 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    INT             reduce using rule 27 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    FLOAT           reduce using rule 27 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    LONG            reduce using rule 27 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    AUTO            reduce using rule 27 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    CHAR            reduce using rule 27 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    VOID            reduce using rule 27 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)


state 83

    (6) bodyblock -> bodyblock variable .

    LLAVER          reduce using rule 6 (bodyblock -> bodyblock variable .)
    WHILE           reduce using rule 6 (bodyblock -> bodyblock variable .)
    INT             reduce using rule 6 (bodyblock -> bodyblock variable .)
    FLOAT           reduce using rule 6 (bodyblock -> bodyblock variable .)
    LONG            reduce using rule 6 (bodyblock -> bodyblock variable .)
    AUTO            reduce using rule 6 (bodyblock -> bodyblock variable .)
    CHAR            reduce using rule 6 (bodyblock -> bodyblock variable .)
    VOID            reduce using rule 6 (bodyblock -> bodyblock variable .)


state 84

    (7) bodyblock -> bodyblock while .

    LLAVER          reduce using rule 7 (bodyblock -> bodyblock while .)
    WHILE           reduce using rule 7 (bodyblock -> bodyblock while .)
    INT             reduce using rule 7 (bodyblock -> bodyblock while .)
    FLOAT           reduce using rule 7 (bodyblock -> bodyblock while .)
    LONG            reduce using rule 7 (bodyblock -> bodyblock while .)
    AUTO            reduce using rule 7 (bodyblock -> bodyblock while .)
    CHAR            reduce using rule 7 (bodyblock -> bodyblock while .)
    VOID            reduce using rule 7 (bodyblock -> bodyblock while .)


state 85

    (37) else -> ELSE conllaves .

    $end            reduce using rule 37 (else -> ELSE conllaves .)
    LLAVER          reduce using rule 37 (else -> ELSE conllaves .)
    WHILE           reduce using rule 37 (else -> ELSE conllaves .)
    INT             reduce using rule 37 (else -> ELSE conllaves .)
    FLOAT           reduce using rule 37 (else -> ELSE conllaves .)
    LONG            reduce using rule 37 (else -> ELSE conllaves .)
    AUTO            reduce using rule 37 (else -> ELSE conllaves .)
    CHAR            reduce using rule 37 (else -> ELSE conllaves .)
    VOID            reduce using rule 37 (else -> ELSE conllaves .)


state 86

    (38) else -> ELSE sinllaves .

    $end            reduce using rule 38 (else -> ELSE sinllaves .)
    LLAVER          reduce using rule 38 (else -> ELSE sinllaves .)
    WHILE           reduce using rule 38 (else -> ELSE sinllaves .)
    INT             reduce using rule 38 (else -> ELSE sinllaves .)
    FLOAT           reduce using rule 38 (else -> ELSE sinllaves .)
    LONG            reduce using rule 38 (else -> ELSE sinllaves .)
    AUTO            reduce using rule 38 (else -> ELSE sinllaves .)
    CHAR            reduce using rule 38 (else -> ELSE sinllaves .)
    VOID            reduce using rule 38 (else -> ELSE sinllaves .)


state 87

    (34) elseif -> ELSE IF . LPAR condicionif RPAR conllaves else
    (35) elseif -> ELSE IF . LPAR condicionif RPAR sinllaves else

    LPAR            shift and go to state 89


state 88

    (41) conllaves -> LLAVEL bodyblock LLAVER .

    ELSE            reduce using rule 41 (conllaves -> LLAVEL bodyblock LLAVER .)
    $end            reduce using rule 41 (conllaves -> LLAVEL bodyblock LLAVER .)
    LLAVER          reduce using rule 41 (conllaves -> LLAVEL bodyblock LLAVER .)
    WHILE           reduce using rule 41 (conllaves -> LLAVEL bodyblock LLAVER .)
    INT             reduce using rule 41 (conllaves -> LLAVEL bodyblock LLAVER .)
    FLOAT           reduce using rule 41 (conllaves -> LLAVEL bodyblock LLAVER .)
    LONG            reduce using rule 41 (conllaves -> LLAVEL bodyblock LLAVER .)
    AUTO            reduce using rule 41 (conllaves -> LLAVEL bodyblock LLAVER .)
    CHAR            reduce using rule 41 (conllaves -> LLAVEL bodyblock LLAVER .)
    VOID            reduce using rule 41 (conllaves -> LLAVEL bodyblock LLAVER .)


state 89

    (34) elseif -> ELSE IF LPAR . condicionif RPAR conllaves else
    (35) elseif -> ELSE IF LPAR . condicionif RPAR sinllaves else
    (42) condicionif -> . initcondicion
    (43) condicionif -> . statement
    (44) initcondicion -> . varblock statement
    (45) statement -> . expresion
    (46) statement -> . EXCLAMACION boolean
    (47) statement -> . EXCLAMACION LPAR expresion RPAR
    (48) statement -> . EXCLAMACION IDENTIFICADOR
    (10) varblock -> . varblock variable
    (11) varblock -> .
    (28) expresion -> . expresion comparador expresion
    (51) expresion -> . valor
    (20) valor -> . ENTERO
    (21) valor -> . FLOTANTE
    (22) valor -> . CHARACTER
    (23) valor -> . STRING
    (24) valor -> . TRUE
    (25) valor -> . FALSE
    (26) valor -> . IDENTIFICADOR

  ! shift/reduce conflict for EXCLAMACION resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for FLOTANTE resolved as shift
  ! shift/reduce conflict for CHARACTER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for IDENTIFICADOR resolved as shift
    EXCLAMACION     shift and go to state 24
    INT             reduce using rule 11 (varblock -> .)
    FLOAT           reduce using rule 11 (varblock -> .)
    LONG            reduce using rule 11 (varblock -> .)
    AUTO            reduce using rule 11 (varblock -> .)
    CHAR            reduce using rule 11 (varblock -> .)
    VOID            reduce using rule 11 (varblock -> .)
    ENTERO          shift and go to state 27
    FLOTANTE        shift and go to state 28
    CHARACTER       shift and go to state 29
    STRING          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    IDENTIFICADOR   shift and go to state 25

  ! EXCLAMACION     [ reduce using rule 11 (varblock -> .) ]
  ! ENTERO          [ reduce using rule 11 (varblock -> .) ]
  ! FLOTANTE        [ reduce using rule 11 (varblock -> .) ]
  ! CHARACTER       [ reduce using rule 11 (varblock -> .) ]
  ! STRING          [ reduce using rule 11 (varblock -> .) ]
  ! TRUE            [ reduce using rule 11 (varblock -> .) ]
  ! FALSE           [ reduce using rule 11 (varblock -> .) ]
  ! IDENTIFICADOR   [ reduce using rule 11 (varblock -> .) ]

    condicionif                    shift and go to state 90
    initcondicion                  shift and go to state 34
    statement                      shift and go to state 35
    varblock                       shift and go to state 36
    expresion                      shift and go to state 23
    valor                          shift and go to state 26

state 90

    (34) elseif -> ELSE IF LPAR condicionif . RPAR conllaves else
    (35) elseif -> ELSE IF LPAR condicionif . RPAR sinllaves else

    RPAR            shift and go to state 91


state 91

    (34) elseif -> ELSE IF LPAR condicionif RPAR . conllaves else
    (35) elseif -> ELSE IF LPAR condicionif RPAR . sinllaves else
    (41) conllaves -> . LLAVEL bodyblock LLAVER
    (39) sinllaves -> . while
    (40) sinllaves -> . variable
    (27) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (12) variable -> . tipo IDENTIFICADOR IGUAL valor PUNTOCOMA
    (13) variable -> . tipo IDENTIFICADOR PUNTOCOMA
    (14) tipo -> . INT
    (15) tipo -> . FLOAT
    (16) tipo -> . LONG
    (17) tipo -> . AUTO
    (18) tipo -> . CHAR
    (19) tipo -> . VOID

    LLAVEL          shift and go to state 66
    WHILE           shift and go to state 7
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    LONG            shift and go to state 12
    AUTO            shift and go to state 13
    CHAR            shift and go to state 14
    VOID            shift and go to state 15

    conllaves                      shift and go to state 92
    sinllaves                      shift and go to state 93
    while                          shift and go to state 67
    variable                       shift and go to state 68
    tipo                           shift and go to state 6

state 92

    (34) elseif -> ELSE IF LPAR condicionif RPAR conllaves . else
    (37) else -> . ELSE conllaves
    (38) else -> . ELSE sinllaves

    ELSE            shift and go to state 94

    else                           shift and go to state 95

state 93

    (35) elseif -> ELSE IF LPAR condicionif RPAR sinllaves . else
    (37) else -> . ELSE conllaves
    (38) else -> . ELSE sinllaves

    ELSE            shift and go to state 94

    else                           shift and go to state 96

state 94

    (37) else -> ELSE . conllaves
    (38) else -> ELSE . sinllaves
    (41) conllaves -> . LLAVEL bodyblock LLAVER
    (39) sinllaves -> . while
    (40) sinllaves -> . variable
    (27) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (12) variable -> . tipo IDENTIFICADOR IGUAL valor PUNTOCOMA
    (13) variable -> . tipo IDENTIFICADOR PUNTOCOMA
    (14) tipo -> . INT
    (15) tipo -> . FLOAT
    (16) tipo -> . LONG
    (17) tipo -> . AUTO
    (18) tipo -> . CHAR
    (19) tipo -> . VOID

    LLAVEL          shift and go to state 66
    WHILE           shift and go to state 7
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    LONG            shift and go to state 12
    AUTO            shift and go to state 13
    CHAR            shift and go to state 14
    VOID            shift and go to state 15

    conllaves                      shift and go to state 85
    sinllaves                      shift and go to state 86
    while                          shift and go to state 67
    variable                       shift and go to state 68
    tipo                           shift and go to state 6

state 95

    (34) elseif -> ELSE IF LPAR condicionif RPAR conllaves else .

    $end            reduce using rule 34 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    LLAVER          reduce using rule 34 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    WHILE           reduce using rule 34 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    INT             reduce using rule 34 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    FLOAT           reduce using rule 34 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    LONG            reduce using rule 34 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    AUTO            reduce using rule 34 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    CHAR            reduce using rule 34 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    VOID            reduce using rule 34 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)


state 96

    (35) elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .

    $end            reduce using rule 35 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    LLAVER          reduce using rule 35 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    WHILE           reduce using rule 35 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    INT             reduce using rule 35 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    FLOAT           reduce using rule 35 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    LONG            reduce using rule 35 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    AUTO            reduce using rule 35 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    CHAR            reduce using rule 35 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    VOID            reduce using rule 35 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for EXCLAMACION in state 18 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 18 resolved as shift
WARNING: shift/reduce conflict for FLOTANTE in state 18 resolved as shift
WARNING: shift/reduce conflict for CHARACTER in state 18 resolved as shift
WARNING: shift/reduce conflict for STRING in state 18 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 18 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 18 resolved as shift
WARNING: shift/reduce conflict for IDENTIFICADOR in state 18 resolved as shift
WARNING: shift/reduce conflict for INT in state 37 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 37 resolved as shift
WARNING: shift/reduce conflict for LONG in state 37 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 37 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 37 resolved as shift
WARNING: shift/reduce conflict for VOID in state 37 resolved as shift
WARNING: shift/reduce conflict for IGUAL in state 58 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 58 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 58 resolved as shift
WARNING: shift/reduce conflict for EXCLAMACION in state 58 resolved as shift
WARNING: shift/reduce conflict for EXCLAMACION in state 89 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 89 resolved as shift
WARNING: shift/reduce conflict for FLOTANTE in state 89 resolved as shift
WARNING: shift/reduce conflict for CHARACTER in state 89 resolved as shift
WARNING: shift/reduce conflict for STRING in state 89 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 89 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 89 resolved as shift
WARNING: shift/reduce conflict for IDENTIFICADOR in state 89 resolved as shift
WARNING: reduce/reduce conflict in state 37 resolved using rule (bloqueclase -> <empty>)
WARNING: rejected rule (definicion -> <empty>) in state 37
WARNING: reduce/reduce conflict in state 64 resolved using rule (expresionpos -> <empty>)
WARNING: rejected rule (elseif -> <empty>) in state 64
WARNING: reduce/reduce conflict in state 65 resolved using rule (expresionpos -> <empty>)
WARNING: rejected rule (elseif -> <empty>) in state 65
WARNING: Rule (elseif -> <empty>) is never reduced
