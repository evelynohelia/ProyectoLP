Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    BACKSLASH
    BOOL
    CIRCUNFLEJO
    COMADOBLE
    COMASIMPLE
    COMENTARIO
    DOBLEPUNTO
    INTERROGACION
    NEW
    NULLPOINTER
    NUMERAL
    PIPE
    PORCENTAJE
    PRIVATE
    PROTECTED
    PUBLIC
    PUNTERO
    STATIC
    THEN
    VIRGUILA

Grammar

Rule 0     S' -> body
Rule 1     body -> variable
Rule 2     body -> while
Rule 3     body -> expresionif
Rule 4     body -> claseimplementacion
Rule 5     body -> for
Rule 6     body -> arraydeclaration
Rule 7     body -> funcionclaseimpl
Rule 8     body -> creacionobjeto
Rule 9     body -> asignarvalorobjeto
Rule 10    body -> usarfuncionobjeto
Rule 11    body -> struct
Rule 12    body -> <empty>
Rule 13    tipo -> INT
Rule 14    tipo -> FLOAT
Rule 15    tipo -> LONG
Rule 16    tipo -> AUTO
Rule 17    tipo -> CHAR
Rule 18    tipo -> VOID
Rule 19    imprimir -> PRINT LPAR valor RPAR
Rule 20    bodyblock -> bodyblock variable
Rule 21    bodyblock -> bodyblock while
Rule 22    bodyblock -> bodyblock expresionif
Rule 23    bodyblock -> bodyblock for
Rule 24    bodyblock -> <empty>
Rule 25    funcionblock -> bodyblock variable
Rule 26    funcionblock -> bodyblock while
Rule 27    funcionblock -> bodyblock expresionif
Rule 28    funcionblock -> bodyblock for
Rule 29    funcionblock -> RETURN statement
Rule 30    funcionblock -> <empty>
Rule 31    varblock -> varblock variable
Rule 32    varblock -> <empty>
Rule 33    variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA
Rule 34    variable -> AUTO IDENTIFICADOR PUNTOCOMA
Rule 35    variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA
Rule 36    variable -> numerotipo IDENTIFICADOR PUNTOCOMA
Rule 37    variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA
Rule 38    numerotipo -> INT
Rule 39    numerotipo -> FLOAT
Rule 40    numerotipo -> LONG
Rule 41    numero -> ENTERO
Rule 42    numero -> FLOTANTE
Rule 43    valor -> ENTERO
Rule 44    valor -> FLOTANTE
Rule 45    valor -> CHARACTER
Rule 46    valor -> STRING
Rule 47    valor -> TRUE
Rule 48    valor -> FALSE
Rule 49    valor -> IDENTIFICADOR
Rule 50    while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
Rule 51    expresion -> expresion comparador expresion
Rule 52    struct -> STRUCT IDENTIFICADOR LLAVEL varblock LLAVER IDENTIFICADOR PUNTOCOMA
Rule 53    expresionif -> IF LPAR condicionif RPAR conllaves expresionpos
Rule 54    expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos
Rule 55    expresionpos -> else
Rule 56    expresionpos -> elseif
Rule 57    expresionpos -> <empty>
Rule 58    elseif -> ELSE IF LPAR condicionif RPAR conllaves else
Rule 59    elseif -> ELSE IF LPAR condicionif RPAR sinllaves else
Rule 60    elseif -> <empty>
Rule 61    else -> ELSE conllaves
Rule 62    else -> ELSE sinllaves
Rule 63    sinllaves -> while
Rule 64    sinllaves -> variable
Rule 65    conllaves -> LLAVEL bodyblock LLAVER
Rule 66    condicionif -> initcondicion
Rule 67    condicionif -> statement
Rule 68    initcondicion -> varblock statement
Rule 69    statement -> expresion
Rule 70    statement -> EXCLAMACION boolean
Rule 71    statement -> EXCLAMACION LPAR expresion RPAR
Rule 72    statement -> EXCLAMACION IDENTIFICADOR
Rule 73    boolean -> TRUE
Rule 74    boolean -> FALSE
Rule 75    expresion -> valor
Rule 76    comparador -> IGUAL IGUAL
Rule 77    comparador -> MENOR
Rule 78    comparador -> MAYOR
Rule 79    comparador -> MENOR IGUAL
Rule 80    comparador -> MAYOR IGUAL
Rule 81    comparador -> EXCLAMACION IGUAL
Rule 82    initfor -> tipo IDENTIFICADOR IGUAL valor
Rule 83    condfor -> IDENTIFICADOR comparador valor
Rule 84    loopfor -> asign
Rule 85    loopfor -> unaryexp
Rule 86    asign -> IDENTIFICADOR MAS valor
Rule 87    asign -> IDENTIFICADOR MENOS valor
Rule 88    asign -> IDENTIFICADOR ASTERISCO valor
Rule 89    asign -> IDENTIFICADOR SLASH valor
Rule 90    unaryexp -> IDENTIFICADOR MAS MAS
Rule 91    unaryexp -> IDENTIFICADOR MENOS MENOS
Rule 92    for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER
Rule 93    arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER PUNTOCOMA
Rule 94    arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL LLAVEL arraydata LLAVER PUNTOCOMA
Rule 95    arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL LLAVEL LLAVER PUNTOCOMA
Rule 96    arraydata -> arraydata COMMA valor
Rule 97    arraydata -> valor
Rule 98    claseimplementacion -> CLASS IDENTIFICADOR LLAVEL bloqueclase LLAVER
Rule 99    bloqueclase -> bloqueclase definicion
Rule 100   bloqueclase -> bloqueclase funcionclaseimpl
Rule 101   bloqueclase -> <empty>
Rule 102   definicion -> tipo IDENTIFICADOR PUNTOCOMA
Rule 103   definicion -> <empty>
Rule 104   funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL funcionblock LLAVER
Rule 105   funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER
Rule 106   funcionclaseimpl -> <empty>
Rule 107   parametrosimplementacion -> tipo IDENTIFICADOR masparametrosimplementacion
Rule 108   parametrosimplementacion -> <empty>
Rule 109   parametrosfuncion -> IDENTIFICADOR masparametrosfuncion
Rule 110   parametrosfuncion -> <empty>
Rule 111   masparametrosimplementacion -> COMMA parametrosimplementacion
Rule 112   masparametrosimplementacion -> <empty>
Rule 113   masparametrosfuncion -> COMMA parametrosfuncion
Rule 114   masparametrosfuncion -> <empty>
Rule 115   creacionobjeto -> IDENTIFICADOR IDENTIFICADOR PUNTOCOMA
Rule 116   asignarvalorobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR IGUAL valor
Rule 117   asignarvalorobjeto -> LPAR expresion RPAR
Rule 118   asignarvalorobjeto -> LPAR statement RPAR
Rule 119   asignarvalorobjeto -> EXCLAMACION LPAR statement RPAR
Rule 120   usarfuncionobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR LPAR parametrosfuncion RPAR PUNTOCOMA

Terminals, with rules where they appear

AND                  : 
ASTERISCO            : 88
AUTO                 : 16 33 34
BACKSLASH            : 
BOOL                 : 
CHAR                 : 17 37
CHARACTER            : 37 45
CIRCUNFLEJO          : 
CLASS                : 98
COMADOBLE            : 
COMASIMPLE           : 
COMENTARIO           : 
COMMA                : 96 111 113
CORCHETEL            : 93 94 95
CORCHETER            : 93 94 95
DOBLEPUNTO           : 
ELSE                 : 58 59 61 62
ENTERO               : 41 43 93 94 95
EXCLAMACION          : 70 71 72 81 119
FALSE                : 48 74
FLOAT                : 14 39
FLOTANTE             : 42 44
FOR                  : 92
IDENTIFICADOR        : 33 34 35 36 37 49 52 52 72 82 83 86 87 88 89 90 91 93 94 95 98 102 104 105 107 109 115 115 116 116 120 120
IF                   : 53 54 58 59
IGUAL                : 33 35 37 76 76 79 80 81 82 94 95 116
INT                  : 13 38
INTERROGACION        : 
LLAVEL               : 50 52 65 92 94 95 98 104 105
LLAVER               : 50 52 65 92 94 95 98 104 105
LONG                 : 15 40
LPAR                 : 19 50 53 54 58 59 71 92 104 105 117 118 119 120
MAS                  : 86 90 90
MAYOR                : 78 80
MENOR                : 77 79
MENOS                : 87 91 91
NEW                  : 
NULLPOINTER          : 
NUMERAL              : 
PIPE                 : 
PORCENTAJE           : 
PRINT                : 19
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
PUNTERO              : 
PUNTO                : 116 120
PUNTOCOMA            : 33 34 35 36 37 52 92 92 93 94 95 102 115 120
RETURN               : 29
RPAR                 : 19 50 53 54 58 59 71 92 104 105 117 118 119 120
SLASH                : 89
STATIC               : 
STRING               : 46
STRUCT               : 52
THEN                 : 
TRUE                 : 47 73
VIRGUILA             : 
VOID                 : 18 105
WHILE                : 50
error                : 

Nonterminals, with rules where they appear

arraydata            : 94 96
arraydeclaration     : 6
asign                : 84
asignarvalorobjeto   : 9
bloqueclase          : 98 99 100
body                 : 0
bodyblock            : 20 21 22 23 25 26 27 28 50 65 92 105
boolean              : 70
claseimplementacion  : 4
comparador           : 51 83
condfor              : 92
condicionif          : 53 54 58 59
conllaves            : 53 58 61
creacionobjeto       : 8
definicion           : 99
else                 : 55 58 59
elseif               : 56
expresion            : 51 51 69 71 117
expresionif          : 3 22 27
expresionpos         : 53 54
for                  : 5 23 28
funcionblock         : 104
funcionclaseimpl     : 7 100
imprimir             : 
initcondicion        : 66
initfor              : 92
loopfor              : 92
masparametrosfuncion : 109
masparametrosimplementacion : 107
numero               : 35
numerotipo           : 35 36
parametrosfuncion    : 113 120
parametrosimplementacion : 104 105 111
sinllaves            : 54 59 62
statement            : 29 50 67 68 118 119
struct               : 11
tipo                 : 82 93 94 95 102 104 107
unaryexp             : 85
usarfuncionobjeto    : 10
valor                : 19 33 75 82 83 86 87 88 89 96 97 116
varblock             : 31 52 68
variable             : 1 20 25 31 64
while                : 2 21 26 63

Parsing method: LALR

state 0

    (0) S' -> . body
    (1) body -> . variable
    (2) body -> . while
    (3) body -> . expresionif
    (4) body -> . claseimplementacion
    (5) body -> . for
    (6) body -> . arraydeclaration
    (7) body -> . funcionclaseimpl
    (8) body -> . creacionobjeto
    (9) body -> . asignarvalorobjeto
    (10) body -> . usarfuncionobjeto
    (11) body -> . struct
    (12) body -> .
    (33) variable -> . AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA
    (34) variable -> . AUTO IDENTIFICADOR PUNTOCOMA
    (35) variable -> . numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA
    (36) variable -> . numerotipo IDENTIFICADOR PUNTOCOMA
    (37) variable -> . CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA
    (50) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (53) expresionif -> . IF LPAR condicionif RPAR conllaves expresionpos
    (54) expresionif -> . IF LPAR condicionif RPAR sinllaves expresionpos
    (98) claseimplementacion -> . CLASS IDENTIFICADOR LLAVEL bloqueclase LLAVER
    (92) for -> . FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER
    (93) arraydeclaration -> . tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER PUNTOCOMA
    (94) arraydeclaration -> . tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL LLAVEL arraydata LLAVER PUNTOCOMA
    (95) arraydeclaration -> . tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL LLAVEL LLAVER PUNTOCOMA
    (104) funcionclaseimpl -> . tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL funcionblock LLAVER
    (105) funcionclaseimpl -> . VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER
    (106) funcionclaseimpl -> .
    (115) creacionobjeto -> . IDENTIFICADOR IDENTIFICADOR PUNTOCOMA
    (116) asignarvalorobjeto -> . IDENTIFICADOR PUNTO IDENTIFICADOR IGUAL valor
    (117) asignarvalorobjeto -> . LPAR expresion RPAR
    (118) asignarvalorobjeto -> . LPAR statement RPAR
    (119) asignarvalorobjeto -> . EXCLAMACION LPAR statement RPAR
    (120) usarfuncionobjeto -> . IDENTIFICADOR PUNTO IDENTIFICADOR LPAR parametrosfuncion RPAR PUNTOCOMA
    (52) struct -> . STRUCT IDENTIFICADOR LLAVEL varblock LLAVER IDENTIFICADOR PUNTOCOMA
    (38) numerotipo -> . INT
    (39) numerotipo -> . FLOAT
    (40) numerotipo -> . LONG
    (13) tipo -> . INT
    (14) tipo -> . FLOAT
    (15) tipo -> . LONG
    (16) tipo -> . AUTO
    (17) tipo -> . CHAR
    (18) tipo -> . VOID

  ! reduce/reduce conflict for $end resolved using rule 12 (body -> .)
    $end            reduce using rule 12 (body -> .)
    AUTO            shift and go to state 13
    CHAR            shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 19
    CLASS           shift and go to state 20
    FOR             shift and go to state 21
    VOID            shift and go to state 23
    IDENTIFICADOR   shift and go to state 14
    LPAR            shift and go to state 18
    EXCLAMACION     shift and go to state 24
    STRUCT          shift and go to state 25
    INT             shift and go to state 26
    FLOAT           shift and go to state 27
    LONG            shift and go to state 28

  ! $end            [ reduce using rule 106 (funcionclaseimpl -> .) ]

    body                           shift and go to state 1
    variable                       shift and go to state 2
    while                          shift and go to state 3
    expresionif                    shift and go to state 4
    claseimplementacion            shift and go to state 5
    for                            shift and go to state 6
    arraydeclaration               shift and go to state 7
    funcionclaseimpl               shift and go to state 8
    creacionobjeto                 shift and go to state 9
    asignarvalorobjeto             shift and go to state 10
    usarfuncionobjeto              shift and go to state 11
    struct                         shift and go to state 12
    numerotipo                     shift and go to state 15
    tipo                           shift and go to state 22

state 1

    (0) S' -> body .



state 2

    (1) body -> variable .

    $end            reduce using rule 1 (body -> variable .)


state 3

    (2) body -> while .

    $end            reduce using rule 2 (body -> while .)


state 4

    (3) body -> expresionif .

    $end            reduce using rule 3 (body -> expresionif .)


state 5

    (4) body -> claseimplementacion .

    $end            reduce using rule 4 (body -> claseimplementacion .)


state 6

    (5) body -> for .

    $end            reduce using rule 5 (body -> for .)


state 7

    (6) body -> arraydeclaration .

    $end            reduce using rule 6 (body -> arraydeclaration .)


state 8

    (7) body -> funcionclaseimpl .

    $end            reduce using rule 7 (body -> funcionclaseimpl .)


state 9

    (8) body -> creacionobjeto .

    $end            reduce using rule 8 (body -> creacionobjeto .)


state 10

    (9) body -> asignarvalorobjeto .

    $end            reduce using rule 9 (body -> asignarvalorobjeto .)


state 11

    (10) body -> usarfuncionobjeto .

    $end            reduce using rule 10 (body -> usarfuncionobjeto .)


state 12

    (11) body -> struct .

    $end            reduce using rule 11 (body -> struct .)


state 13

    (33) variable -> AUTO . IDENTIFICADOR IGUAL valor PUNTOCOMA
    (34) variable -> AUTO . IDENTIFICADOR PUNTOCOMA
    (16) tipo -> AUTO .

  ! shift/reduce conflict for IDENTIFICADOR resolved as shift
    IDENTIFICADOR   shift and go to state 29

  ! IDENTIFICADOR   [ reduce using rule 16 (tipo -> AUTO .) ]


state 14

    (115) creacionobjeto -> IDENTIFICADOR . IDENTIFICADOR PUNTOCOMA
    (116) asignarvalorobjeto -> IDENTIFICADOR . PUNTO IDENTIFICADOR IGUAL valor
    (120) usarfuncionobjeto -> IDENTIFICADOR . PUNTO IDENTIFICADOR LPAR parametrosfuncion RPAR PUNTOCOMA

    IDENTIFICADOR   shift and go to state 30
    PUNTO           shift and go to state 31


state 15

    (35) variable -> numerotipo . IDENTIFICADOR IGUAL numero PUNTOCOMA
    (36) variable -> numerotipo . IDENTIFICADOR PUNTOCOMA

    IDENTIFICADOR   shift and go to state 32


state 16

    (37) variable -> CHAR . IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA
    (17) tipo -> CHAR .

  ! shift/reduce conflict for IDENTIFICADOR resolved as shift
    IDENTIFICADOR   shift and go to state 33

  ! IDENTIFICADOR   [ reduce using rule 17 (tipo -> CHAR .) ]


state 17

    (50) while -> WHILE . LPAR statement RPAR LLAVEL bodyblock LLAVER

    LPAR            shift and go to state 34


state 18

    (117) asignarvalorobjeto -> LPAR . expresion RPAR
    (118) asignarvalorobjeto -> LPAR . statement RPAR
    (51) expresion -> . expresion comparador expresion
    (75) expresion -> . valor
    (69) statement -> . expresion
    (70) statement -> . EXCLAMACION boolean
    (71) statement -> . EXCLAMACION LPAR expresion RPAR
    (72) statement -> . EXCLAMACION IDENTIFICADOR
    (43) valor -> . ENTERO
    (44) valor -> . FLOTANTE
    (45) valor -> . CHARACTER
    (46) valor -> . STRING
    (47) valor -> . TRUE
    (48) valor -> . FALSE
    (49) valor -> . IDENTIFICADOR

    EXCLAMACION     shift and go to state 38
    ENTERO          shift and go to state 40
    FLOTANTE        shift and go to state 41
    CHARACTER       shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    IDENTIFICADOR   shift and go to state 39

    expresion                      shift and go to state 35
    statement                      shift and go to state 36
    valor                          shift and go to state 37

state 19

    (53) expresionif -> IF . LPAR condicionif RPAR conllaves expresionpos
    (54) expresionif -> IF . LPAR condicionif RPAR sinllaves expresionpos

    LPAR            shift and go to state 46


state 20

    (98) claseimplementacion -> CLASS . IDENTIFICADOR LLAVEL bloqueclase LLAVER

    IDENTIFICADOR   shift and go to state 47


state 21

    (92) for -> FOR . LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER

    LPAR            shift and go to state 48


state 22

    (93) arraydeclaration -> tipo . IDENTIFICADOR CORCHETEL ENTERO CORCHETER PUNTOCOMA
    (94) arraydeclaration -> tipo . IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL LLAVEL arraydata LLAVER PUNTOCOMA
    (95) arraydeclaration -> tipo . IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL LLAVEL LLAVER PUNTOCOMA
    (104) funcionclaseimpl -> tipo . IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL funcionblock LLAVER

    IDENTIFICADOR   shift and go to state 49


state 23

    (105) funcionclaseimpl -> VOID . IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER
    (18) tipo -> VOID .

  ! shift/reduce conflict for IDENTIFICADOR resolved as shift
    IDENTIFICADOR   shift and go to state 50

  ! IDENTIFICADOR   [ reduce using rule 18 (tipo -> VOID .) ]


state 24

    (119) asignarvalorobjeto -> EXCLAMACION . LPAR statement RPAR

    LPAR            shift and go to state 51


state 25

    (52) struct -> STRUCT . IDENTIFICADOR LLAVEL varblock LLAVER IDENTIFICADOR PUNTOCOMA

    IDENTIFICADOR   shift and go to state 52


state 26

    (38) numerotipo -> INT .
    (13) tipo -> INT .

  ! reduce/reduce conflict for IDENTIFICADOR resolved using rule 13 (tipo -> INT .)
    IDENTIFICADOR   reduce using rule 13 (tipo -> INT .)

  ! IDENTIFICADOR   [ reduce using rule 38 (numerotipo -> INT .) ]


state 27

    (39) numerotipo -> FLOAT .
    (14) tipo -> FLOAT .

  ! reduce/reduce conflict for IDENTIFICADOR resolved using rule 14 (tipo -> FLOAT .)
    IDENTIFICADOR   reduce using rule 14 (tipo -> FLOAT .)

  ! IDENTIFICADOR   [ reduce using rule 39 (numerotipo -> FLOAT .) ]


state 28

    (40) numerotipo -> LONG .
    (15) tipo -> LONG .

  ! reduce/reduce conflict for IDENTIFICADOR resolved using rule 15 (tipo -> LONG .)
    IDENTIFICADOR   reduce using rule 15 (tipo -> LONG .)

  ! IDENTIFICADOR   [ reduce using rule 40 (numerotipo -> LONG .) ]


state 29

    (33) variable -> AUTO IDENTIFICADOR . IGUAL valor PUNTOCOMA
    (34) variable -> AUTO IDENTIFICADOR . PUNTOCOMA

    IGUAL           shift and go to state 53
    PUNTOCOMA       shift and go to state 54


state 30

    (115) creacionobjeto -> IDENTIFICADOR IDENTIFICADOR . PUNTOCOMA

    PUNTOCOMA       shift and go to state 55


state 31

    (116) asignarvalorobjeto -> IDENTIFICADOR PUNTO . IDENTIFICADOR IGUAL valor
    (120) usarfuncionobjeto -> IDENTIFICADOR PUNTO . IDENTIFICADOR LPAR parametrosfuncion RPAR PUNTOCOMA

    IDENTIFICADOR   shift and go to state 56


state 32

    (35) variable -> numerotipo IDENTIFICADOR . IGUAL numero PUNTOCOMA
    (36) variable -> numerotipo IDENTIFICADOR . PUNTOCOMA

    IGUAL           shift and go to state 57
    PUNTOCOMA       shift and go to state 58


state 33

    (37) variable -> CHAR IDENTIFICADOR . IGUAL CHARACTER PUNTOCOMA

    IGUAL           shift and go to state 59


state 34

    (50) while -> WHILE LPAR . statement RPAR LLAVEL bodyblock LLAVER
    (69) statement -> . expresion
    (70) statement -> . EXCLAMACION boolean
    (71) statement -> . EXCLAMACION LPAR expresion RPAR
    (72) statement -> . EXCLAMACION IDENTIFICADOR
    (51) expresion -> . expresion comparador expresion
    (75) expresion -> . valor
    (43) valor -> . ENTERO
    (44) valor -> . FLOTANTE
    (45) valor -> . CHARACTER
    (46) valor -> . STRING
    (47) valor -> . TRUE
    (48) valor -> . FALSE
    (49) valor -> . IDENTIFICADOR

    EXCLAMACION     shift and go to state 38
    ENTERO          shift and go to state 40
    FLOTANTE        shift and go to state 41
    CHARACTER       shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    IDENTIFICADOR   shift and go to state 39

    statement                      shift and go to state 60
    expresion                      shift and go to state 61
    valor                          shift and go to state 37

state 35

    (117) asignarvalorobjeto -> LPAR expresion . RPAR
    (51) expresion -> expresion . comparador expresion
    (69) statement -> expresion .
    (76) comparador -> . IGUAL IGUAL
    (77) comparador -> . MENOR
    (78) comparador -> . MAYOR
    (79) comparador -> . MENOR IGUAL
    (80) comparador -> . MAYOR IGUAL
    (81) comparador -> . EXCLAMACION IGUAL

  ! shift/reduce conflict for RPAR resolved as shift
    RPAR            shift and go to state 62
    IGUAL           shift and go to state 64
    MENOR           shift and go to state 65
    MAYOR           shift and go to state 66
    EXCLAMACION     shift and go to state 67

  ! RPAR            [ reduce using rule 69 (statement -> expresion .) ]

    comparador                     shift and go to state 63

state 36

    (118) asignarvalorobjeto -> LPAR statement . RPAR

    RPAR            shift and go to state 68


state 37

    (75) expresion -> valor .

    RPAR            reduce using rule 75 (expresion -> valor .)
    IGUAL           reduce using rule 75 (expresion -> valor .)
    MENOR           reduce using rule 75 (expresion -> valor .)
    MAYOR           reduce using rule 75 (expresion -> valor .)
    EXCLAMACION     reduce using rule 75 (expresion -> valor .)
    LLAVER          reduce using rule 75 (expresion -> valor .)


state 38

    (70) statement -> EXCLAMACION . boolean
    (71) statement -> EXCLAMACION . LPAR expresion RPAR
    (72) statement -> EXCLAMACION . IDENTIFICADOR
    (73) boolean -> . TRUE
    (74) boolean -> . FALSE

    LPAR            shift and go to state 70
    IDENTIFICADOR   shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73

    boolean                        shift and go to state 69

state 39

    (49) valor -> IDENTIFICADOR .

    RPAR            reduce using rule 49 (valor -> IDENTIFICADOR .)
    IGUAL           reduce using rule 49 (valor -> IDENTIFICADOR .)
    MENOR           reduce using rule 49 (valor -> IDENTIFICADOR .)
    MAYOR           reduce using rule 49 (valor -> IDENTIFICADOR .)
    EXCLAMACION     reduce using rule 49 (valor -> IDENTIFICADOR .)
    PUNTOCOMA       reduce using rule 49 (valor -> IDENTIFICADOR .)
    LLAVER          reduce using rule 49 (valor -> IDENTIFICADOR .)
    $end            reduce using rule 49 (valor -> IDENTIFICADOR .)
    COMMA           reduce using rule 49 (valor -> IDENTIFICADOR .)


state 40

    (43) valor -> ENTERO .

    RPAR            reduce using rule 43 (valor -> ENTERO .)
    IGUAL           reduce using rule 43 (valor -> ENTERO .)
    MENOR           reduce using rule 43 (valor -> ENTERO .)
    MAYOR           reduce using rule 43 (valor -> ENTERO .)
    EXCLAMACION     reduce using rule 43 (valor -> ENTERO .)
    PUNTOCOMA       reduce using rule 43 (valor -> ENTERO .)
    LLAVER          reduce using rule 43 (valor -> ENTERO .)
    $end            reduce using rule 43 (valor -> ENTERO .)
    COMMA           reduce using rule 43 (valor -> ENTERO .)


state 41

    (44) valor -> FLOTANTE .

    RPAR            reduce using rule 44 (valor -> FLOTANTE .)
    IGUAL           reduce using rule 44 (valor -> FLOTANTE .)
    MENOR           reduce using rule 44 (valor -> FLOTANTE .)
    MAYOR           reduce using rule 44 (valor -> FLOTANTE .)
    EXCLAMACION     reduce using rule 44 (valor -> FLOTANTE .)
    PUNTOCOMA       reduce using rule 44 (valor -> FLOTANTE .)
    LLAVER          reduce using rule 44 (valor -> FLOTANTE .)
    $end            reduce using rule 44 (valor -> FLOTANTE .)
    COMMA           reduce using rule 44 (valor -> FLOTANTE .)


state 42

    (45) valor -> CHARACTER .

    RPAR            reduce using rule 45 (valor -> CHARACTER .)
    IGUAL           reduce using rule 45 (valor -> CHARACTER .)
    MENOR           reduce using rule 45 (valor -> CHARACTER .)
    MAYOR           reduce using rule 45 (valor -> CHARACTER .)
    EXCLAMACION     reduce using rule 45 (valor -> CHARACTER .)
    PUNTOCOMA       reduce using rule 45 (valor -> CHARACTER .)
    LLAVER          reduce using rule 45 (valor -> CHARACTER .)
    $end            reduce using rule 45 (valor -> CHARACTER .)
    COMMA           reduce using rule 45 (valor -> CHARACTER .)


state 43

    (46) valor -> STRING .

    RPAR            reduce using rule 46 (valor -> STRING .)
    IGUAL           reduce using rule 46 (valor -> STRING .)
    MENOR           reduce using rule 46 (valor -> STRING .)
    MAYOR           reduce using rule 46 (valor -> STRING .)
    EXCLAMACION     reduce using rule 46 (valor -> STRING .)
    PUNTOCOMA       reduce using rule 46 (valor -> STRING .)
    LLAVER          reduce using rule 46 (valor -> STRING .)
    $end            reduce using rule 46 (valor -> STRING .)
    COMMA           reduce using rule 46 (valor -> STRING .)


state 44

    (47) valor -> TRUE .

    RPAR            reduce using rule 47 (valor -> TRUE .)
    IGUAL           reduce using rule 47 (valor -> TRUE .)
    MENOR           reduce using rule 47 (valor -> TRUE .)
    MAYOR           reduce using rule 47 (valor -> TRUE .)
    EXCLAMACION     reduce using rule 47 (valor -> TRUE .)
    PUNTOCOMA       reduce using rule 47 (valor -> TRUE .)
    LLAVER          reduce using rule 47 (valor -> TRUE .)
    $end            reduce using rule 47 (valor -> TRUE .)
    COMMA           reduce using rule 47 (valor -> TRUE .)


state 45

    (48) valor -> FALSE .

    RPAR            reduce using rule 48 (valor -> FALSE .)
    IGUAL           reduce using rule 48 (valor -> FALSE .)
    MENOR           reduce using rule 48 (valor -> FALSE .)
    MAYOR           reduce using rule 48 (valor -> FALSE .)
    EXCLAMACION     reduce using rule 48 (valor -> FALSE .)
    PUNTOCOMA       reduce using rule 48 (valor -> FALSE .)
    LLAVER          reduce using rule 48 (valor -> FALSE .)
    $end            reduce using rule 48 (valor -> FALSE .)
    COMMA           reduce using rule 48 (valor -> FALSE .)


state 46

    (53) expresionif -> IF LPAR . condicionif RPAR conllaves expresionpos
    (54) expresionif -> IF LPAR . condicionif RPAR sinllaves expresionpos
    (66) condicionif -> . initcondicion
    (67) condicionif -> . statement
    (68) initcondicion -> . varblock statement
    (69) statement -> . expresion
    (70) statement -> . EXCLAMACION boolean
    (71) statement -> . EXCLAMACION LPAR expresion RPAR
    (72) statement -> . EXCLAMACION IDENTIFICADOR
    (31) varblock -> . varblock variable
    (32) varblock -> .
    (51) expresion -> . expresion comparador expresion
    (75) expresion -> . valor
    (43) valor -> . ENTERO
    (44) valor -> . FLOTANTE
    (45) valor -> . CHARACTER
    (46) valor -> . STRING
    (47) valor -> . TRUE
    (48) valor -> . FALSE
    (49) valor -> . IDENTIFICADOR

  ! shift/reduce conflict for EXCLAMACION resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for FLOTANTE resolved as shift
  ! shift/reduce conflict for CHARACTER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for IDENTIFICADOR resolved as shift
    EXCLAMACION     shift and go to state 38
    AUTO            reduce using rule 32 (varblock -> .)
    CHAR            reduce using rule 32 (varblock -> .)
    INT             reduce using rule 32 (varblock -> .)
    FLOAT           reduce using rule 32 (varblock -> .)
    LONG            reduce using rule 32 (varblock -> .)
    ENTERO          shift and go to state 40
    FLOTANTE        shift and go to state 41
    CHARACTER       shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    IDENTIFICADOR   shift and go to state 39

  ! EXCLAMACION     [ reduce using rule 32 (varblock -> .) ]
  ! ENTERO          [ reduce using rule 32 (varblock -> .) ]
  ! FLOTANTE        [ reduce using rule 32 (varblock -> .) ]
  ! CHARACTER       [ reduce using rule 32 (varblock -> .) ]
  ! STRING          [ reduce using rule 32 (varblock -> .) ]
  ! TRUE            [ reduce using rule 32 (varblock -> .) ]
  ! FALSE           [ reduce using rule 32 (varblock -> .) ]
  ! IDENTIFICADOR   [ reduce using rule 32 (varblock -> .) ]

    condicionif                    shift and go to state 74
    initcondicion                  shift and go to state 75
    statement                      shift and go to state 76
    varblock                       shift and go to state 77
    expresion                      shift and go to state 61
    valor                          shift and go to state 37

state 47

    (98) claseimplementacion -> CLASS IDENTIFICADOR . LLAVEL bloqueclase LLAVER

    LLAVEL          shift and go to state 78


state 48

    (92) for -> FOR LPAR . initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER
    (82) initfor -> . tipo IDENTIFICADOR IGUAL valor
    (13) tipo -> . INT
    (14) tipo -> . FLOAT
    (15) tipo -> . LONG
    (16) tipo -> . AUTO
    (17) tipo -> . CHAR
    (18) tipo -> . VOID

    INT             shift and go to state 81
    FLOAT           shift and go to state 82
    LONG            shift and go to state 83
    AUTO            shift and go to state 84
    CHAR            shift and go to state 85
    VOID            shift and go to state 86

    initfor                        shift and go to state 79
    tipo                           shift and go to state 80

state 49

    (93) arraydeclaration -> tipo IDENTIFICADOR . CORCHETEL ENTERO CORCHETER PUNTOCOMA
    (94) arraydeclaration -> tipo IDENTIFICADOR . CORCHETEL ENTERO CORCHETER IGUAL LLAVEL arraydata LLAVER PUNTOCOMA
    (95) arraydeclaration -> tipo IDENTIFICADOR . CORCHETEL ENTERO CORCHETER IGUAL LLAVEL LLAVER PUNTOCOMA
    (104) funcionclaseimpl -> tipo IDENTIFICADOR . LPAR parametrosimplementacion RPAR LLAVEL funcionblock LLAVER

    CORCHETEL       shift and go to state 87
    LPAR            shift and go to state 88


state 50

    (105) funcionclaseimpl -> VOID IDENTIFICADOR . LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER

    LPAR            shift and go to state 89


state 51

    (119) asignarvalorobjeto -> EXCLAMACION LPAR . statement RPAR
    (69) statement -> . expresion
    (70) statement -> . EXCLAMACION boolean
    (71) statement -> . EXCLAMACION LPAR expresion RPAR
    (72) statement -> . EXCLAMACION IDENTIFICADOR
    (51) expresion -> . expresion comparador expresion
    (75) expresion -> . valor
    (43) valor -> . ENTERO
    (44) valor -> . FLOTANTE
    (45) valor -> . CHARACTER
    (46) valor -> . STRING
    (47) valor -> . TRUE
    (48) valor -> . FALSE
    (49) valor -> . IDENTIFICADOR

    EXCLAMACION     shift and go to state 38
    ENTERO          shift and go to state 40
    FLOTANTE        shift and go to state 41
    CHARACTER       shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    IDENTIFICADOR   shift and go to state 39

    statement                      shift and go to state 90
    expresion                      shift and go to state 61
    valor                          shift and go to state 37

state 52

    (52) struct -> STRUCT IDENTIFICADOR . LLAVEL varblock LLAVER IDENTIFICADOR PUNTOCOMA

    LLAVEL          shift and go to state 91


state 53

    (33) variable -> AUTO IDENTIFICADOR IGUAL . valor PUNTOCOMA
    (43) valor -> . ENTERO
    (44) valor -> . FLOTANTE
    (45) valor -> . CHARACTER
    (46) valor -> . STRING
    (47) valor -> . TRUE
    (48) valor -> . FALSE
    (49) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 40
    FLOTANTE        shift and go to state 41
    CHARACTER       shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    IDENTIFICADOR   shift and go to state 39

    valor                          shift and go to state 92

state 54

    (34) variable -> AUTO IDENTIFICADOR PUNTOCOMA .

    $end            reduce using rule 34 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    EXCLAMACION     reduce using rule 34 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    AUTO            reduce using rule 34 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    CHAR            reduce using rule 34 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    INT             reduce using rule 34 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    FLOAT           reduce using rule 34 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    LONG            reduce using rule 34 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    ENTERO          reduce using rule 34 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    FLOTANTE        reduce using rule 34 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    CHARACTER       reduce using rule 34 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    STRING          reduce using rule 34 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    TRUE            reduce using rule 34 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    FALSE           reduce using rule 34 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    IDENTIFICADOR   reduce using rule 34 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    ELSE            reduce using rule 34 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    LLAVER          reduce using rule 34 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    WHILE           reduce using rule 34 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    IF              reduce using rule 34 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)
    FOR             reduce using rule 34 (variable -> AUTO IDENTIFICADOR PUNTOCOMA .)


state 55

    (115) creacionobjeto -> IDENTIFICADOR IDENTIFICADOR PUNTOCOMA .

    $end            reduce using rule 115 (creacionobjeto -> IDENTIFICADOR IDENTIFICADOR PUNTOCOMA .)


state 56

    (116) asignarvalorobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR . IGUAL valor
    (120) usarfuncionobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR . LPAR parametrosfuncion RPAR PUNTOCOMA

    IGUAL           shift and go to state 93
    LPAR            shift and go to state 94


state 57

    (35) variable -> numerotipo IDENTIFICADOR IGUAL . numero PUNTOCOMA
    (41) numero -> . ENTERO
    (42) numero -> . FLOTANTE

    ENTERO          shift and go to state 96
    FLOTANTE        shift and go to state 97

    numero                         shift and go to state 95

state 58

    (36) variable -> numerotipo IDENTIFICADOR PUNTOCOMA .

    $end            reduce using rule 36 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    EXCLAMACION     reduce using rule 36 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    AUTO            reduce using rule 36 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    CHAR            reduce using rule 36 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    INT             reduce using rule 36 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    FLOAT           reduce using rule 36 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    LONG            reduce using rule 36 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    ENTERO          reduce using rule 36 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    FLOTANTE        reduce using rule 36 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    CHARACTER       reduce using rule 36 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    STRING          reduce using rule 36 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    TRUE            reduce using rule 36 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    FALSE           reduce using rule 36 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    IDENTIFICADOR   reduce using rule 36 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    ELSE            reduce using rule 36 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    LLAVER          reduce using rule 36 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    WHILE           reduce using rule 36 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    IF              reduce using rule 36 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)
    FOR             reduce using rule 36 (variable -> numerotipo IDENTIFICADOR PUNTOCOMA .)


state 59

    (37) variable -> CHAR IDENTIFICADOR IGUAL . CHARACTER PUNTOCOMA

    CHARACTER       shift and go to state 98


state 60

    (50) while -> WHILE LPAR statement . RPAR LLAVEL bodyblock LLAVER

    RPAR            shift and go to state 99


state 61

    (69) statement -> expresion .
    (51) expresion -> expresion . comparador expresion
    (76) comparador -> . IGUAL IGUAL
    (77) comparador -> . MENOR
    (78) comparador -> . MAYOR
    (79) comparador -> . MENOR IGUAL
    (80) comparador -> . MAYOR IGUAL
    (81) comparador -> . EXCLAMACION IGUAL

    RPAR            reduce using rule 69 (statement -> expresion .)
    LLAVER          reduce using rule 69 (statement -> expresion .)
    IGUAL           shift and go to state 64
    MENOR           shift and go to state 65
    MAYOR           shift and go to state 66
    EXCLAMACION     shift and go to state 67

    comparador                     shift and go to state 63

state 62

    (117) asignarvalorobjeto -> LPAR expresion RPAR .

    $end            reduce using rule 117 (asignarvalorobjeto -> LPAR expresion RPAR .)


state 63

    (51) expresion -> expresion comparador . expresion
    (51) expresion -> . expresion comparador expresion
    (75) expresion -> . valor
    (43) valor -> . ENTERO
    (44) valor -> . FLOTANTE
    (45) valor -> . CHARACTER
    (46) valor -> . STRING
    (47) valor -> . TRUE
    (48) valor -> . FALSE
    (49) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 40
    FLOTANTE        shift and go to state 41
    CHARACTER       shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    IDENTIFICADOR   shift and go to state 39

    expresion                      shift and go to state 100
    valor                          shift and go to state 37

state 64

    (76) comparador -> IGUAL . IGUAL

    IGUAL           shift and go to state 101


state 65

    (77) comparador -> MENOR .
    (79) comparador -> MENOR . IGUAL

    ENTERO          reduce using rule 77 (comparador -> MENOR .)
    FLOTANTE        reduce using rule 77 (comparador -> MENOR .)
    CHARACTER       reduce using rule 77 (comparador -> MENOR .)
    STRING          reduce using rule 77 (comparador -> MENOR .)
    TRUE            reduce using rule 77 (comparador -> MENOR .)
    FALSE           reduce using rule 77 (comparador -> MENOR .)
    IDENTIFICADOR   reduce using rule 77 (comparador -> MENOR .)
    IGUAL           shift and go to state 102


state 66

    (78) comparador -> MAYOR .
    (80) comparador -> MAYOR . IGUAL

    ENTERO          reduce using rule 78 (comparador -> MAYOR .)
    FLOTANTE        reduce using rule 78 (comparador -> MAYOR .)
    CHARACTER       reduce using rule 78 (comparador -> MAYOR .)
    STRING          reduce using rule 78 (comparador -> MAYOR .)
    TRUE            reduce using rule 78 (comparador -> MAYOR .)
    FALSE           reduce using rule 78 (comparador -> MAYOR .)
    IDENTIFICADOR   reduce using rule 78 (comparador -> MAYOR .)
    IGUAL           shift and go to state 103


state 67

    (81) comparador -> EXCLAMACION . IGUAL

    IGUAL           shift and go to state 104


state 68

    (118) asignarvalorobjeto -> LPAR statement RPAR .

    $end            reduce using rule 118 (asignarvalorobjeto -> LPAR statement RPAR .)


state 69

    (70) statement -> EXCLAMACION boolean .

    RPAR            reduce using rule 70 (statement -> EXCLAMACION boolean .)
    LLAVER          reduce using rule 70 (statement -> EXCLAMACION boolean .)


state 70

    (71) statement -> EXCLAMACION LPAR . expresion RPAR
    (51) expresion -> . expresion comparador expresion
    (75) expresion -> . valor
    (43) valor -> . ENTERO
    (44) valor -> . FLOTANTE
    (45) valor -> . CHARACTER
    (46) valor -> . STRING
    (47) valor -> . TRUE
    (48) valor -> . FALSE
    (49) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 40
    FLOTANTE        shift and go to state 41
    CHARACTER       shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    IDENTIFICADOR   shift and go to state 39

    expresion                      shift and go to state 105
    valor                          shift and go to state 37

state 71

    (72) statement -> EXCLAMACION IDENTIFICADOR .

    RPAR            reduce using rule 72 (statement -> EXCLAMACION IDENTIFICADOR .)
    LLAVER          reduce using rule 72 (statement -> EXCLAMACION IDENTIFICADOR .)


state 72

    (73) boolean -> TRUE .

    RPAR            reduce using rule 73 (boolean -> TRUE .)
    LLAVER          reduce using rule 73 (boolean -> TRUE .)


state 73

    (74) boolean -> FALSE .

    RPAR            reduce using rule 74 (boolean -> FALSE .)
    LLAVER          reduce using rule 74 (boolean -> FALSE .)


state 74

    (53) expresionif -> IF LPAR condicionif . RPAR conllaves expresionpos
    (54) expresionif -> IF LPAR condicionif . RPAR sinllaves expresionpos

    RPAR            shift and go to state 106


state 75

    (66) condicionif -> initcondicion .

    RPAR            reduce using rule 66 (condicionif -> initcondicion .)


state 76

    (67) condicionif -> statement .

    RPAR            reduce using rule 67 (condicionif -> statement .)


state 77

    (68) initcondicion -> varblock . statement
    (31) varblock -> varblock . variable
    (69) statement -> . expresion
    (70) statement -> . EXCLAMACION boolean
    (71) statement -> . EXCLAMACION LPAR expresion RPAR
    (72) statement -> . EXCLAMACION IDENTIFICADOR
    (33) variable -> . AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA
    (34) variable -> . AUTO IDENTIFICADOR PUNTOCOMA
    (35) variable -> . numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA
    (36) variable -> . numerotipo IDENTIFICADOR PUNTOCOMA
    (37) variable -> . CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA
    (51) expresion -> . expresion comparador expresion
    (75) expresion -> . valor
    (38) numerotipo -> . INT
    (39) numerotipo -> . FLOAT
    (40) numerotipo -> . LONG
    (43) valor -> . ENTERO
    (44) valor -> . FLOTANTE
    (45) valor -> . CHARACTER
    (46) valor -> . STRING
    (47) valor -> . TRUE
    (48) valor -> . FALSE
    (49) valor -> . IDENTIFICADOR

    EXCLAMACION     shift and go to state 38
    AUTO            shift and go to state 109
    CHAR            shift and go to state 110
    INT             shift and go to state 111
    FLOAT           shift and go to state 112
    LONG            shift and go to state 113
    ENTERO          shift and go to state 40
    FLOTANTE        shift and go to state 41
    CHARACTER       shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    IDENTIFICADOR   shift and go to state 39

    statement                      shift and go to state 107
    variable                       shift and go to state 108
    expresion                      shift and go to state 61
    valor                          shift and go to state 37
    numerotipo                     shift and go to state 15

state 78

    (98) claseimplementacion -> CLASS IDENTIFICADOR LLAVEL . bloqueclase LLAVER
    (99) bloqueclase -> . bloqueclase definicion
    (100) bloqueclase -> . bloqueclase funcionclaseimpl
    (101) bloqueclase -> .

    LLAVER          reduce using rule 101 (bloqueclase -> .)
    VOID            reduce using rule 101 (bloqueclase -> .)
    INT             reduce using rule 101 (bloqueclase -> .)
    FLOAT           reduce using rule 101 (bloqueclase -> .)
    LONG            reduce using rule 101 (bloqueclase -> .)
    AUTO            reduce using rule 101 (bloqueclase -> .)
    CHAR            reduce using rule 101 (bloqueclase -> .)

    bloqueclase                    shift and go to state 114

state 79

    (92) for -> FOR LPAR initfor . PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER

    PUNTOCOMA       shift and go to state 115


state 80

    (82) initfor -> tipo . IDENTIFICADOR IGUAL valor

    IDENTIFICADOR   shift and go to state 116


state 81

    (13) tipo -> INT .

    IDENTIFICADOR   reduce using rule 13 (tipo -> INT .)


state 82

    (14) tipo -> FLOAT .

    IDENTIFICADOR   reduce using rule 14 (tipo -> FLOAT .)


state 83

    (15) tipo -> LONG .

    IDENTIFICADOR   reduce using rule 15 (tipo -> LONG .)


state 84

    (16) tipo -> AUTO .

    IDENTIFICADOR   reduce using rule 16 (tipo -> AUTO .)


state 85

    (17) tipo -> CHAR .

    IDENTIFICADOR   reduce using rule 17 (tipo -> CHAR .)


state 86

    (18) tipo -> VOID .

    IDENTIFICADOR   reduce using rule 18 (tipo -> VOID .)


state 87

    (93) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL . ENTERO CORCHETER PUNTOCOMA
    (94) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL . ENTERO CORCHETER IGUAL LLAVEL arraydata LLAVER PUNTOCOMA
    (95) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL . ENTERO CORCHETER IGUAL LLAVEL LLAVER PUNTOCOMA

    ENTERO          shift and go to state 117


state 88

    (104) funcionclaseimpl -> tipo IDENTIFICADOR LPAR . parametrosimplementacion RPAR LLAVEL funcionblock LLAVER
    (107) parametrosimplementacion -> . tipo IDENTIFICADOR masparametrosimplementacion
    (108) parametrosimplementacion -> .
    (13) tipo -> . INT
    (14) tipo -> . FLOAT
    (15) tipo -> . LONG
    (16) tipo -> . AUTO
    (17) tipo -> . CHAR
    (18) tipo -> . VOID

    RPAR            reduce using rule 108 (parametrosimplementacion -> .)
    INT             shift and go to state 81
    FLOAT           shift and go to state 82
    LONG            shift and go to state 83
    AUTO            shift and go to state 84
    CHAR            shift and go to state 85
    VOID            shift and go to state 86

    tipo                           shift and go to state 118
    parametrosimplementacion       shift and go to state 119

state 89

    (105) funcionclaseimpl -> VOID IDENTIFICADOR LPAR . parametrosimplementacion RPAR LLAVEL bodyblock LLAVER
    (107) parametrosimplementacion -> . tipo IDENTIFICADOR masparametrosimplementacion
    (108) parametrosimplementacion -> .
    (13) tipo -> . INT
    (14) tipo -> . FLOAT
    (15) tipo -> . LONG
    (16) tipo -> . AUTO
    (17) tipo -> . CHAR
    (18) tipo -> . VOID

    RPAR            reduce using rule 108 (parametrosimplementacion -> .)
    INT             shift and go to state 81
    FLOAT           shift and go to state 82
    LONG            shift and go to state 83
    AUTO            shift and go to state 84
    CHAR            shift and go to state 85
    VOID            shift and go to state 86

    parametrosimplementacion       shift and go to state 120
    tipo                           shift and go to state 118

state 90

    (119) asignarvalorobjeto -> EXCLAMACION LPAR statement . RPAR

    RPAR            shift and go to state 121


state 91

    (52) struct -> STRUCT IDENTIFICADOR LLAVEL . varblock LLAVER IDENTIFICADOR PUNTOCOMA
    (31) varblock -> . varblock variable
    (32) varblock -> .

    LLAVER          reduce using rule 32 (varblock -> .)
    AUTO            reduce using rule 32 (varblock -> .)
    CHAR            reduce using rule 32 (varblock -> .)
    INT             reduce using rule 32 (varblock -> .)
    FLOAT           reduce using rule 32 (varblock -> .)
    LONG            reduce using rule 32 (varblock -> .)

    varblock                       shift and go to state 122

state 92

    (33) variable -> AUTO IDENTIFICADOR IGUAL valor . PUNTOCOMA

    PUNTOCOMA       shift and go to state 123


state 93

    (116) asignarvalorobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR IGUAL . valor
    (43) valor -> . ENTERO
    (44) valor -> . FLOTANTE
    (45) valor -> . CHARACTER
    (46) valor -> . STRING
    (47) valor -> . TRUE
    (48) valor -> . FALSE
    (49) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 40
    FLOTANTE        shift and go to state 41
    CHARACTER       shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    IDENTIFICADOR   shift and go to state 39

    valor                          shift and go to state 124

state 94

    (120) usarfuncionobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR LPAR . parametrosfuncion RPAR PUNTOCOMA
    (109) parametrosfuncion -> . IDENTIFICADOR masparametrosfuncion
    (110) parametrosfuncion -> .

    IDENTIFICADOR   shift and go to state 125
    RPAR            reduce using rule 110 (parametrosfuncion -> .)

    parametrosfuncion              shift and go to state 126

state 95

    (35) variable -> numerotipo IDENTIFICADOR IGUAL numero . PUNTOCOMA

    PUNTOCOMA       shift and go to state 127


state 96

    (41) numero -> ENTERO .

    PUNTOCOMA       reduce using rule 41 (numero -> ENTERO .)


state 97

    (42) numero -> FLOTANTE .

    PUNTOCOMA       reduce using rule 42 (numero -> FLOTANTE .)


state 98

    (37) variable -> CHAR IDENTIFICADOR IGUAL CHARACTER . PUNTOCOMA

    PUNTOCOMA       shift and go to state 128


state 99

    (50) while -> WHILE LPAR statement RPAR . LLAVEL bodyblock LLAVER

    LLAVEL          shift and go to state 129


state 100

    (51) expresion -> expresion comparador expresion .
    (51) expresion -> expresion . comparador expresion
    (76) comparador -> . IGUAL IGUAL
    (77) comparador -> . MENOR
    (78) comparador -> . MAYOR
    (79) comparador -> . MENOR IGUAL
    (80) comparador -> . MAYOR IGUAL
    (81) comparador -> . EXCLAMACION IGUAL

  ! shift/reduce conflict for IGUAL resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for EXCLAMACION resolved as shift
    RPAR            reduce using rule 51 (expresion -> expresion comparador expresion .)
    LLAVER          reduce using rule 51 (expresion -> expresion comparador expresion .)
    IGUAL           shift and go to state 64
    MENOR           shift and go to state 65
    MAYOR           shift and go to state 66
    EXCLAMACION     shift and go to state 67

  ! IGUAL           [ reduce using rule 51 (expresion -> expresion comparador expresion .) ]
  ! MENOR           [ reduce using rule 51 (expresion -> expresion comparador expresion .) ]
  ! MAYOR           [ reduce using rule 51 (expresion -> expresion comparador expresion .) ]
  ! EXCLAMACION     [ reduce using rule 51 (expresion -> expresion comparador expresion .) ]

    comparador                     shift and go to state 63

state 101

    (76) comparador -> IGUAL IGUAL .

    ENTERO          reduce using rule 76 (comparador -> IGUAL IGUAL .)
    FLOTANTE        reduce using rule 76 (comparador -> IGUAL IGUAL .)
    CHARACTER       reduce using rule 76 (comparador -> IGUAL IGUAL .)
    STRING          reduce using rule 76 (comparador -> IGUAL IGUAL .)
    TRUE            reduce using rule 76 (comparador -> IGUAL IGUAL .)
    FALSE           reduce using rule 76 (comparador -> IGUAL IGUAL .)
    IDENTIFICADOR   reduce using rule 76 (comparador -> IGUAL IGUAL .)


state 102

    (79) comparador -> MENOR IGUAL .

    ENTERO          reduce using rule 79 (comparador -> MENOR IGUAL .)
    FLOTANTE        reduce using rule 79 (comparador -> MENOR IGUAL .)
    CHARACTER       reduce using rule 79 (comparador -> MENOR IGUAL .)
    STRING          reduce using rule 79 (comparador -> MENOR IGUAL .)
    TRUE            reduce using rule 79 (comparador -> MENOR IGUAL .)
    FALSE           reduce using rule 79 (comparador -> MENOR IGUAL .)
    IDENTIFICADOR   reduce using rule 79 (comparador -> MENOR IGUAL .)


state 103

    (80) comparador -> MAYOR IGUAL .

    ENTERO          reduce using rule 80 (comparador -> MAYOR IGUAL .)
    FLOTANTE        reduce using rule 80 (comparador -> MAYOR IGUAL .)
    CHARACTER       reduce using rule 80 (comparador -> MAYOR IGUAL .)
    STRING          reduce using rule 80 (comparador -> MAYOR IGUAL .)
    TRUE            reduce using rule 80 (comparador -> MAYOR IGUAL .)
    FALSE           reduce using rule 80 (comparador -> MAYOR IGUAL .)
    IDENTIFICADOR   reduce using rule 80 (comparador -> MAYOR IGUAL .)


state 104

    (81) comparador -> EXCLAMACION IGUAL .

    ENTERO          reduce using rule 81 (comparador -> EXCLAMACION IGUAL .)
    FLOTANTE        reduce using rule 81 (comparador -> EXCLAMACION IGUAL .)
    CHARACTER       reduce using rule 81 (comparador -> EXCLAMACION IGUAL .)
    STRING          reduce using rule 81 (comparador -> EXCLAMACION IGUAL .)
    TRUE            reduce using rule 81 (comparador -> EXCLAMACION IGUAL .)
    FALSE           reduce using rule 81 (comparador -> EXCLAMACION IGUAL .)
    IDENTIFICADOR   reduce using rule 81 (comparador -> EXCLAMACION IGUAL .)


state 105

    (71) statement -> EXCLAMACION LPAR expresion . RPAR
    (51) expresion -> expresion . comparador expresion
    (76) comparador -> . IGUAL IGUAL
    (77) comparador -> . MENOR
    (78) comparador -> . MAYOR
    (79) comparador -> . MENOR IGUAL
    (80) comparador -> . MAYOR IGUAL
    (81) comparador -> . EXCLAMACION IGUAL

    RPAR            shift and go to state 130
    IGUAL           shift and go to state 64
    MENOR           shift and go to state 65
    MAYOR           shift and go to state 66
    EXCLAMACION     shift and go to state 67

    comparador                     shift and go to state 63

state 106

    (53) expresionif -> IF LPAR condicionif RPAR . conllaves expresionpos
    (54) expresionif -> IF LPAR condicionif RPAR . sinllaves expresionpos
    (65) conllaves -> . LLAVEL bodyblock LLAVER
    (63) sinllaves -> . while
    (64) sinllaves -> . variable
    (50) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (33) variable -> . AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA
    (34) variable -> . AUTO IDENTIFICADOR PUNTOCOMA
    (35) variable -> . numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA
    (36) variable -> . numerotipo IDENTIFICADOR PUNTOCOMA
    (37) variable -> . CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA
    (38) numerotipo -> . INT
    (39) numerotipo -> . FLOAT
    (40) numerotipo -> . LONG

    LLAVEL          shift and go to state 133
    WHILE           shift and go to state 17
    AUTO            shift and go to state 109
    CHAR            shift and go to state 110
    INT             shift and go to state 111
    FLOAT           shift and go to state 112
    LONG            shift and go to state 113

    conllaves                      shift and go to state 131
    sinllaves                      shift and go to state 132
    while                          shift and go to state 134
    variable                       shift and go to state 135
    numerotipo                     shift and go to state 15

state 107

    (68) initcondicion -> varblock statement .

    RPAR            reduce using rule 68 (initcondicion -> varblock statement .)


state 108

    (31) varblock -> varblock variable .

    EXCLAMACION     reduce using rule 31 (varblock -> varblock variable .)
    AUTO            reduce using rule 31 (varblock -> varblock variable .)
    CHAR            reduce using rule 31 (varblock -> varblock variable .)
    INT             reduce using rule 31 (varblock -> varblock variable .)
    FLOAT           reduce using rule 31 (varblock -> varblock variable .)
    LONG            reduce using rule 31 (varblock -> varblock variable .)
    ENTERO          reduce using rule 31 (varblock -> varblock variable .)
    FLOTANTE        reduce using rule 31 (varblock -> varblock variable .)
    CHARACTER       reduce using rule 31 (varblock -> varblock variable .)
    STRING          reduce using rule 31 (varblock -> varblock variable .)
    TRUE            reduce using rule 31 (varblock -> varblock variable .)
    FALSE           reduce using rule 31 (varblock -> varblock variable .)
    IDENTIFICADOR   reduce using rule 31 (varblock -> varblock variable .)
    LLAVER          reduce using rule 31 (varblock -> varblock variable .)


state 109

    (33) variable -> AUTO . IDENTIFICADOR IGUAL valor PUNTOCOMA
    (34) variable -> AUTO . IDENTIFICADOR PUNTOCOMA

    IDENTIFICADOR   shift and go to state 29


state 110

    (37) variable -> CHAR . IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA

    IDENTIFICADOR   shift and go to state 33


state 111

    (38) numerotipo -> INT .

    IDENTIFICADOR   reduce using rule 38 (numerotipo -> INT .)


state 112

    (39) numerotipo -> FLOAT .

    IDENTIFICADOR   reduce using rule 39 (numerotipo -> FLOAT .)


state 113

    (40) numerotipo -> LONG .

    IDENTIFICADOR   reduce using rule 40 (numerotipo -> LONG .)


state 114

    (98) claseimplementacion -> CLASS IDENTIFICADOR LLAVEL bloqueclase . LLAVER
    (99) bloqueclase -> bloqueclase . definicion
    (100) bloqueclase -> bloqueclase . funcionclaseimpl
    (102) definicion -> . tipo IDENTIFICADOR PUNTOCOMA
    (103) definicion -> .
    (104) funcionclaseimpl -> . tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL funcionblock LLAVER
    (105) funcionclaseimpl -> . VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER
    (106) funcionclaseimpl -> .
    (13) tipo -> . INT
    (14) tipo -> . FLOAT
    (15) tipo -> . LONG
    (16) tipo -> . AUTO
    (17) tipo -> . CHAR
    (18) tipo -> . VOID

  ! shift/reduce conflict for LLAVER resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LLAVER resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! reduce/reduce conflict for INT resolved using rule 103 (definicion -> .)
  ! reduce/reduce conflict for FLOAT resolved using rule 103 (definicion -> .)
  ! reduce/reduce conflict for LONG resolved using rule 103 (definicion -> .)
  ! reduce/reduce conflict for AUTO resolved using rule 103 (definicion -> .)
  ! reduce/reduce conflict for CHAR resolved using rule 103 (definicion -> .)
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    LLAVER          shift and go to state 136
    VOID            shift and go to state 23
    INT             shift and go to state 81
    FLOAT           shift and go to state 82
    LONG            shift and go to state 83
    AUTO            shift and go to state 84
    CHAR            shift and go to state 85

  ! LLAVER          [ reduce using rule 103 (definicion -> .) ]
  ! VOID            [ reduce using rule 103 (definicion -> .) ]
  ! INT             [ reduce using rule 103 (definicion -> .) ]
  ! FLOAT           [ reduce using rule 103 (definicion -> .) ]
  ! LONG            [ reduce using rule 103 (definicion -> .) ]
  ! AUTO            [ reduce using rule 103 (definicion -> .) ]
  ! CHAR            [ reduce using rule 103 (definicion -> .) ]
  ! LLAVER          [ reduce using rule 106 (funcionclaseimpl -> .) ]
  ! VOID            [ reduce using rule 106 (funcionclaseimpl -> .) ]
  ! INT             [ reduce using rule 106 (funcionclaseimpl -> .) ]
  ! FLOAT           [ reduce using rule 106 (funcionclaseimpl -> .) ]
  ! LONG            [ reduce using rule 106 (funcionclaseimpl -> .) ]
  ! AUTO            [ reduce using rule 106 (funcionclaseimpl -> .) ]
  ! CHAR            [ reduce using rule 106 (funcionclaseimpl -> .) ]

    definicion                     shift and go to state 137
    funcionclaseimpl               shift and go to state 138
    tipo                           shift and go to state 139

state 115

    (92) for -> FOR LPAR initfor PUNTOCOMA . condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER
    (83) condfor -> . IDENTIFICADOR comparador valor

    IDENTIFICADOR   shift and go to state 141

    condfor                        shift and go to state 140

state 116

    (82) initfor -> tipo IDENTIFICADOR . IGUAL valor

    IGUAL           shift and go to state 142


state 117

    (93) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO . CORCHETER PUNTOCOMA
    (94) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO . CORCHETER IGUAL LLAVEL arraydata LLAVER PUNTOCOMA
    (95) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO . CORCHETER IGUAL LLAVEL LLAVER PUNTOCOMA

    CORCHETER       shift and go to state 143


state 118

    (107) parametrosimplementacion -> tipo . IDENTIFICADOR masparametrosimplementacion

    IDENTIFICADOR   shift and go to state 144


state 119

    (104) funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion . RPAR LLAVEL funcionblock LLAVER

    RPAR            shift and go to state 145


state 120

    (105) funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion . RPAR LLAVEL bodyblock LLAVER

    RPAR            shift and go to state 146


state 121

    (119) asignarvalorobjeto -> EXCLAMACION LPAR statement RPAR .

    $end            reduce using rule 119 (asignarvalorobjeto -> EXCLAMACION LPAR statement RPAR .)


state 122

    (52) struct -> STRUCT IDENTIFICADOR LLAVEL varblock . LLAVER IDENTIFICADOR PUNTOCOMA
    (31) varblock -> varblock . variable
    (33) variable -> . AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA
    (34) variable -> . AUTO IDENTIFICADOR PUNTOCOMA
    (35) variable -> . numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA
    (36) variable -> . numerotipo IDENTIFICADOR PUNTOCOMA
    (37) variable -> . CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA
    (38) numerotipo -> . INT
    (39) numerotipo -> . FLOAT
    (40) numerotipo -> . LONG

    LLAVER          shift and go to state 147
    AUTO            shift and go to state 109
    CHAR            shift and go to state 110
    INT             shift and go to state 111
    FLOAT           shift and go to state 112
    LONG            shift and go to state 113

    variable                       shift and go to state 108
    numerotipo                     shift and go to state 15

state 123

    (33) variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .

    $end            reduce using rule 33 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    EXCLAMACION     reduce using rule 33 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    AUTO            reduce using rule 33 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    CHAR            reduce using rule 33 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    INT             reduce using rule 33 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    FLOAT           reduce using rule 33 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    LONG            reduce using rule 33 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    ENTERO          reduce using rule 33 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    FLOTANTE        reduce using rule 33 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    CHARACTER       reduce using rule 33 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    STRING          reduce using rule 33 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    TRUE            reduce using rule 33 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    FALSE           reduce using rule 33 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    IDENTIFICADOR   reduce using rule 33 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    ELSE            reduce using rule 33 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    LLAVER          reduce using rule 33 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    WHILE           reduce using rule 33 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    IF              reduce using rule 33 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)
    FOR             reduce using rule 33 (variable -> AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA .)


state 124

    (116) asignarvalorobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR IGUAL valor .

    $end            reduce using rule 116 (asignarvalorobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR IGUAL valor .)


state 125

    (109) parametrosfuncion -> IDENTIFICADOR . masparametrosfuncion
    (113) masparametrosfuncion -> . COMMA parametrosfuncion
    (114) masparametrosfuncion -> .

    COMMA           shift and go to state 149
    RPAR            reduce using rule 114 (masparametrosfuncion -> .)

    masparametrosfuncion           shift and go to state 148

state 126

    (120) usarfuncionobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR LPAR parametrosfuncion . RPAR PUNTOCOMA

    RPAR            shift and go to state 150


state 127

    (35) variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .

    $end            reduce using rule 35 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    EXCLAMACION     reduce using rule 35 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    AUTO            reduce using rule 35 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    CHAR            reduce using rule 35 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    INT             reduce using rule 35 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    FLOAT           reduce using rule 35 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    LONG            reduce using rule 35 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    ENTERO          reduce using rule 35 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    FLOTANTE        reduce using rule 35 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    CHARACTER       reduce using rule 35 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    STRING          reduce using rule 35 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    TRUE            reduce using rule 35 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    FALSE           reduce using rule 35 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    IDENTIFICADOR   reduce using rule 35 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    ELSE            reduce using rule 35 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    LLAVER          reduce using rule 35 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    WHILE           reduce using rule 35 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    IF              reduce using rule 35 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)
    FOR             reduce using rule 35 (variable -> numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA .)


state 128

    (37) variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .

    $end            reduce using rule 37 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    EXCLAMACION     reduce using rule 37 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    AUTO            reduce using rule 37 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    CHAR            reduce using rule 37 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    INT             reduce using rule 37 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    FLOAT           reduce using rule 37 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    LONG            reduce using rule 37 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    ENTERO          reduce using rule 37 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    FLOTANTE        reduce using rule 37 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    CHARACTER       reduce using rule 37 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    STRING          reduce using rule 37 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    TRUE            reduce using rule 37 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    FALSE           reduce using rule 37 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    IDENTIFICADOR   reduce using rule 37 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    ELSE            reduce using rule 37 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    LLAVER          reduce using rule 37 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    WHILE           reduce using rule 37 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    IF              reduce using rule 37 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)
    FOR             reduce using rule 37 (variable -> CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA .)


state 129

    (50) while -> WHILE LPAR statement RPAR LLAVEL . bodyblock LLAVER
    (20) bodyblock -> . bodyblock variable
    (21) bodyblock -> . bodyblock while
    (22) bodyblock -> . bodyblock expresionif
    (23) bodyblock -> . bodyblock for
    (24) bodyblock -> .

    LLAVER          reduce using rule 24 (bodyblock -> .)
    AUTO            reduce using rule 24 (bodyblock -> .)
    CHAR            reduce using rule 24 (bodyblock -> .)
    WHILE           reduce using rule 24 (bodyblock -> .)
    IF              reduce using rule 24 (bodyblock -> .)
    FOR             reduce using rule 24 (bodyblock -> .)
    INT             reduce using rule 24 (bodyblock -> .)
    FLOAT           reduce using rule 24 (bodyblock -> .)
    LONG            reduce using rule 24 (bodyblock -> .)

    bodyblock                      shift and go to state 151

state 130

    (71) statement -> EXCLAMACION LPAR expresion RPAR .

    RPAR            reduce using rule 71 (statement -> EXCLAMACION LPAR expresion RPAR .)
    LLAVER          reduce using rule 71 (statement -> EXCLAMACION LPAR expresion RPAR .)


state 131

    (53) expresionif -> IF LPAR condicionif RPAR conllaves . expresionpos
    (55) expresionpos -> . else
    (56) expresionpos -> . elseif
    (57) expresionpos -> .
    (61) else -> . ELSE conllaves
    (62) else -> . ELSE sinllaves
    (58) elseif -> . ELSE IF LPAR condicionif RPAR conllaves else
    (59) elseif -> . ELSE IF LPAR condicionif RPAR sinllaves else
    (60) elseif -> .

  ! reduce/reduce conflict for $end resolved using rule 57 (expresionpos -> .)
  ! reduce/reduce conflict for LLAVER resolved using rule 57 (expresionpos -> .)
  ! reduce/reduce conflict for AUTO resolved using rule 57 (expresionpos -> .)
  ! reduce/reduce conflict for CHAR resolved using rule 57 (expresionpos -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 57 (expresionpos -> .)
  ! reduce/reduce conflict for IF resolved using rule 57 (expresionpos -> .)
  ! reduce/reduce conflict for FOR resolved using rule 57 (expresionpos -> .)
  ! reduce/reduce conflict for INT resolved using rule 57 (expresionpos -> .)
  ! reduce/reduce conflict for FLOAT resolved using rule 57 (expresionpos -> .)
  ! reduce/reduce conflict for LONG resolved using rule 57 (expresionpos -> .)
    $end            reduce using rule 57 (expresionpos -> .)
    LLAVER          reduce using rule 57 (expresionpos -> .)
    AUTO            reduce using rule 57 (expresionpos -> .)
    CHAR            reduce using rule 57 (expresionpos -> .)
    WHILE           reduce using rule 57 (expresionpos -> .)
    IF              reduce using rule 57 (expresionpos -> .)
    FOR             reduce using rule 57 (expresionpos -> .)
    INT             reduce using rule 57 (expresionpos -> .)
    FLOAT           reduce using rule 57 (expresionpos -> .)
    LONG            reduce using rule 57 (expresionpos -> .)
    ELSE            shift and go to state 155

  ! $end            [ reduce using rule 60 (elseif -> .) ]
  ! LLAVER          [ reduce using rule 60 (elseif -> .) ]
  ! AUTO            [ reduce using rule 60 (elseif -> .) ]
  ! CHAR            [ reduce using rule 60 (elseif -> .) ]
  ! WHILE           [ reduce using rule 60 (elseif -> .) ]
  ! IF              [ reduce using rule 60 (elseif -> .) ]
  ! FOR             [ reduce using rule 60 (elseif -> .) ]
  ! INT             [ reduce using rule 60 (elseif -> .) ]
  ! FLOAT           [ reduce using rule 60 (elseif -> .) ]
  ! LONG            [ reduce using rule 60 (elseif -> .) ]

    expresionpos                   shift and go to state 152
    else                           shift and go to state 153
    elseif                         shift and go to state 154

state 132

    (54) expresionif -> IF LPAR condicionif RPAR sinllaves . expresionpos
    (55) expresionpos -> . else
    (56) expresionpos -> . elseif
    (57) expresionpos -> .
    (61) else -> . ELSE conllaves
    (62) else -> . ELSE sinllaves
    (58) elseif -> . ELSE IF LPAR condicionif RPAR conllaves else
    (59) elseif -> . ELSE IF LPAR condicionif RPAR sinllaves else
    (60) elseif -> .

  ! reduce/reduce conflict for $end resolved using rule 57 (expresionpos -> .)
  ! reduce/reduce conflict for LLAVER resolved using rule 57 (expresionpos -> .)
  ! reduce/reduce conflict for AUTO resolved using rule 57 (expresionpos -> .)
  ! reduce/reduce conflict for CHAR resolved using rule 57 (expresionpos -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 57 (expresionpos -> .)
  ! reduce/reduce conflict for IF resolved using rule 57 (expresionpos -> .)
  ! reduce/reduce conflict for FOR resolved using rule 57 (expresionpos -> .)
  ! reduce/reduce conflict for INT resolved using rule 57 (expresionpos -> .)
  ! reduce/reduce conflict for FLOAT resolved using rule 57 (expresionpos -> .)
  ! reduce/reduce conflict for LONG resolved using rule 57 (expresionpos -> .)
    $end            reduce using rule 57 (expresionpos -> .)
    LLAVER          reduce using rule 57 (expresionpos -> .)
    AUTO            reduce using rule 57 (expresionpos -> .)
    CHAR            reduce using rule 57 (expresionpos -> .)
    WHILE           reduce using rule 57 (expresionpos -> .)
    IF              reduce using rule 57 (expresionpos -> .)
    FOR             reduce using rule 57 (expresionpos -> .)
    INT             reduce using rule 57 (expresionpos -> .)
    FLOAT           reduce using rule 57 (expresionpos -> .)
    LONG            reduce using rule 57 (expresionpos -> .)
    ELSE            shift and go to state 155

  ! $end            [ reduce using rule 60 (elseif -> .) ]
  ! LLAVER          [ reduce using rule 60 (elseif -> .) ]
  ! AUTO            [ reduce using rule 60 (elseif -> .) ]
  ! CHAR            [ reduce using rule 60 (elseif -> .) ]
  ! WHILE           [ reduce using rule 60 (elseif -> .) ]
  ! IF              [ reduce using rule 60 (elseif -> .) ]
  ! FOR             [ reduce using rule 60 (elseif -> .) ]
  ! INT             [ reduce using rule 60 (elseif -> .) ]
  ! FLOAT           [ reduce using rule 60 (elseif -> .) ]
  ! LONG            [ reduce using rule 60 (elseif -> .) ]

    expresionpos                   shift and go to state 156
    else                           shift and go to state 153
    elseif                         shift and go to state 154

state 133

    (65) conllaves -> LLAVEL . bodyblock LLAVER
    (20) bodyblock -> . bodyblock variable
    (21) bodyblock -> . bodyblock while
    (22) bodyblock -> . bodyblock expresionif
    (23) bodyblock -> . bodyblock for
    (24) bodyblock -> .

    LLAVER          reduce using rule 24 (bodyblock -> .)
    AUTO            reduce using rule 24 (bodyblock -> .)
    CHAR            reduce using rule 24 (bodyblock -> .)
    WHILE           reduce using rule 24 (bodyblock -> .)
    IF              reduce using rule 24 (bodyblock -> .)
    FOR             reduce using rule 24 (bodyblock -> .)
    INT             reduce using rule 24 (bodyblock -> .)
    FLOAT           reduce using rule 24 (bodyblock -> .)
    LONG            reduce using rule 24 (bodyblock -> .)

    bodyblock                      shift and go to state 157

state 134

    (63) sinllaves -> while .

    ELSE            reduce using rule 63 (sinllaves -> while .)
    $end            reduce using rule 63 (sinllaves -> while .)
    LLAVER          reduce using rule 63 (sinllaves -> while .)
    AUTO            reduce using rule 63 (sinllaves -> while .)
    CHAR            reduce using rule 63 (sinllaves -> while .)
    WHILE           reduce using rule 63 (sinllaves -> while .)
    IF              reduce using rule 63 (sinllaves -> while .)
    FOR             reduce using rule 63 (sinllaves -> while .)
    INT             reduce using rule 63 (sinllaves -> while .)
    FLOAT           reduce using rule 63 (sinllaves -> while .)
    LONG            reduce using rule 63 (sinllaves -> while .)


state 135

    (64) sinllaves -> variable .

    ELSE            reduce using rule 64 (sinllaves -> variable .)
    $end            reduce using rule 64 (sinllaves -> variable .)
    LLAVER          reduce using rule 64 (sinllaves -> variable .)
    AUTO            reduce using rule 64 (sinllaves -> variable .)
    CHAR            reduce using rule 64 (sinllaves -> variable .)
    WHILE           reduce using rule 64 (sinllaves -> variable .)
    IF              reduce using rule 64 (sinllaves -> variable .)
    FOR             reduce using rule 64 (sinllaves -> variable .)
    INT             reduce using rule 64 (sinllaves -> variable .)
    FLOAT           reduce using rule 64 (sinllaves -> variable .)
    LONG            reduce using rule 64 (sinllaves -> variable .)


state 136

    (98) claseimplementacion -> CLASS IDENTIFICADOR LLAVEL bloqueclase LLAVER .

    $end            reduce using rule 98 (claseimplementacion -> CLASS IDENTIFICADOR LLAVEL bloqueclase LLAVER .)


state 137

    (99) bloqueclase -> bloqueclase definicion .

    LLAVER          reduce using rule 99 (bloqueclase -> bloqueclase definicion .)
    VOID            reduce using rule 99 (bloqueclase -> bloqueclase definicion .)
    INT             reduce using rule 99 (bloqueclase -> bloqueclase definicion .)
    FLOAT           reduce using rule 99 (bloqueclase -> bloqueclase definicion .)
    LONG            reduce using rule 99 (bloqueclase -> bloqueclase definicion .)
    AUTO            reduce using rule 99 (bloqueclase -> bloqueclase definicion .)
    CHAR            reduce using rule 99 (bloqueclase -> bloqueclase definicion .)


state 138

    (100) bloqueclase -> bloqueclase funcionclaseimpl .

    LLAVER          reduce using rule 100 (bloqueclase -> bloqueclase funcionclaseimpl .)
    VOID            reduce using rule 100 (bloqueclase -> bloqueclase funcionclaseimpl .)
    INT             reduce using rule 100 (bloqueclase -> bloqueclase funcionclaseimpl .)
    FLOAT           reduce using rule 100 (bloqueclase -> bloqueclase funcionclaseimpl .)
    LONG            reduce using rule 100 (bloqueclase -> bloqueclase funcionclaseimpl .)
    AUTO            reduce using rule 100 (bloqueclase -> bloqueclase funcionclaseimpl .)
    CHAR            reduce using rule 100 (bloqueclase -> bloqueclase funcionclaseimpl .)


state 139

    (102) definicion -> tipo . IDENTIFICADOR PUNTOCOMA
    (104) funcionclaseimpl -> tipo . IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL funcionblock LLAVER

    IDENTIFICADOR   shift and go to state 158


state 140

    (92) for -> FOR LPAR initfor PUNTOCOMA condfor . PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER

    PUNTOCOMA       shift and go to state 159


state 141

    (83) condfor -> IDENTIFICADOR . comparador valor
    (76) comparador -> . IGUAL IGUAL
    (77) comparador -> . MENOR
    (78) comparador -> . MAYOR
    (79) comparador -> . MENOR IGUAL
    (80) comparador -> . MAYOR IGUAL
    (81) comparador -> . EXCLAMACION IGUAL

    IGUAL           shift and go to state 64
    MENOR           shift and go to state 65
    MAYOR           shift and go to state 66
    EXCLAMACION     shift and go to state 67

    comparador                     shift and go to state 160

state 142

    (82) initfor -> tipo IDENTIFICADOR IGUAL . valor
    (43) valor -> . ENTERO
    (44) valor -> . FLOTANTE
    (45) valor -> . CHARACTER
    (46) valor -> . STRING
    (47) valor -> . TRUE
    (48) valor -> . FALSE
    (49) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 40
    FLOTANTE        shift and go to state 41
    CHARACTER       shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    IDENTIFICADOR   shift and go to state 39

    valor                          shift and go to state 161

state 143

    (93) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER . PUNTOCOMA
    (94) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER . IGUAL LLAVEL arraydata LLAVER PUNTOCOMA
    (95) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER . IGUAL LLAVEL LLAVER PUNTOCOMA

    PUNTOCOMA       shift and go to state 162
    IGUAL           shift and go to state 163


state 144

    (107) parametrosimplementacion -> tipo IDENTIFICADOR . masparametrosimplementacion
    (111) masparametrosimplementacion -> . COMMA parametrosimplementacion
    (112) masparametrosimplementacion -> .

    COMMA           shift and go to state 165
    RPAR            reduce using rule 112 (masparametrosimplementacion -> .)

    masparametrosimplementacion    shift and go to state 164

state 145

    (104) funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR . LLAVEL funcionblock LLAVER

    LLAVEL          shift and go to state 166


state 146

    (105) funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR . LLAVEL bodyblock LLAVER

    LLAVEL          shift and go to state 167


state 147

    (52) struct -> STRUCT IDENTIFICADOR LLAVEL varblock LLAVER . IDENTIFICADOR PUNTOCOMA

    IDENTIFICADOR   shift and go to state 168


state 148

    (109) parametrosfuncion -> IDENTIFICADOR masparametrosfuncion .

    RPAR            reduce using rule 109 (parametrosfuncion -> IDENTIFICADOR masparametrosfuncion .)


state 149

    (113) masparametrosfuncion -> COMMA . parametrosfuncion
    (109) parametrosfuncion -> . IDENTIFICADOR masparametrosfuncion
    (110) parametrosfuncion -> .

    IDENTIFICADOR   shift and go to state 125
    RPAR            reduce using rule 110 (parametrosfuncion -> .)

    parametrosfuncion              shift and go to state 169

state 150

    (120) usarfuncionobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR LPAR parametrosfuncion RPAR . PUNTOCOMA

    PUNTOCOMA       shift and go to state 170


state 151

    (50) while -> WHILE LPAR statement RPAR LLAVEL bodyblock . LLAVER
    (20) bodyblock -> bodyblock . variable
    (21) bodyblock -> bodyblock . while
    (22) bodyblock -> bodyblock . expresionif
    (23) bodyblock -> bodyblock . for
    (33) variable -> . AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA
    (34) variable -> . AUTO IDENTIFICADOR PUNTOCOMA
    (35) variable -> . numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA
    (36) variable -> . numerotipo IDENTIFICADOR PUNTOCOMA
    (37) variable -> . CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA
    (50) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (53) expresionif -> . IF LPAR condicionif RPAR conllaves expresionpos
    (54) expresionif -> . IF LPAR condicionif RPAR sinllaves expresionpos
    (92) for -> . FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER
    (38) numerotipo -> . INT
    (39) numerotipo -> . FLOAT
    (40) numerotipo -> . LONG

    LLAVER          shift and go to state 171
    AUTO            shift and go to state 109
    CHAR            shift and go to state 110
    WHILE           shift and go to state 17
    IF              shift and go to state 19
    FOR             shift and go to state 21
    INT             shift and go to state 111
    FLOAT           shift and go to state 112
    LONG            shift and go to state 113

    variable                       shift and go to state 172
    while                          shift and go to state 173
    expresionif                    shift and go to state 174
    for                            shift and go to state 175
    numerotipo                     shift and go to state 15

state 152

    (53) expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .

    $end            reduce using rule 53 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    LLAVER          reduce using rule 53 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    AUTO            reduce using rule 53 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    CHAR            reduce using rule 53 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    WHILE           reduce using rule 53 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    IF              reduce using rule 53 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    FOR             reduce using rule 53 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    INT             reduce using rule 53 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    FLOAT           reduce using rule 53 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)
    LONG            reduce using rule 53 (expresionif -> IF LPAR condicionif RPAR conllaves expresionpos .)


state 153

    (55) expresionpos -> else .

    $end            reduce using rule 55 (expresionpos -> else .)
    LLAVER          reduce using rule 55 (expresionpos -> else .)
    AUTO            reduce using rule 55 (expresionpos -> else .)
    CHAR            reduce using rule 55 (expresionpos -> else .)
    WHILE           reduce using rule 55 (expresionpos -> else .)
    IF              reduce using rule 55 (expresionpos -> else .)
    FOR             reduce using rule 55 (expresionpos -> else .)
    INT             reduce using rule 55 (expresionpos -> else .)
    FLOAT           reduce using rule 55 (expresionpos -> else .)
    LONG            reduce using rule 55 (expresionpos -> else .)


state 154

    (56) expresionpos -> elseif .

    $end            reduce using rule 56 (expresionpos -> elseif .)
    LLAVER          reduce using rule 56 (expresionpos -> elseif .)
    AUTO            reduce using rule 56 (expresionpos -> elseif .)
    CHAR            reduce using rule 56 (expresionpos -> elseif .)
    WHILE           reduce using rule 56 (expresionpos -> elseif .)
    IF              reduce using rule 56 (expresionpos -> elseif .)
    FOR             reduce using rule 56 (expresionpos -> elseif .)
    INT             reduce using rule 56 (expresionpos -> elseif .)
    FLOAT           reduce using rule 56 (expresionpos -> elseif .)
    LONG            reduce using rule 56 (expresionpos -> elseif .)


state 155

    (61) else -> ELSE . conllaves
    (62) else -> ELSE . sinllaves
    (58) elseif -> ELSE . IF LPAR condicionif RPAR conllaves else
    (59) elseif -> ELSE . IF LPAR condicionif RPAR sinllaves else
    (65) conllaves -> . LLAVEL bodyblock LLAVER
    (63) sinllaves -> . while
    (64) sinllaves -> . variable
    (50) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (33) variable -> . AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA
    (34) variable -> . AUTO IDENTIFICADOR PUNTOCOMA
    (35) variable -> . numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA
    (36) variable -> . numerotipo IDENTIFICADOR PUNTOCOMA
    (37) variable -> . CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA
    (38) numerotipo -> . INT
    (39) numerotipo -> . FLOAT
    (40) numerotipo -> . LONG

    IF              shift and go to state 178
    LLAVEL          shift and go to state 133
    WHILE           shift and go to state 17
    AUTO            shift and go to state 109
    CHAR            shift and go to state 110
    INT             shift and go to state 111
    FLOAT           shift and go to state 112
    LONG            shift and go to state 113

    conllaves                      shift and go to state 176
    sinllaves                      shift and go to state 177
    while                          shift and go to state 134
    variable                       shift and go to state 135
    numerotipo                     shift and go to state 15

state 156

    (54) expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .

    $end            reduce using rule 54 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    LLAVER          reduce using rule 54 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    AUTO            reduce using rule 54 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    CHAR            reduce using rule 54 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    WHILE           reduce using rule 54 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    IF              reduce using rule 54 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    FOR             reduce using rule 54 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    INT             reduce using rule 54 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    FLOAT           reduce using rule 54 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)
    LONG            reduce using rule 54 (expresionif -> IF LPAR condicionif RPAR sinllaves expresionpos .)


state 157

    (65) conllaves -> LLAVEL bodyblock . LLAVER
    (20) bodyblock -> bodyblock . variable
    (21) bodyblock -> bodyblock . while
    (22) bodyblock -> bodyblock . expresionif
    (23) bodyblock -> bodyblock . for
    (33) variable -> . AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA
    (34) variable -> . AUTO IDENTIFICADOR PUNTOCOMA
    (35) variable -> . numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA
    (36) variable -> . numerotipo IDENTIFICADOR PUNTOCOMA
    (37) variable -> . CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA
    (50) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (53) expresionif -> . IF LPAR condicionif RPAR conllaves expresionpos
    (54) expresionif -> . IF LPAR condicionif RPAR sinllaves expresionpos
    (92) for -> . FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER
    (38) numerotipo -> . INT
    (39) numerotipo -> . FLOAT
    (40) numerotipo -> . LONG

    LLAVER          shift and go to state 179
    AUTO            shift and go to state 109
    CHAR            shift and go to state 110
    WHILE           shift and go to state 17
    IF              shift and go to state 19
    FOR             shift and go to state 21
    INT             shift and go to state 111
    FLOAT           shift and go to state 112
    LONG            shift and go to state 113

    variable                       shift and go to state 172
    while                          shift and go to state 173
    expresionif                    shift and go to state 174
    for                            shift and go to state 175
    numerotipo                     shift and go to state 15

state 158

    (102) definicion -> tipo IDENTIFICADOR . PUNTOCOMA
    (104) funcionclaseimpl -> tipo IDENTIFICADOR . LPAR parametrosimplementacion RPAR LLAVEL funcionblock LLAVER

    PUNTOCOMA       shift and go to state 180
    LPAR            shift and go to state 88


state 159

    (92) for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA . loopfor RPAR LLAVEL bodyblock LLAVER
    (84) loopfor -> . asign
    (85) loopfor -> . unaryexp
    (86) asign -> . IDENTIFICADOR MAS valor
    (87) asign -> . IDENTIFICADOR MENOS valor
    (88) asign -> . IDENTIFICADOR ASTERISCO valor
    (89) asign -> . IDENTIFICADOR SLASH valor
    (90) unaryexp -> . IDENTIFICADOR MAS MAS
    (91) unaryexp -> . IDENTIFICADOR MENOS MENOS

    IDENTIFICADOR   shift and go to state 184

    loopfor                        shift and go to state 181
    asign                          shift and go to state 182
    unaryexp                       shift and go to state 183

state 160

    (83) condfor -> IDENTIFICADOR comparador . valor
    (43) valor -> . ENTERO
    (44) valor -> . FLOTANTE
    (45) valor -> . CHARACTER
    (46) valor -> . STRING
    (47) valor -> . TRUE
    (48) valor -> . FALSE
    (49) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 40
    FLOTANTE        shift and go to state 41
    CHARACTER       shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    IDENTIFICADOR   shift and go to state 39

    valor                          shift and go to state 185

state 161

    (82) initfor -> tipo IDENTIFICADOR IGUAL valor .

    PUNTOCOMA       reduce using rule 82 (initfor -> tipo IDENTIFICADOR IGUAL valor .)


state 162

    (93) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER PUNTOCOMA .

    $end            reduce using rule 93 (arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER PUNTOCOMA .)


state 163

    (94) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL . LLAVEL arraydata LLAVER PUNTOCOMA
    (95) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL . LLAVEL LLAVER PUNTOCOMA

    LLAVEL          shift and go to state 186


state 164

    (107) parametrosimplementacion -> tipo IDENTIFICADOR masparametrosimplementacion .

    RPAR            reduce using rule 107 (parametrosimplementacion -> tipo IDENTIFICADOR masparametrosimplementacion .)


state 165

    (111) masparametrosimplementacion -> COMMA . parametrosimplementacion
    (107) parametrosimplementacion -> . tipo IDENTIFICADOR masparametrosimplementacion
    (108) parametrosimplementacion -> .
    (13) tipo -> . INT
    (14) tipo -> . FLOAT
    (15) tipo -> . LONG
    (16) tipo -> . AUTO
    (17) tipo -> . CHAR
    (18) tipo -> . VOID

    RPAR            reduce using rule 108 (parametrosimplementacion -> .)
    INT             shift and go to state 81
    FLOAT           shift and go to state 82
    LONG            shift and go to state 83
    AUTO            shift and go to state 84
    CHAR            shift and go to state 85
    VOID            shift and go to state 86

    parametrosimplementacion       shift and go to state 187
    tipo                           shift and go to state 118

state 166

    (104) funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL . funcionblock LLAVER
    (25) funcionblock -> . bodyblock variable
    (26) funcionblock -> . bodyblock while
    (27) funcionblock -> . bodyblock expresionif
    (28) funcionblock -> . bodyblock for
    (29) funcionblock -> . RETURN statement
    (30) funcionblock -> .
    (20) bodyblock -> . bodyblock variable
    (21) bodyblock -> . bodyblock while
    (22) bodyblock -> . bodyblock expresionif
    (23) bodyblock -> . bodyblock for
    (24) bodyblock -> .

    RETURN          shift and go to state 190
    LLAVER          reduce using rule 30 (funcionblock -> .)
    AUTO            reduce using rule 24 (bodyblock -> .)
    CHAR            reduce using rule 24 (bodyblock -> .)
    WHILE           reduce using rule 24 (bodyblock -> .)
    IF              reduce using rule 24 (bodyblock -> .)
    FOR             reduce using rule 24 (bodyblock -> .)
    INT             reduce using rule 24 (bodyblock -> .)
    FLOAT           reduce using rule 24 (bodyblock -> .)
    LONG            reduce using rule 24 (bodyblock -> .)

    funcionblock                   shift and go to state 188
    bodyblock                      shift and go to state 189

state 167

    (105) funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL . bodyblock LLAVER
    (20) bodyblock -> . bodyblock variable
    (21) bodyblock -> . bodyblock while
    (22) bodyblock -> . bodyblock expresionif
    (23) bodyblock -> . bodyblock for
    (24) bodyblock -> .

    LLAVER          reduce using rule 24 (bodyblock -> .)
    AUTO            reduce using rule 24 (bodyblock -> .)
    CHAR            reduce using rule 24 (bodyblock -> .)
    WHILE           reduce using rule 24 (bodyblock -> .)
    IF              reduce using rule 24 (bodyblock -> .)
    FOR             reduce using rule 24 (bodyblock -> .)
    INT             reduce using rule 24 (bodyblock -> .)
    FLOAT           reduce using rule 24 (bodyblock -> .)
    LONG            reduce using rule 24 (bodyblock -> .)

    bodyblock                      shift and go to state 191

state 168

    (52) struct -> STRUCT IDENTIFICADOR LLAVEL varblock LLAVER IDENTIFICADOR . PUNTOCOMA

    PUNTOCOMA       shift and go to state 192


state 169

    (113) masparametrosfuncion -> COMMA parametrosfuncion .

    RPAR            reduce using rule 113 (masparametrosfuncion -> COMMA parametrosfuncion .)


state 170

    (120) usarfuncionobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR LPAR parametrosfuncion RPAR PUNTOCOMA .

    $end            reduce using rule 120 (usarfuncionobjeto -> IDENTIFICADOR PUNTO IDENTIFICADOR LPAR parametrosfuncion RPAR PUNTOCOMA .)


state 171

    (50) while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .

    $end            reduce using rule 50 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    ELSE            reduce using rule 50 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    LLAVER          reduce using rule 50 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    AUTO            reduce using rule 50 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    CHAR            reduce using rule 50 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    WHILE           reduce using rule 50 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    IF              reduce using rule 50 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    FOR             reduce using rule 50 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    INT             reduce using rule 50 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    FLOAT           reduce using rule 50 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)
    LONG            reduce using rule 50 (while -> WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER .)


state 172

    (20) bodyblock -> bodyblock variable .

    LLAVER          reduce using rule 20 (bodyblock -> bodyblock variable .)
    AUTO            reduce using rule 20 (bodyblock -> bodyblock variable .)
    CHAR            reduce using rule 20 (bodyblock -> bodyblock variable .)
    WHILE           reduce using rule 20 (bodyblock -> bodyblock variable .)
    IF              reduce using rule 20 (bodyblock -> bodyblock variable .)
    FOR             reduce using rule 20 (bodyblock -> bodyblock variable .)
    INT             reduce using rule 20 (bodyblock -> bodyblock variable .)
    FLOAT           reduce using rule 20 (bodyblock -> bodyblock variable .)
    LONG            reduce using rule 20 (bodyblock -> bodyblock variable .)


state 173

    (21) bodyblock -> bodyblock while .

    LLAVER          reduce using rule 21 (bodyblock -> bodyblock while .)
    AUTO            reduce using rule 21 (bodyblock -> bodyblock while .)
    CHAR            reduce using rule 21 (bodyblock -> bodyblock while .)
    WHILE           reduce using rule 21 (bodyblock -> bodyblock while .)
    IF              reduce using rule 21 (bodyblock -> bodyblock while .)
    FOR             reduce using rule 21 (bodyblock -> bodyblock while .)
    INT             reduce using rule 21 (bodyblock -> bodyblock while .)
    FLOAT           reduce using rule 21 (bodyblock -> bodyblock while .)
    LONG            reduce using rule 21 (bodyblock -> bodyblock while .)


state 174

    (22) bodyblock -> bodyblock expresionif .

    LLAVER          reduce using rule 22 (bodyblock -> bodyblock expresionif .)
    AUTO            reduce using rule 22 (bodyblock -> bodyblock expresionif .)
    CHAR            reduce using rule 22 (bodyblock -> bodyblock expresionif .)
    WHILE           reduce using rule 22 (bodyblock -> bodyblock expresionif .)
    IF              reduce using rule 22 (bodyblock -> bodyblock expresionif .)
    FOR             reduce using rule 22 (bodyblock -> bodyblock expresionif .)
    INT             reduce using rule 22 (bodyblock -> bodyblock expresionif .)
    FLOAT           reduce using rule 22 (bodyblock -> bodyblock expresionif .)
    LONG            reduce using rule 22 (bodyblock -> bodyblock expresionif .)


state 175

    (23) bodyblock -> bodyblock for .

    LLAVER          reduce using rule 23 (bodyblock -> bodyblock for .)
    AUTO            reduce using rule 23 (bodyblock -> bodyblock for .)
    CHAR            reduce using rule 23 (bodyblock -> bodyblock for .)
    WHILE           reduce using rule 23 (bodyblock -> bodyblock for .)
    IF              reduce using rule 23 (bodyblock -> bodyblock for .)
    FOR             reduce using rule 23 (bodyblock -> bodyblock for .)
    INT             reduce using rule 23 (bodyblock -> bodyblock for .)
    FLOAT           reduce using rule 23 (bodyblock -> bodyblock for .)
    LONG            reduce using rule 23 (bodyblock -> bodyblock for .)


state 176

    (61) else -> ELSE conllaves .

    $end            reduce using rule 61 (else -> ELSE conllaves .)
    LLAVER          reduce using rule 61 (else -> ELSE conllaves .)
    AUTO            reduce using rule 61 (else -> ELSE conllaves .)
    CHAR            reduce using rule 61 (else -> ELSE conllaves .)
    WHILE           reduce using rule 61 (else -> ELSE conllaves .)
    IF              reduce using rule 61 (else -> ELSE conllaves .)
    FOR             reduce using rule 61 (else -> ELSE conllaves .)
    INT             reduce using rule 61 (else -> ELSE conllaves .)
    FLOAT           reduce using rule 61 (else -> ELSE conllaves .)
    LONG            reduce using rule 61 (else -> ELSE conllaves .)


state 177

    (62) else -> ELSE sinllaves .

    $end            reduce using rule 62 (else -> ELSE sinllaves .)
    LLAVER          reduce using rule 62 (else -> ELSE sinllaves .)
    AUTO            reduce using rule 62 (else -> ELSE sinllaves .)
    CHAR            reduce using rule 62 (else -> ELSE sinllaves .)
    WHILE           reduce using rule 62 (else -> ELSE sinllaves .)
    IF              reduce using rule 62 (else -> ELSE sinllaves .)
    FOR             reduce using rule 62 (else -> ELSE sinllaves .)
    INT             reduce using rule 62 (else -> ELSE sinllaves .)
    FLOAT           reduce using rule 62 (else -> ELSE sinllaves .)
    LONG            reduce using rule 62 (else -> ELSE sinllaves .)


state 178

    (58) elseif -> ELSE IF . LPAR condicionif RPAR conllaves else
    (59) elseif -> ELSE IF . LPAR condicionif RPAR sinllaves else

    LPAR            shift and go to state 193


state 179

    (65) conllaves -> LLAVEL bodyblock LLAVER .

    ELSE            reduce using rule 65 (conllaves -> LLAVEL bodyblock LLAVER .)
    $end            reduce using rule 65 (conllaves -> LLAVEL bodyblock LLAVER .)
    LLAVER          reduce using rule 65 (conllaves -> LLAVEL bodyblock LLAVER .)
    AUTO            reduce using rule 65 (conllaves -> LLAVEL bodyblock LLAVER .)
    CHAR            reduce using rule 65 (conllaves -> LLAVEL bodyblock LLAVER .)
    WHILE           reduce using rule 65 (conllaves -> LLAVEL bodyblock LLAVER .)
    IF              reduce using rule 65 (conllaves -> LLAVEL bodyblock LLAVER .)
    FOR             reduce using rule 65 (conllaves -> LLAVEL bodyblock LLAVER .)
    INT             reduce using rule 65 (conllaves -> LLAVEL bodyblock LLAVER .)
    FLOAT           reduce using rule 65 (conllaves -> LLAVEL bodyblock LLAVER .)
    LONG            reduce using rule 65 (conllaves -> LLAVEL bodyblock LLAVER .)


state 180

    (102) definicion -> tipo IDENTIFICADOR PUNTOCOMA .

    LLAVER          reduce using rule 102 (definicion -> tipo IDENTIFICADOR PUNTOCOMA .)
    VOID            reduce using rule 102 (definicion -> tipo IDENTIFICADOR PUNTOCOMA .)
    INT             reduce using rule 102 (definicion -> tipo IDENTIFICADOR PUNTOCOMA .)
    FLOAT           reduce using rule 102 (definicion -> tipo IDENTIFICADOR PUNTOCOMA .)
    LONG            reduce using rule 102 (definicion -> tipo IDENTIFICADOR PUNTOCOMA .)
    AUTO            reduce using rule 102 (definicion -> tipo IDENTIFICADOR PUNTOCOMA .)
    CHAR            reduce using rule 102 (definicion -> tipo IDENTIFICADOR PUNTOCOMA .)


state 181

    (92) for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor . RPAR LLAVEL bodyblock LLAVER

    RPAR            shift and go to state 194


state 182

    (84) loopfor -> asign .

    RPAR            reduce using rule 84 (loopfor -> asign .)


state 183

    (85) loopfor -> unaryexp .

    RPAR            reduce using rule 85 (loopfor -> unaryexp .)


state 184

    (86) asign -> IDENTIFICADOR . MAS valor
    (87) asign -> IDENTIFICADOR . MENOS valor
    (88) asign -> IDENTIFICADOR . ASTERISCO valor
    (89) asign -> IDENTIFICADOR . SLASH valor
    (90) unaryexp -> IDENTIFICADOR . MAS MAS
    (91) unaryexp -> IDENTIFICADOR . MENOS MENOS

    MAS             shift and go to state 195
    MENOS           shift and go to state 196
    ASTERISCO       shift and go to state 197
    SLASH           shift and go to state 198


state 185

    (83) condfor -> IDENTIFICADOR comparador valor .

    PUNTOCOMA       reduce using rule 83 (condfor -> IDENTIFICADOR comparador valor .)


state 186

    (94) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL LLAVEL . arraydata LLAVER PUNTOCOMA
    (95) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL LLAVEL . LLAVER PUNTOCOMA
    (96) arraydata -> . arraydata COMMA valor
    (97) arraydata -> . valor
    (43) valor -> . ENTERO
    (44) valor -> . FLOTANTE
    (45) valor -> . CHARACTER
    (46) valor -> . STRING
    (47) valor -> . TRUE
    (48) valor -> . FALSE
    (49) valor -> . IDENTIFICADOR

    LLAVER          shift and go to state 200
    ENTERO          shift and go to state 40
    FLOTANTE        shift and go to state 41
    CHARACTER       shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    IDENTIFICADOR   shift and go to state 39

    arraydata                      shift and go to state 199
    valor                          shift and go to state 201

state 187

    (111) masparametrosimplementacion -> COMMA parametrosimplementacion .

    RPAR            reduce using rule 111 (masparametrosimplementacion -> COMMA parametrosimplementacion .)


state 188

    (104) funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL funcionblock . LLAVER

    LLAVER          shift and go to state 202


state 189

    (25) funcionblock -> bodyblock . variable
    (26) funcionblock -> bodyblock . while
    (27) funcionblock -> bodyblock . expresionif
    (28) funcionblock -> bodyblock . for
    (20) bodyblock -> bodyblock . variable
    (21) bodyblock -> bodyblock . while
    (22) bodyblock -> bodyblock . expresionif
    (23) bodyblock -> bodyblock . for
    (33) variable -> . AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA
    (34) variable -> . AUTO IDENTIFICADOR PUNTOCOMA
    (35) variable -> . numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA
    (36) variable -> . numerotipo IDENTIFICADOR PUNTOCOMA
    (37) variable -> . CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA
    (50) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (53) expresionif -> . IF LPAR condicionif RPAR conllaves expresionpos
    (54) expresionif -> . IF LPAR condicionif RPAR sinllaves expresionpos
    (92) for -> . FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER
    (38) numerotipo -> . INT
    (39) numerotipo -> . FLOAT
    (40) numerotipo -> . LONG

    AUTO            shift and go to state 109
    CHAR            shift and go to state 110
    WHILE           shift and go to state 17
    IF              shift and go to state 19
    FOR             shift and go to state 21
    INT             shift and go to state 111
    FLOAT           shift and go to state 112
    LONG            shift and go to state 113

    variable                       shift and go to state 203
    while                          shift and go to state 204
    expresionif                    shift and go to state 205
    for                            shift and go to state 206
    numerotipo                     shift and go to state 15

state 190

    (29) funcionblock -> RETURN . statement
    (69) statement -> . expresion
    (70) statement -> . EXCLAMACION boolean
    (71) statement -> . EXCLAMACION LPAR expresion RPAR
    (72) statement -> . EXCLAMACION IDENTIFICADOR
    (51) expresion -> . expresion comparador expresion
    (75) expresion -> . valor
    (43) valor -> . ENTERO
    (44) valor -> . FLOTANTE
    (45) valor -> . CHARACTER
    (46) valor -> . STRING
    (47) valor -> . TRUE
    (48) valor -> . FALSE
    (49) valor -> . IDENTIFICADOR

    EXCLAMACION     shift and go to state 38
    ENTERO          shift and go to state 40
    FLOTANTE        shift and go to state 41
    CHARACTER       shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    IDENTIFICADOR   shift and go to state 39

    statement                      shift and go to state 207
    expresion                      shift and go to state 61
    valor                          shift and go to state 37

state 191

    (105) funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock . LLAVER
    (20) bodyblock -> bodyblock . variable
    (21) bodyblock -> bodyblock . while
    (22) bodyblock -> bodyblock . expresionif
    (23) bodyblock -> bodyblock . for
    (33) variable -> . AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA
    (34) variable -> . AUTO IDENTIFICADOR PUNTOCOMA
    (35) variable -> . numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA
    (36) variable -> . numerotipo IDENTIFICADOR PUNTOCOMA
    (37) variable -> . CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA
    (50) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (53) expresionif -> . IF LPAR condicionif RPAR conllaves expresionpos
    (54) expresionif -> . IF LPAR condicionif RPAR sinllaves expresionpos
    (92) for -> . FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER
    (38) numerotipo -> . INT
    (39) numerotipo -> . FLOAT
    (40) numerotipo -> . LONG

    LLAVER          shift and go to state 208
    AUTO            shift and go to state 109
    CHAR            shift and go to state 110
    WHILE           shift and go to state 17
    IF              shift and go to state 19
    FOR             shift and go to state 21
    INT             shift and go to state 111
    FLOAT           shift and go to state 112
    LONG            shift and go to state 113

    variable                       shift and go to state 172
    while                          shift and go to state 173
    expresionif                    shift and go to state 174
    for                            shift and go to state 175
    numerotipo                     shift and go to state 15

state 192

    (52) struct -> STRUCT IDENTIFICADOR LLAVEL varblock LLAVER IDENTIFICADOR PUNTOCOMA .

    $end            reduce using rule 52 (struct -> STRUCT IDENTIFICADOR LLAVEL varblock LLAVER IDENTIFICADOR PUNTOCOMA .)


state 193

    (58) elseif -> ELSE IF LPAR . condicionif RPAR conllaves else
    (59) elseif -> ELSE IF LPAR . condicionif RPAR sinllaves else
    (66) condicionif -> . initcondicion
    (67) condicionif -> . statement
    (68) initcondicion -> . varblock statement
    (69) statement -> . expresion
    (70) statement -> . EXCLAMACION boolean
    (71) statement -> . EXCLAMACION LPAR expresion RPAR
    (72) statement -> . EXCLAMACION IDENTIFICADOR
    (31) varblock -> . varblock variable
    (32) varblock -> .
    (51) expresion -> . expresion comparador expresion
    (75) expresion -> . valor
    (43) valor -> . ENTERO
    (44) valor -> . FLOTANTE
    (45) valor -> . CHARACTER
    (46) valor -> . STRING
    (47) valor -> . TRUE
    (48) valor -> . FALSE
    (49) valor -> . IDENTIFICADOR

  ! shift/reduce conflict for EXCLAMACION resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for FLOTANTE resolved as shift
  ! shift/reduce conflict for CHARACTER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for IDENTIFICADOR resolved as shift
    EXCLAMACION     shift and go to state 38
    AUTO            reduce using rule 32 (varblock -> .)
    CHAR            reduce using rule 32 (varblock -> .)
    INT             reduce using rule 32 (varblock -> .)
    FLOAT           reduce using rule 32 (varblock -> .)
    LONG            reduce using rule 32 (varblock -> .)
    ENTERO          shift and go to state 40
    FLOTANTE        shift and go to state 41
    CHARACTER       shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    IDENTIFICADOR   shift and go to state 39

  ! EXCLAMACION     [ reduce using rule 32 (varblock -> .) ]
  ! ENTERO          [ reduce using rule 32 (varblock -> .) ]
  ! FLOTANTE        [ reduce using rule 32 (varblock -> .) ]
  ! CHARACTER       [ reduce using rule 32 (varblock -> .) ]
  ! STRING          [ reduce using rule 32 (varblock -> .) ]
  ! TRUE            [ reduce using rule 32 (varblock -> .) ]
  ! FALSE           [ reduce using rule 32 (varblock -> .) ]
  ! IDENTIFICADOR   [ reduce using rule 32 (varblock -> .) ]

    condicionif                    shift and go to state 209
    initcondicion                  shift and go to state 75
    statement                      shift and go to state 76
    varblock                       shift and go to state 77
    expresion                      shift and go to state 61
    valor                          shift and go to state 37

state 194

    (92) for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR . LLAVEL bodyblock LLAVER

    LLAVEL          shift and go to state 210


state 195

    (86) asign -> IDENTIFICADOR MAS . valor
    (90) unaryexp -> IDENTIFICADOR MAS . MAS
    (43) valor -> . ENTERO
    (44) valor -> . FLOTANTE
    (45) valor -> . CHARACTER
    (46) valor -> . STRING
    (47) valor -> . TRUE
    (48) valor -> . FALSE
    (49) valor -> . IDENTIFICADOR

    MAS             shift and go to state 211
    ENTERO          shift and go to state 40
    FLOTANTE        shift and go to state 41
    CHARACTER       shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    IDENTIFICADOR   shift and go to state 39

    valor                          shift and go to state 212

state 196

    (87) asign -> IDENTIFICADOR MENOS . valor
    (91) unaryexp -> IDENTIFICADOR MENOS . MENOS
    (43) valor -> . ENTERO
    (44) valor -> . FLOTANTE
    (45) valor -> . CHARACTER
    (46) valor -> . STRING
    (47) valor -> . TRUE
    (48) valor -> . FALSE
    (49) valor -> . IDENTIFICADOR

    MENOS           shift and go to state 213
    ENTERO          shift and go to state 40
    FLOTANTE        shift and go to state 41
    CHARACTER       shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    IDENTIFICADOR   shift and go to state 39

    valor                          shift and go to state 214

state 197

    (88) asign -> IDENTIFICADOR ASTERISCO . valor
    (43) valor -> . ENTERO
    (44) valor -> . FLOTANTE
    (45) valor -> . CHARACTER
    (46) valor -> . STRING
    (47) valor -> . TRUE
    (48) valor -> . FALSE
    (49) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 40
    FLOTANTE        shift and go to state 41
    CHARACTER       shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    IDENTIFICADOR   shift and go to state 39

    valor                          shift and go to state 215

state 198

    (89) asign -> IDENTIFICADOR SLASH . valor
    (43) valor -> . ENTERO
    (44) valor -> . FLOTANTE
    (45) valor -> . CHARACTER
    (46) valor -> . STRING
    (47) valor -> . TRUE
    (48) valor -> . FALSE
    (49) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 40
    FLOTANTE        shift and go to state 41
    CHARACTER       shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    IDENTIFICADOR   shift and go to state 39

    valor                          shift and go to state 216

state 199

    (94) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL LLAVEL arraydata . LLAVER PUNTOCOMA
    (96) arraydata -> arraydata . COMMA valor

    LLAVER          shift and go to state 217
    COMMA           shift and go to state 218


state 200

    (95) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL LLAVEL LLAVER . PUNTOCOMA

    PUNTOCOMA       shift and go to state 219


state 201

    (97) arraydata -> valor .

    LLAVER          reduce using rule 97 (arraydata -> valor .)
    COMMA           reduce using rule 97 (arraydata -> valor .)


state 202

    (104) funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL funcionblock LLAVER .

    $end            reduce using rule 104 (funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL funcionblock LLAVER .)
    LLAVER          reduce using rule 104 (funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL funcionblock LLAVER .)
    VOID            reduce using rule 104 (funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL funcionblock LLAVER .)
    INT             reduce using rule 104 (funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL funcionblock LLAVER .)
    FLOAT           reduce using rule 104 (funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL funcionblock LLAVER .)
    LONG            reduce using rule 104 (funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL funcionblock LLAVER .)
    AUTO            reduce using rule 104 (funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL funcionblock LLAVER .)
    CHAR            reduce using rule 104 (funcionclaseimpl -> tipo IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL funcionblock LLAVER .)


state 203

    (25) funcionblock -> bodyblock variable .
    (20) bodyblock -> bodyblock variable .

    LLAVER          reduce using rule 25 (funcionblock -> bodyblock variable .)
    AUTO            reduce using rule 20 (bodyblock -> bodyblock variable .)
    CHAR            reduce using rule 20 (bodyblock -> bodyblock variable .)
    WHILE           reduce using rule 20 (bodyblock -> bodyblock variable .)
    IF              reduce using rule 20 (bodyblock -> bodyblock variable .)
    FOR             reduce using rule 20 (bodyblock -> bodyblock variable .)
    INT             reduce using rule 20 (bodyblock -> bodyblock variable .)
    FLOAT           reduce using rule 20 (bodyblock -> bodyblock variable .)
    LONG            reduce using rule 20 (bodyblock -> bodyblock variable .)


state 204

    (26) funcionblock -> bodyblock while .
    (21) bodyblock -> bodyblock while .

    LLAVER          reduce using rule 26 (funcionblock -> bodyblock while .)
    AUTO            reduce using rule 21 (bodyblock -> bodyblock while .)
    CHAR            reduce using rule 21 (bodyblock -> bodyblock while .)
    WHILE           reduce using rule 21 (bodyblock -> bodyblock while .)
    IF              reduce using rule 21 (bodyblock -> bodyblock while .)
    FOR             reduce using rule 21 (bodyblock -> bodyblock while .)
    INT             reduce using rule 21 (bodyblock -> bodyblock while .)
    FLOAT           reduce using rule 21 (bodyblock -> bodyblock while .)
    LONG            reduce using rule 21 (bodyblock -> bodyblock while .)


state 205

    (27) funcionblock -> bodyblock expresionif .
    (22) bodyblock -> bodyblock expresionif .

    LLAVER          reduce using rule 27 (funcionblock -> bodyblock expresionif .)
    AUTO            reduce using rule 22 (bodyblock -> bodyblock expresionif .)
    CHAR            reduce using rule 22 (bodyblock -> bodyblock expresionif .)
    WHILE           reduce using rule 22 (bodyblock -> bodyblock expresionif .)
    IF              reduce using rule 22 (bodyblock -> bodyblock expresionif .)
    FOR             reduce using rule 22 (bodyblock -> bodyblock expresionif .)
    INT             reduce using rule 22 (bodyblock -> bodyblock expresionif .)
    FLOAT           reduce using rule 22 (bodyblock -> bodyblock expresionif .)
    LONG            reduce using rule 22 (bodyblock -> bodyblock expresionif .)


state 206

    (28) funcionblock -> bodyblock for .
    (23) bodyblock -> bodyblock for .

    LLAVER          reduce using rule 28 (funcionblock -> bodyblock for .)
    AUTO            reduce using rule 23 (bodyblock -> bodyblock for .)
    CHAR            reduce using rule 23 (bodyblock -> bodyblock for .)
    WHILE           reduce using rule 23 (bodyblock -> bodyblock for .)
    IF              reduce using rule 23 (bodyblock -> bodyblock for .)
    FOR             reduce using rule 23 (bodyblock -> bodyblock for .)
    INT             reduce using rule 23 (bodyblock -> bodyblock for .)
    FLOAT           reduce using rule 23 (bodyblock -> bodyblock for .)
    LONG            reduce using rule 23 (bodyblock -> bodyblock for .)


state 207

    (29) funcionblock -> RETURN statement .

    LLAVER          reduce using rule 29 (funcionblock -> RETURN statement .)


state 208

    (105) funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER .

    $end            reduce using rule 105 (funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER .)
    LLAVER          reduce using rule 105 (funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER .)
    VOID            reduce using rule 105 (funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER .)
    INT             reduce using rule 105 (funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER .)
    FLOAT           reduce using rule 105 (funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER .)
    LONG            reduce using rule 105 (funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER .)
    AUTO            reduce using rule 105 (funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER .)
    CHAR            reduce using rule 105 (funcionclaseimpl -> VOID IDENTIFICADOR LPAR parametrosimplementacion RPAR LLAVEL bodyblock LLAVER .)


state 209

    (58) elseif -> ELSE IF LPAR condicionif . RPAR conllaves else
    (59) elseif -> ELSE IF LPAR condicionif . RPAR sinllaves else

    RPAR            shift and go to state 220


state 210

    (92) for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL . bodyblock LLAVER
    (20) bodyblock -> . bodyblock variable
    (21) bodyblock -> . bodyblock while
    (22) bodyblock -> . bodyblock expresionif
    (23) bodyblock -> . bodyblock for
    (24) bodyblock -> .

    LLAVER          reduce using rule 24 (bodyblock -> .)
    AUTO            reduce using rule 24 (bodyblock -> .)
    CHAR            reduce using rule 24 (bodyblock -> .)
    WHILE           reduce using rule 24 (bodyblock -> .)
    IF              reduce using rule 24 (bodyblock -> .)
    FOR             reduce using rule 24 (bodyblock -> .)
    INT             reduce using rule 24 (bodyblock -> .)
    FLOAT           reduce using rule 24 (bodyblock -> .)
    LONG            reduce using rule 24 (bodyblock -> .)

    bodyblock                      shift and go to state 221

state 211

    (90) unaryexp -> IDENTIFICADOR MAS MAS .

    RPAR            reduce using rule 90 (unaryexp -> IDENTIFICADOR MAS MAS .)


state 212

    (86) asign -> IDENTIFICADOR MAS valor .

    RPAR            reduce using rule 86 (asign -> IDENTIFICADOR MAS valor .)


state 213

    (91) unaryexp -> IDENTIFICADOR MENOS MENOS .

    RPAR            reduce using rule 91 (unaryexp -> IDENTIFICADOR MENOS MENOS .)


state 214

    (87) asign -> IDENTIFICADOR MENOS valor .

    RPAR            reduce using rule 87 (asign -> IDENTIFICADOR MENOS valor .)


state 215

    (88) asign -> IDENTIFICADOR ASTERISCO valor .

    RPAR            reduce using rule 88 (asign -> IDENTIFICADOR ASTERISCO valor .)


state 216

    (89) asign -> IDENTIFICADOR SLASH valor .

    RPAR            reduce using rule 89 (asign -> IDENTIFICADOR SLASH valor .)


state 217

    (94) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL LLAVEL arraydata LLAVER . PUNTOCOMA

    PUNTOCOMA       shift and go to state 222


state 218

    (96) arraydata -> arraydata COMMA . valor
    (43) valor -> . ENTERO
    (44) valor -> . FLOTANTE
    (45) valor -> . CHARACTER
    (46) valor -> . STRING
    (47) valor -> . TRUE
    (48) valor -> . FALSE
    (49) valor -> . IDENTIFICADOR

    ENTERO          shift and go to state 40
    FLOTANTE        shift and go to state 41
    CHARACTER       shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    IDENTIFICADOR   shift and go to state 39

    valor                          shift and go to state 223

state 219

    (95) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL LLAVEL LLAVER PUNTOCOMA .

    $end            reduce using rule 95 (arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL LLAVEL LLAVER PUNTOCOMA .)


state 220

    (58) elseif -> ELSE IF LPAR condicionif RPAR . conllaves else
    (59) elseif -> ELSE IF LPAR condicionif RPAR . sinllaves else
    (65) conllaves -> . LLAVEL bodyblock LLAVER
    (63) sinllaves -> . while
    (64) sinllaves -> . variable
    (50) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (33) variable -> . AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA
    (34) variable -> . AUTO IDENTIFICADOR PUNTOCOMA
    (35) variable -> . numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA
    (36) variable -> . numerotipo IDENTIFICADOR PUNTOCOMA
    (37) variable -> . CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA
    (38) numerotipo -> . INT
    (39) numerotipo -> . FLOAT
    (40) numerotipo -> . LONG

    LLAVEL          shift and go to state 133
    WHILE           shift and go to state 17
    AUTO            shift and go to state 109
    CHAR            shift and go to state 110
    INT             shift and go to state 111
    FLOAT           shift and go to state 112
    LONG            shift and go to state 113

    conllaves                      shift and go to state 224
    sinllaves                      shift and go to state 225
    while                          shift and go to state 134
    variable                       shift and go to state 135
    numerotipo                     shift and go to state 15

state 221

    (92) for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock . LLAVER
    (20) bodyblock -> bodyblock . variable
    (21) bodyblock -> bodyblock . while
    (22) bodyblock -> bodyblock . expresionif
    (23) bodyblock -> bodyblock . for
    (33) variable -> . AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA
    (34) variable -> . AUTO IDENTIFICADOR PUNTOCOMA
    (35) variable -> . numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA
    (36) variable -> . numerotipo IDENTIFICADOR PUNTOCOMA
    (37) variable -> . CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA
    (50) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (53) expresionif -> . IF LPAR condicionif RPAR conllaves expresionpos
    (54) expresionif -> . IF LPAR condicionif RPAR sinllaves expresionpos
    (92) for -> . FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER
    (38) numerotipo -> . INT
    (39) numerotipo -> . FLOAT
    (40) numerotipo -> . LONG

    LLAVER          shift and go to state 226
    AUTO            shift and go to state 109
    CHAR            shift and go to state 110
    WHILE           shift and go to state 17
    IF              shift and go to state 19
    FOR             shift and go to state 21
    INT             shift and go to state 111
    FLOAT           shift and go to state 112
    LONG            shift and go to state 113

    variable                       shift and go to state 172
    while                          shift and go to state 173
    expresionif                    shift and go to state 174
    for                            shift and go to state 175
    numerotipo                     shift and go to state 15

state 222

    (94) arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL LLAVEL arraydata LLAVER PUNTOCOMA .

    $end            reduce using rule 94 (arraydeclaration -> tipo IDENTIFICADOR CORCHETEL ENTERO CORCHETER IGUAL LLAVEL arraydata LLAVER PUNTOCOMA .)


state 223

    (96) arraydata -> arraydata COMMA valor .

    LLAVER          reduce using rule 96 (arraydata -> arraydata COMMA valor .)
    COMMA           reduce using rule 96 (arraydata -> arraydata COMMA valor .)


state 224

    (58) elseif -> ELSE IF LPAR condicionif RPAR conllaves . else
    (61) else -> . ELSE conllaves
    (62) else -> . ELSE sinllaves

    ELSE            shift and go to state 227

    else                           shift and go to state 228

state 225

    (59) elseif -> ELSE IF LPAR condicionif RPAR sinllaves . else
    (61) else -> . ELSE conllaves
    (62) else -> . ELSE sinllaves

    ELSE            shift and go to state 227

    else                           shift and go to state 229

state 226

    (92) for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .

    $end            reduce using rule 92 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)
    LLAVER          reduce using rule 92 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)
    AUTO            reduce using rule 92 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)
    CHAR            reduce using rule 92 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)
    WHILE           reduce using rule 92 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)
    IF              reduce using rule 92 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)
    FOR             reduce using rule 92 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)
    INT             reduce using rule 92 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)
    FLOAT           reduce using rule 92 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)
    LONG            reduce using rule 92 (for -> FOR LPAR initfor PUNTOCOMA condfor PUNTOCOMA loopfor RPAR LLAVEL bodyblock LLAVER .)


state 227

    (61) else -> ELSE . conllaves
    (62) else -> ELSE . sinllaves
    (65) conllaves -> . LLAVEL bodyblock LLAVER
    (63) sinllaves -> . while
    (64) sinllaves -> . variable
    (50) while -> . WHILE LPAR statement RPAR LLAVEL bodyblock LLAVER
    (33) variable -> . AUTO IDENTIFICADOR IGUAL valor PUNTOCOMA
    (34) variable -> . AUTO IDENTIFICADOR PUNTOCOMA
    (35) variable -> . numerotipo IDENTIFICADOR IGUAL numero PUNTOCOMA
    (36) variable -> . numerotipo IDENTIFICADOR PUNTOCOMA
    (37) variable -> . CHAR IDENTIFICADOR IGUAL CHARACTER PUNTOCOMA
    (38) numerotipo -> . INT
    (39) numerotipo -> . FLOAT
    (40) numerotipo -> . LONG

    LLAVEL          shift and go to state 133
    WHILE           shift and go to state 17
    AUTO            shift and go to state 109
    CHAR            shift and go to state 110
    INT             shift and go to state 111
    FLOAT           shift and go to state 112
    LONG            shift and go to state 113

    conllaves                      shift and go to state 176
    sinllaves                      shift and go to state 177
    while                          shift and go to state 134
    variable                       shift and go to state 135
    numerotipo                     shift and go to state 15

state 228

    (58) elseif -> ELSE IF LPAR condicionif RPAR conllaves else .

    $end            reduce using rule 58 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    LLAVER          reduce using rule 58 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    AUTO            reduce using rule 58 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    CHAR            reduce using rule 58 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    WHILE           reduce using rule 58 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    IF              reduce using rule 58 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    FOR             reduce using rule 58 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    INT             reduce using rule 58 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    FLOAT           reduce using rule 58 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)
    LONG            reduce using rule 58 (elseif -> ELSE IF LPAR condicionif RPAR conllaves else .)


state 229

    (59) elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .

    $end            reduce using rule 59 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    LLAVER          reduce using rule 59 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    AUTO            reduce using rule 59 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    CHAR            reduce using rule 59 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    WHILE           reduce using rule 59 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    IF              reduce using rule 59 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    FOR             reduce using rule 59 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    INT             reduce using rule 59 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    FLOAT           reduce using rule 59 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)
    LONG            reduce using rule 59 (elseif -> ELSE IF LPAR condicionif RPAR sinllaves else .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IDENTIFICADOR in state 13 resolved as shift
WARNING: shift/reduce conflict for IDENTIFICADOR in state 16 resolved as shift
WARNING: shift/reduce conflict for IDENTIFICADOR in state 23 resolved as shift
WARNING: shift/reduce conflict for RPAR in state 35 resolved as shift
WARNING: shift/reduce conflict for EXCLAMACION in state 46 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 46 resolved as shift
WARNING: shift/reduce conflict for FLOTANTE in state 46 resolved as shift
WARNING: shift/reduce conflict for CHARACTER in state 46 resolved as shift
WARNING: shift/reduce conflict for STRING in state 46 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 46 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 46 resolved as shift
WARNING: shift/reduce conflict for IDENTIFICADOR in state 46 resolved as shift
WARNING: shift/reduce conflict for IGUAL in state 100 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 100 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 100 resolved as shift
WARNING: shift/reduce conflict for EXCLAMACION in state 100 resolved as shift
WARNING: shift/reduce conflict for LLAVER in state 114 resolved as shift
WARNING: shift/reduce conflict for VOID in state 114 resolved as shift
WARNING: shift/reduce conflict for LLAVER in state 114 resolved as shift
WARNING: shift/reduce conflict for VOID in state 114 resolved as shift
WARNING: shift/reduce conflict for INT in state 114 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 114 resolved as shift
WARNING: shift/reduce conflict for LONG in state 114 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 114 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 114 resolved as shift
WARNING: shift/reduce conflict for EXCLAMACION in state 193 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 193 resolved as shift
WARNING: shift/reduce conflict for FLOTANTE in state 193 resolved as shift
WARNING: shift/reduce conflict for CHARACTER in state 193 resolved as shift
WARNING: shift/reduce conflict for STRING in state 193 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 193 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 193 resolved as shift
WARNING: shift/reduce conflict for IDENTIFICADOR in state 193 resolved as shift
WARNING: reduce/reduce conflict in state 0 resolved using rule (body -> <empty>)
WARNING: rejected rule (funcionclaseimpl -> <empty>) in state 0
WARNING: reduce/reduce conflict in state 26 resolved using rule (tipo -> INT)
WARNING: rejected rule (numerotipo -> INT) in state 26
WARNING: reduce/reduce conflict in state 27 resolved using rule (tipo -> FLOAT)
WARNING: rejected rule (numerotipo -> FLOAT) in state 27
WARNING: reduce/reduce conflict in state 28 resolved using rule (tipo -> LONG)
WARNING: rejected rule (numerotipo -> LONG) in state 28
WARNING: reduce/reduce conflict in state 114 resolved using rule (definicion -> <empty>)
WARNING: rejected rule (funcionclaseimpl -> <empty>) in state 114
WARNING: reduce/reduce conflict in state 131 resolved using rule (expresionpos -> <empty>)
WARNING: rejected rule (elseif -> <empty>) in state 131
WARNING: reduce/reduce conflict in state 132 resolved using rule (expresionpos -> <empty>)
WARNING: rejected rule (elseif -> <empty>) in state 132
WARNING: Rule (funcionclaseimpl -> <empty>) is never reduced
WARNING: Rule (elseif -> <empty>) is never reduced
